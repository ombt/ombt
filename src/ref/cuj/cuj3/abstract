Hi Marc,

In the December issue of C/C++ Users' Journal there was a request for
short articles. The article I'm proposing describes a simple template
function which determines the floating-point precision for any type:
float, double, complex<double>, complex<float>, etc. This information
is vital for functions which solve NXN matrices since it is the
key criteria to determine if a set of linear equations is singular or not. 
If the matrix code is templatized, then it has no simple way of knowing the 
underlying precision. With this function, a templatized LUP decomposition 
function can determine the precision quickly. The function is shown below, 
along with an example.

The values generated can be compared to those listed in float.h. They are 
the same in all cases.

Mike Rumore
(mrumore@lucent.com)

------------------- template function header ---------------------------
#ifndef __EPSILON_H
#define __EPSILON_H

// declaration
template <class T> T calcEpsilon(T);

#endif

------------------- template function -------------------------------

#include "epsilon.h"

#ifdef SHORTVERSION

template <class T>
T
calcEpsilon(T)
{
	T f1 = 1.0;
	T f2 = 1.0;
	T oldf2 = 0.0;

	for (f2 /= 2.0; ((f1-f2) != f1); oldf2=f2, f2 /= 2.0) ;
	return(2.0*oldf2);
}

#else

template <class T>
T
calcEpsilon(T)
{
	T f1 = 1.0;
	T f2 = 1.0;
	T oldf2 = 1.0;

	for (int i = 1; i <= sizeof(T)*8; i++)
	{
		f2 /= 2.0;
		if ((f1-f2) == f1)
			return(2.0*oldf2);
		oldf2 = f2;
	}
	return(0);
}

#endif

--------------------- sample main -------------------------

#include <stdlib.h>
#include <iostream.h>

#include "epsilon.h"
#include "complex.h"

main()
{
	cerr << "long epsilon is ... " << 
		calcEpsilon(long(0)) << endl;

	cerr << "float epsilon is ... " << 
		calcEpsilon(float(0)) << endl;

	cerr << "double epsilon is ... " << 
		calcEpsilon(double(0)) << endl;

	cerr << "long double epsilon is ... " << 
		calcEpsilon((long double)(0)) << endl;

	cerr << "Complex<double> epsilon is ... " << 
		calcEpsilon(Complex<double>(0.0)) << endl;

	cerr << "Complex<long double> epsilon is ... " << 
		calcEpsilon(Complex<long double>(0.0)) << endl;

	cerr << "Complex<float> epsilon is ... " << 
		calcEpsilon(Complex<float>(0.0)) << endl;

	return(0);
}

------------------ actual output -----------------------------

long epsilon is ... 2
float epsilon is ... 1.19209e-07
double epsilon is ... 2.22045e-16
long double epsilon is ... 1.92593e-34
Complex<double> epsilon is ... (2.22045e-16,0)
Complex<long double> epsilon is ... (1.92593e-34,0)
Complex<float> epsilon is ... (1.19209e-07,0)
