%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
3 0 /Palatino-Roman FMFONTDEFINE
4 0 /Palatino-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
7 0 /Times-Roman FMFONTDEFINE
8 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "-1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
0 0 0 1 0 0 0 K
V
0 18 Q
0 X
(Hash Tables for the) 222.48 407.3 T
(Standard Template Library) 191.97 390.24 T
1 14 Q
(Javier Barreiro*, Robert Fraley**, David R. Musser*) 154.55 342.26 T
1 12 Q
(*Rensselaer Polytechnic Institute) 225.68 315.38 T
(Computer Science Department) 232.01 302.38 T
(Troy, NY 12180) 267.83 289.38 T
(**Hewlett-Packard Laboratories) 226.17 263.38 T
(1501 Page Mill Road) 254.5 250.38 T
(Palo Alto, CA 94304) 256 237.38 T
72 72 540 720 C
72 576 540 710 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
288 584 522 701 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
288 584 522 701 C
300 586 510 689 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306 590.33 504 683 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(Doc No: X3J16/94-0218) 306 676.33 T
(WG21/N0605) 350.48 660.33 T
(Date: February 20, 1995) 306 644.33 T
(Project: Programming Language C++) 306 628.33 T
(Reply to: musser@cs.rpi.edu) 306 612.33 T
(fraley@hpl.hp.com) 356.04 596.33 T
288 584 522 701 C
72 576 540 710 C
72 72 540 720 C
0 0 612 792 C
52 339.38 54 351.84 R
0 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "-1" 1
%%Page: "0" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "0" 2
%%Page: "1" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(1) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 18 Q
0 X
(Hash Tables for the) 222.48 708 T
(Standard Template Library) 191.97 690 T
0 12 Q
(1  Introduction) 72 621.25 T
3 10 Q
-0.2 (The Standard Template Library \050STL\051, which has been approved for inclusion in the C++ Standard Library) 72 602.96 P
0.42 (by the ANSI/ISO C++ Standards Committee, supplies a set of associative container classes \050set, multiset,) 72 590.96 P
-0.16 (map, multimap\051 that support fast storage retrieval of data based on keys.  As specified in the STL standard) 72 578.96 P
-0.11 (these containers could be more precisely described as) 72 566.96 P
4 F
-0.11 (sorted) 309.7 566.96 P
3 F
-0.11 ( associative containers, since in addition to fast) 334.14 566.96 P
0.39 (storage and retrieval they are required to support efficient iteration through the entries in sorted order---) 72 554.96 P
2.26 (according to the order determined by a boolean-valued function supplied as a parameter when the) 72 542.96 P
-0.29 (container is created.  The sorted iteration capability is not always needed.  If the requirement for fast sorted) 72 530.96 P
0.62 (iteration is dropped, a wider range of implementations is possible; in particular, an attractive choice is a) 72 518.96 P
0.88 (hash table implementation.  In this report we first show how to restructure the existing STL associative) 72 506.96 P
1.71 (container requirements into two parts: \0501\051 base requirements for all associative containers, and \0502\051 an) 72 494.96 P
1.42 (additional set of requirements for sorting capabilities.We then introduce a set of requirements \0503\051 that) 72 482.96 P
2.25 (together with \0501\051 form a set of requirements for hash tables. These changes and additions are fully) 72 470.96 P
1.73 (consistent with the STL framework and also serve as a significant example of the extensibility of the) 72 458.96 P
(framework.) 72 446.96 T
1.9 (We have developed and experimented with two independent hash table implementations, which are) 72 427.96 P
1.46 (described in detail in separate reports. These implementations not only demonstrate the maturity and) 72 415.96 P
1.51 (consistency of the requirements described here, but should also be of immediate practical use to C++) 72 403.96 P
2.7 (programmers who need associative containers but can do without sorted order of the keys. These) 72 391.96 P
3.54 (implementations are available by anonymous ftp from butler.hpl.hp.com in directory stl or from) 72 379.96 P
1.15 (ftp.cs.rpi.edu in directory pub/stl. A paper giving the rationale for this proposal is also available from) 72 367.96 P
(either site.) 72 355.96 T
1.38 (Part of the material in the following section is adapted directly from) 72 336.96 P
4 F
1.38 (The Standard Template Library) 391.26 336.96 P
3 F
1.38 (, by) 522.53 336.96 P
2.58 (Alexander Stepanov and Meng Lee, Hewlett-Packard Report, December 6, 1994. This section is the) 72 324.96 P
0.76 (restructuring and extension of the section on associative containers \050Section 8\051 from that document. The) 72 312.96 P
(intended changes are the following:) 72 300.96 T
(\245) 81.6 286.96 T
(What were called \322associative containers\323 are now called  \322sorted associative containers,\323 and the) 90 286.96 T
(name \322associative containers\323 now applies to both sorted and unsorted associative containers.) 90 275.96 T
(\245) 81.6 262.96 T
(The previous requirements have been divided into a base set of requirements for all associative) 90 262.96 T
(containers and an additional set that define requirements for sorted associative containers.) 90 251.96 T
(\245) 81.6 238.96 T
-0.38 (The complexity requirements for storage and retrieval operations on associative containers are relaxed) 90 238.96 P
(by specifying) 90 227.96 T
4 F
(expected) 151.66 227.96 T
(time) 188.23 227.96 T
3 F
( bounds rather than worst-case bounds or amortized-cost bounds.) 206.01 227.96 T
(\245) 81.6 214.96 T
(A new table has been added to define the requirements for hash tables.) 90 214.96 T
-0.33 (The use of expected time bounds instead of worst case bounds is necessary for the hash table requirements,) 72 196.96 P
-0.46 (since hash tables cannot satisfy useful worst case bounds  \050hash tables have) 72 184.96 P
4 F
-0.46 (linear) 401.14 184.96 P
3 F
-0.46 ( worst-case behavior; their) 424.48 184.96 P
0.02 (advantage is in the average case\051. Using expected time bounds for) 72 172.96 P
4 F
0.02 (all) 366.03 172.96 P
3 F
0.02 ( associative containers also opens the) 376.03 172.96 P
0.86 (door to alternative balanced tree implementations that have expected or amortized logarithmic bounds,) 72 160.96 P
0.33 (such as randomized search trees or splay trees. No change is made that affects any existing balanced tree) 72 148.96 P
(implementation.) 72 136.96 T
0.07 (The interfaces of container classes set, multiset, map, and multimap have been included for completeness;) 72 117.96 P
(no changes are being proposed to these classes.) 72 105.96 T
52 467.62 54 489.62 R
V
52 412.62 54 434.62 R
V
52 352.62 54 386.62 R
V
52 114.62 54 293.62 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 3
%%Page: "2" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(2) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 12 Q
0 X
(2  Associative containers) 72 711.25 T
3 10 Q
1.4 (Associative containers provide an ability for fast retrieval of data based on keys. There are two major) 72 692.96 P
-0.4 (categories of associative containers:) 72 680.96 P
4 F
-0.4 (sorted associative containers) 229.66 680.96 P
3 F
-0.4 ( and) 343.1 680.96 P
4 F
-0.4 (hashed associative containers) 364.22 680.96 P
3 F
-0.4 (; the latter are) 480.43 680.96 P
0.79 (also called) 72 668.96 P
4 F
0.79 (hash tables) 122.34 668.96 P
3 F
0.79 (. These categories share many requirements, which we call the) 166.91 668.96 P
4 F
0.79 (base requirements for) 452.49 668.96 P
(associative containers) 72 656.96 T
3 F
(.) 159.3 656.96 T
0.42 (The library provides four basic kinds of sorted associative containers:) 72 637.96 P
5 9 Q
0.91 (set) 385.09 637.96 P
3 10 Q
0.42 (,) 401.29 637.96 P
5 9 Q
0.91 (multiset) 406.71 637.96 P
3 10 Q
0.42 (,) 449.91 637.96 P
5 9 Q
0.91 (map) 455.33 637.96 P
3 10 Q
0.42 ( and) 471.53 637.96 P
5 9 Q
0.91 (multimap) 494.3 637.96 P
3 10 Q
0.42 (,) 537.5 637.96 P
(and four basic kinds of hash tables:) 72 625.96 T
5 9 Q
(hash_set) 229.86 625.96 T
3 10 Q
(,) 273.06 625.96 T
5 9 Q
(hash_multiset) 278.06 625.96 T
3 10 Q
(,) 348.26 625.96 T
5 9 Q
(hash_map) 353.26 625.96 T
3 10 Q
( and) 396.46 625.96 T
5 9 Q
(hash_multimap) 418.39 625.96 T
3 10 Q
(.) 488.59 625.96 T
0.78 (All of the sorted associative containers are parameterized on) 72 606.96 P
5 9 Q
1.68 (Key) 348.58 606.96 P
3 10 Q
0.78 ( and an ordering relation) 364.78 606.96 P
5 9 Q
1.68 (Compare) 481.58 606.96 P
3 10 Q
0.78 ( that) 519.38 606.96 P
0.57 (induces a total ordering on elements of) 72 594.96 P
5 9 Q
1.22 (Key) 250.74 594.96 P
3 10 Q
0.57 (. In addition,) 266.95 594.96 P
5 9 Q
1.22 (map) 327.91 594.96 P
3 10 Q
0.57 ( and) 344.11 594.96 P
5 9 Q
1.22 (multimap) 367.18 594.96 P
3 10 Q
0.57 ( associate an arbitrary type) 410.38 594.96 P
5 9 Q
1.22 (T) 534.6 594.96 P
3 10 Q
(with the) 72 582.96 T
5 9 Q
(Key) 111.2 582.96 T
3 10 Q
(. The object of type) 127.4 582.96 T
5 9 Q
(Compare) 213.37 582.96 T
3 10 Q
( is called the) 251.17 582.96 T
4 F
( comparison object) 305.85 582.96 T
3 F
( of a container.) 380.28 582.96 T
0.81 (All of the hash tables are parameterized on) 72 563.96 P
5 9 Q
1.76 (Key) 270.79 563.96 P
3 10 Q
0.81 (, a function type) 286.99 563.96 P
5 9 Q
1.76 (Hasher) 364.43 563.96 P
3 10 Q
0.81 ( that maps elements of) 396.83 563.96 P
5 9 Q
1.76 (Key) 503.04 563.96 P
3 10 Q
0.81 ( into) 519.24 563.96 P
-0.53 (integers, and a function type) 72 551.96 P
5 9 Q
-1.14 (KeyEqual) 198.3 551.96 P
3 10 Q
-0.53 ( that induces an equivalence relation on elements of) 241.5 551.96 P
5 9 Q
-1.14 (Key) 468.08 551.96 P
3 10 Q
-0.53 (. In addition,) 484.28 551.96 P
5 9 Q
0.79 (hash_map) 72 539.96 P
3 10 Q
0.37 ( and) 115.2 539.96 P
5 9 Q
0.79 (hash_multimap) 137.86 539.96 P
3 10 Q
0.37 ( associate an arbitrary type) 208.06 539.96 P
5 9 Q
0.79 (T) 331.27 539.96 P
3 10 Q
0.37 ( with the) 336.67 539.96 P
5 9 Q
0.79 (Key) 379.47 539.96 P
3 10 Q
0.37 (. The object of type) 395.67 539.96 P
5 9 Q
0.79 (KeyEqual) 483.46 539.96 P
3 10 Q
0.37 (is) 532.85 539.96 P
(called the) 72 527.96 T
4 F
( key-equivalence object) 114.53 527.96 T
3 F
( of a container.) 205.82 527.96 T
0.09 (With sorted associative containers, when we talk about equality of keys we mean the equivalence relation) 72 508.96 P
-0.19 (imposed by the comparison and) 72 496.96 P
4 F
-0.19 (not) 215.89 496.96 P
3 F
-0.19 ( the) 229.22 496.96 P
5 9 Q
-0.42 (operator==) 247.71 496.96 P
3 10 Q
-0.19 ( on keys. That is, two keys) 301.71 496.96 P
5 9 Q
-0.42 (k1) 418.86 496.96 P
3 10 Q
-0.19 ( and) 429.66 496.96 P
5 9 Q
-0.42 (k2) 451.2 496.96 P
3 10 Q
-0.19 ( are considered to) 462 496.96 P
(be equal if for the comparison object) 72 484.96 T
5 9 Q
(comp) 234.94 484.96 T
3 10 Q
(,) 256.54 484.96 T
5 9 Q
(comp\050k1, k2\051 == false && comp\050k2, k1\051 == false) 261.54 484.96 T
3 10 Q
(.) 509.94 484.96 T
0.47 (With hash tables, when we talk about equality of keys we mean the equivalence relation imposed by the) 72 465.96 P
0.34 (key-equivalence object and) 72 453.96 P
4 F
0.34 (not) 195.24 453.96 P
3 F
0.34 ( the) 208.57 453.96 P
5 9 Q
0.74 (operator==) 228.13 453.96 P
3 10 Q
0.34 ( on keys. That is, two keys) 282.13 453.96 P
5 9 Q
0.74 (k1) 403.02 453.96 P
3 10 Q
0.34 ( and) 413.82 453.96 P
5 9 Q
0.74 (k2) 436.43 453.96 P
3 10 Q
0.34 ( are considered to be) 447.23 453.96 P
(equal if for the key equivalence object) 72 441.96 T
5 9 Q
(equal) 241.14 441.96 T
3 10 Q
(,) 268.14 441.96 T
5 9 Q
(equal\050k1, k2\051 == true.) 273.14 441.96 T
3 10 Q
-0.52 (An associative container \050either sorted or hashed\051 supports) 72 422.96 P
4 F
-0.52 (unique keys) 331.17 422.96 P
3 F
-0.52 ( if it may contain at most one element) 378.35 422.96 P
0.83 (for each key. Otherwise, it supports) 72 410.96 P
4 F
0.83 (equal keys) 237 410.96 P
3 F
0.83 (.) 278.85 410.96 P
5 9 Q
1.79 (set) 284.68 410.96 P
3 10 Q
0.83 (,) 300.88 410.96 P
5 9 Q
1.79 (map) 306.71 410.96 P
3 10 Q
0.83 (,) 322.91 410.96 P
5 9 Q
1.79 (hash_set) 328.74 410.96 P
3 10 Q
0.83 (, and) 371.94 410.96 P
5 9 Q
1.79 (hash_map) 398.02 410.96 P
3 10 Q
0.83 ( support unique keys.) 441.22 410.96 P
5 9 Q
(multiset) 72 398.96 T
3 10 Q
(,) 115.2 398.96 T
5 9 Q
(multimap) 120.2 398.96 T
3 10 Q
(,) 163.4 398.96 T
5 9 Q
(hash_multiset,) 168.4 398.96 T
3 10 Q
( and) 244 398.96 T
5 9 Q
( hash_multimap) 263.43 398.96 T
3 10 Q
(support equal keys.) 344.43 398.96 T
0.84 (For) 72 379.96 P
5 9 Q
1.81 (set) 90.31 379.96 P
3 10 Q
0.84 (,) 106.51 379.96 P
5 9 Q
1.81 (multiset) 112.35 379.96 P
3 10 Q
0.84 (,) 155.54 379.96 P
5 9 Q
1.81 (hash_set) 161.38 379.96 P
3 10 Q
0.84 (, and) 204.58 379.96 P
5 9 Q
1.81 (hash_multiset) 230.69 379.96 P
3 10 Q
0.84 (, the value type is the same as the key type. For) 300.89 379.96 P
5 9 Q
1.81 (map) 521.3 379.96 P
3 10 Q
0.84 (,) 537.5 379.96 P
5 9 Q
(multimap) 72 367.96 T
3 10 Q
(,) 115.2 367.96 T
5 9 Q
(hash_map) 120.2 367.96 T
3 10 Q
(, and) 163.4 367.96 T
5 9 Q
(hash_multimap) 187.83 367.96 T
3 10 Q
(, it is equal to) 258.03 367.96 T
5 9 Q
(pair<const Key, T>) 319.4 367.96 T
3 10 Q
(.) 416.6 367.96 T
5 9 Q
0.67 (The iterator) 72 348.96 P
3 10 Q
0.31 ( type of a sorted associative container is of the bidirectional iterator category, while that of) 137.47 348.96 P
-0.44 (hash tables is of the forward iterator category.) 72 336.96 P
5 9 Q
-0.95 (insert) 274.15 336.96 P
3 10 Q
-0.44 ( does not affect the validity of iterators and references) 306.55 336.96 P
(to the container, and) 72 324.96 T
5 9 Q
(erase) 165.47 324.96 T
3 10 Q
( invalidates only the iterators and references to the erased elements.) 192.47 324.96 T
0.56 (In the following table,) 72 305.96 P
5 9 Q
1.2 (X) 173.97 305.96 P
3 10 Q
0.56 ( is an associative container class,) 179.37 305.96 P
5 9 Q
1.2 (a) 328.36 305.96 P
3 10 Q
0.56 ( is a value of) 333.76 305.96 P
5 9 Q
1.2 (X) 394.36 305.96 P
3 10 Q
0.56 (,) 399.76 305.96 P
5 9 Q
1.2 (a_uniq) 405.32 305.96 P
3 10 Q
0.56 ( is a value of) 437.72 305.96 P
5 9 Q
1.2 (X) 498.32 305.96 P
3 10 Q
0.56 ( when) 503.72 305.96 P
5 9 Q
1.2 (X) 534.6 305.96 P
3 10 Q
-0.34 (supports unique keys, and) 72 293.96 P
5 9 Q
-0.74 (a_eq) 190.59 293.96 P
3 10 Q
-0.34 ( is a value of) 212.19 293.96 P
5 9 Q
-0.74 (X) 268.31 293.96 P
3 10 Q
-0.34 ( when) 273.71 293.96 P
5 9 Q
-0.74 (X) 302.79 293.96 P
3 10 Q
-0.34 ( supports multiple keys,) 308.19 293.96 P
5 9 Q
-0.74 (i) 416.33 293.96 P
3 10 Q
-0.34 ( and) 421.73 293.96 P
5 9 Q
-0.74 (j) 442.97 293.96 P
3 10 Q
-0.34 ( satisfy input iterator) 448.37 293.96 P
0.12 (requirements and refer to elements of) 72 281.96 P
5 9 Q
0.25 (value_type) 241.34 281.96 P
3 10 Q
0.12 (,) 295.34 281.96 P
5 9 Q
0.25 ([i, j\051) 300.45 281.96 P
3 10 Q
0.12 ( is a valid range,) 333.11 281.96 P
5 9 Q
0.25 (p) 408.54 281.96 P
3 10 Q
0.12 ( is a valid iterator to) 413.94 281.96 P
5 9 Q
0.25 (a) 505.67 281.96 P
3 10 Q
0.12 (,) 511.07 281.96 P
5 9 Q
0.25 (q) 516.18 281.96 P
3 10 Q
0.12 (,) 521.58 281.96 P
5 9 Q
0.25 (q1) 526.7 281.96 P
3 10 Q
0.12 (,) 537.5 281.96 P
5 9 Q
0.14 (q2) 72 269.96 P
3 10 Q
0.06 ( are valid dereferenceable iterators to) 82.8 269.96 P
5 9 Q
0.14 (a) 249.82 269.96 P
3 10 Q
0.06 (,) 255.23 269.96 P
5 9 Q
0.14 ([q1, q2\051) 260.29 269.96 P
3 10 Q
0.06 ( is a valid range,) 303.63 269.96 P
5 9 Q
0.14 (t) 378.8 269.96 P
3 10 Q
0.06 ( is a value of) 384.2 269.96 P
5 9 Q
0.14 (X::value_type) 442.34 269.96 P
3 10 Q
0.06 ( and) 512.54 269.96 P
5 9 Q
0.14 (k) 534.6 269.96 P
3 10 Q
0.52 (is a value of) 72 257.96 P
5 9 Q
1.12 (X::key_type) 129.39 257.96 P
3 10 Q
0.52 (. The table entries in the complexity column are in some cases qualified by the) 188.79 257.96 P
6 12 Q
(T) 106.78 234.62 T
(able 1: Base r) 113.68 234.62 T
(equir) 183.13 234.62 T
(ements for associative container \050in addition to container\051) 210.25 234.62 T
7 10 Q
(expression) 101.01 203.96 T
(return type) 197.8 203.96 T
(assertion/note) 328.62 209.96 T
(pre/post-condition) 319.73 197.96 T
(complexity) 470.7 203.96 T
5 9 Q
(X::key_type) 78 176.62 T
(Key) 178.8 176.62 T
7 10 Q
(compile time) 452.4 175.96 T
5 9 Q
(a_uniq.insert\050t\051) 78 156.62 T
(pair<iterator,) 178.8 155.96 T
(bool>) 178.8 143.96 T
7 10 Q
-0.13 (inserts) 272.4 155.96 P
5 9 Q
-0.27 (t) 300.88 155.96 P
7 10 Q
-0.13 ( if and only if there is no element) 306.28 155.96 P
-0 (in the container with key equal to the key) 272.4 143.96 P
-0.46 (of) 272.4 131.96 P
5 9 Q
-1 (t) 282.77 131.96 P
7 10 Q
-0.46 (. The) 288.17 131.96 P
5 9 Q
-1 (bool) 310.3 131.96 P
7 10 Q
-0.46 ( component of the returned) 331.9 131.96 P
(pair indicates whether the insertion takes) 272.4 119.96 T
(place and the) 272.4 107.96 T
5 9 Q
(iterator) 327.66 107.96 T
7 10 Q
( component of) 370.86 107.96 T
(the pair points to the element with key) 272.4 95.96 T
(equal to the key of) 272.4 83.96 T
5 9 Q
(t) 349.33 83.96 T
7 10 Q
(.) 354.73 83.96 T
(expected logarith-) 452.4 155.96 T
(mic) 452.4 143.96 T
72 224.38 72 76.88 2 L
V
0.5 H
0 Z
N
172.8 224.88 172.8 76.38 2 L
V
N
266.4 224.88 266.4 76.38 2 L
V
N
446.4 224.88 446.4 76.38 2 L
V
N
540 224.38 540 76.88 2 L
V
N
71.75 224.62 540.25 224.62 2 L
V
N
72.25 189.88 539.75 189.88 2 L
V
N
72.25 187.38 539.75 187.38 2 L
V
N
71.75 168.62 540.25 168.62 2 L
V
N
71.75 76.62 540.25 76.62 2 L
V
N
52 560.62 54 570.62 R
V
52 395.62 54 405.62 R
V
52 254.62 54 264.62 R
V
52 152.62 54 162.62 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 4
%%Page: "3" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(3) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
-0.52 (word) 72 231.33 P
4 F
-0.52 (expected,) 97.84 231.33 P
3 F
-0.52 ( meaning that the expected \050or average\051 time is required to satisfy the indicated bound, rather) 134.41 231.33 P
0.51 (than the worst-case time. For example expected logarithmic means that the expected time must be O\050log) 72 219.33 P
0.8 (size\050\051\051, which is a looser requirement than requiring the worst-case time to be logarithmic. Note that an) 72 207.33 P
-0.31 (expected time requirement is also met by an implementation for which the) 72 195.33 P
4 F
-0.31 (amortized) 400.23 195.33 P
3 F
-0.31 ( time meets the bound;) 440.22 195.33 P
0.19 (i.e., the stated expected time requirements allow implementations with either expected or amortized time) 72 183.33 P
0.36 (bounds. Finally, note that many of the complexity requirements given in this base requirements table are) 72 171.33 P
0.66 (replaced in Table 3 \050Additional requirements for hash tables\051 by stronger complexity requirements \050e.g.,) 72 159.33 P
(expected logarithmic is replaced by expected constant\051.) 72 147.33 T
5 9 Q
(a_eq.insert\050t\051) 78 654 T
(iterator) 178.8 653.33 T
7 10 Q
(inserts) 272.4 653.33 T
5 9 Q
(t) 301.01 653.33 T
7 10 Q
( and returns the iterator pointing) 306.41 653.33 T
(to the newly inserted element.) 272.4 641.33 T
(expected logarith-) 452.4 653.33 T
(mic) 452.4 641.33 T
5 9 Q
(a.insert\050i, j\051) 78 622 T
7 10 Q
(result is not used) 178.8 621.33 T
(inserts the elements from the range) 272.4 621.33 T
5 9 Q
([i,) 415.15 621.33 T
(j\051) 272.4 609.33 T
7 10 Q
( into the container) 283.2 609.33 T
(.) 355.14 609.33 T
(expected) 452.4 621.33 T
5 9 Q
(O\050Nlog\050size\050\051+N) 452.4 609.33 T
(\051) 452.4 597.33 T
7 10 Q
( \050) 457.8 597.33 T
5 9 Q
(N) 463.63 597.33 T
7 10 Q
( is the distance) 469.03 597.33 T
(from) 452.4 585.33 T
5 9 Q
(i) 474.34 585.33 T
7 10 Q
( to) 479.74 585.33 T
5 9 Q
(j) 492.52 585.33 T
7 10 Q
(\051 in gen-) 497.92 585.33 T
(eral; expected) 452.4 573.33 T
5 9 Q
(O\050N\051) 452.4 561.33 T
7 10 Q
( if) 474 561.33 T
5 9 Q
([i, j\051) 485.11 561.33 T
7 10 Q
( is) 517.51 561.33 T
(sorted according to) 452.4 549.33 T
5 9 Q
(value_comp\050\051) 452.4 537.33 T
(a.erase\050k\051) 78 518 T
(size_type) 178.8 518 T
7 10 Q
(erases all the elements in the container) 272.4 517.33 T
(with key equal to) 272.4 505.33 T
5 9 Q
(k) 344.06 505.33 T
7 10 Q
(.) 349.46 505.33 T
(returns the number of erased elements.) 272.4 493.33 T
(expected) 452.4 518 T
5 9 Q
(O\050log\050size\050\051\051) 452.4 507 T
(+ count\050k\051\051) 452.4 496 T
(a.erase\050q\051) 78 474 T
7 10 Q
(result is not used) 178.8 474 T
(erases the element pointed to by) 272.4 473.33 T
5 9 Q
(q) 403.49 473.33 T
7 10 Q
(.) 408.89 473.33 T
(expected constant) 452.4 473.33 T
5 9 Q
(a.erase\050q1, q2\051) 78 454 T
7 10 Q
(result is not used) 178.8 454 T
-0.1 (erases all the elements in the range) 272.4 453.33 P
5 9 Q
-0.22 ([q1,) 413.61 453.33 P
(q2\051) 272.4 441.33 T
7 10 Q
(.) 288.6 441.33 T
5 9 Q
(O\050log\050size\050\051\051+) 452.4 453.33 T
(N) 452.4 441.33 T
7 10 Q
(\051 where) 457.8 441.33 T
5 9 Q
(N) 490.56 441.33 T
7 10 Q
( is the) 495.96 441.33 T
(distance from) 452.4 429.33 T
5 9 Q
(q1) 509.61 429.33 T
7 10 Q
( to) 520.41 429.33 T
5 9 Q
(q2) 452.4 417.33 T
7 10 Q
(.) 463.2 417.33 T
5 9 Q
(a.find\050k\051) 78 398 T
(iterator;) 178.8 398 T
(const_iterator) 178.8 386.33 T
7 10 Q
(for constant) 178.8 374.33 T
5 9 Q
(a) 228.79 374.33 T
7 10 Q
(returns an iterator pointing to an element) 272.4 397.33 T
(with the key equal to) 272.4 385.33 T
5 9 Q
(k) 358.78 385.33 T
7 10 Q
(, or) 364.18 385.33 T
5 9 Q
(a.end\050\051) 380.01 385.33 T
7 10 Q
( if) 417.81 385.33 T
(such an element is not found.) 272.4 373.33 T
(expected logarith-) 452.4 397.33 T
(mic) 452.4 385.33 T
5 9 Q
(a.count\050k\051) 78 354 T
(size_type) 178.8 354 T
7 10 Q
(returns the number of elements with key) 272.4 353.33 T
(equal to) 272.4 341.33 T
5 9 Q
(k) 306.84 341.33 T
7 10 Q
(.) 312.24 341.33 T
(expected) 452.4 354 T
5 9 Q
(O\050log\050size\050\051\051+) 452.4 343 T
(count\050k\051\051) 452.4 332 T
(a.equal_range\050k\051) 78 313 T
(pair<iterator,) 178.8 313 T
(iterator>;) 178.8 302 T
(pair<const_iter) 178.8 291 T
(ator,) 178.8 280 T
(const_iterator>) 178.8 269 T
7 10 Q
(for constant) 178.8 257.33 T
5 9 Q
(a) 228.79 257.33 T
7 10 Q
(returns iterators) 272.4 312.33 T
5 9 Q
(i) 337.94 312.33 T
7 10 Q
( and) 343.34 312.33 T
5 9 Q
(j) 362.78 312.33 T
7 10 Q
( such that all ele-) 368.18 312.33 T
(ments with keys equal to) 272.4 300.33 T
5 9 Q
(k) 374.34 300.33 T
7 10 Q
( are in the) 379.74 300.33 T
(range) 272.4 288.33 T
5 9 Q
([i, j\051) 297.11 288.33 T
7 10 Q
(. This range is empty if no) 329.51 288.33 T
(elements have key) 272.4 276.33 T
5 F
( k) 346.27 276.33 T
7 F
(.) 358.27 276.33 T
(expected logarith-) 452.4 312.33 T
(mic) 452.4 300.33 T
6 12 Q
(T) 106.78 712 T
(able 1: Base r) 113.68 712 T
(equir) 183.13 712 T
(ements for associative container \050in addition to container\051) 210.25 712 T
7 10 Q
(expression) 101.01 681.33 T
(return type) 197.8 681.33 T
(assertion/note) 328.62 687.33 T
(pre/post-condition) 319.73 675.33 T
(complexity) 470.7 681.33 T
72 701.75 72 250.25 2 L
V
0.5 H
0 Z
N
172.8 702.25 172.8 249.75 2 L
V
N
266.4 702.25 266.4 249.75 2 L
V
N
446.4 702.25 446.4 249.75 2 L
V
N
540 701.75 540 250.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
71.75 666 172.55 666 2 L
V
N
173.05 667.25 539.75 667.25 2 L
V
N
173.05 664.75 539.75 664.75 2 L
V
N
71.75 634 540.25 634 2 L
V
N
71.75 530 540.25 530 2 L
V
N
71.75 486 540.25 486 2 L
V
N
71.75 466 540.25 466 2 L
V
N
71.75 410 540.25 410 2 L
V
N
71.75 366 540.25 366 2 L
V
N
71.75 325 540.25 325 2 L
V
N
71.75 250 540.25 250 2 L
V
N
52 133 54 238 R
V
52 650 54 660 R
V
52 606 54 628 R
V
52 558 54 580 R
V
52 493 54 524 R
V
52 470 54 480 R
V
52 438 54 460 R
V
52 394 54 404 R
V
52 329 54 360 R
V
52 285 54 319 R
V
52 309 54 319 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 5
%%Page: "4" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(4) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(2.1 Sorted Associative Containers) 72 711.98 T
3 10 Q
(The additional requirements for sorted associative containers are given in the following table:) 72 694.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 12 Q
(T) 88.33 671.57 T
(able 2: Sorted associative container r) 95.23 671.57 T
(equir) 283.99 671.57 T
(ements \050in addition to base r) 311.11 671.57 T
(equir) 456.56 671.57 T
(ements\051) 483.68 671.57 T
7 10 Q
(expression) 101.01 640.91 T
(return type) 197.8 640.91 T
(assertion/note) 328.62 646.91 T
(pre/post-condition) 319.73 634.91 T
(complexity) 470.7 640.91 T
5 9 Q
(X::key_compare) 78 613.57 T
(Compare) 178.8 613.57 T
7 10 Q
(defaults to) 272.4 612.91 T
5 9 Q
(less<key_type>.) 316.84 612.91 T
7 10 Q
(compile time) 452.4 612.91 T
5 9 Q
(X::value_compare) 78 593.57 T
7 10 Q
(a binary predicate) 178.8 592.91 T
(type) 178.8 580.91 T
-0.18 (is the same as) 272.4 592.91 P
5 9 Q
-0.4 (key_compare) 329.43 592.91 P
7 10 Q
-0.18 ( for) 388.83 592.91 P
5 9 Q
-0.4 (set) 405.13 592.91 P
7 10 Q
-0.18 ( and) 421.33 592.91 P
5 9 Q
(multiset) 272.4 580.91 T
7 10 Q
(;) 315.6 580.91 T
-0.46 (is an ordering relation on pairs induced by) 272.4 568.91 P
-0.2 (the \336rst component \050i.e.) 272.4 556.91 P
5 9 Q
-0.43 (Key) 369.37 556.91 P
7 10 Q
-0.2 (\051 for) 385.57 556.91 P
5 9 Q
-0.43 (map) 405.16 556.91 P
7 10 Q
-0.2 ( and) 421.36 556.91 P
5 9 Q
(multimap.) 272.4 544.91 T
7 10 Q
(compile time) 452.4 592.91 T
5 9 Q
(X\050c\051) 78 525.57 T
(X a\050c\051;) 78 514.57 T
7 10 Q
(constructs an empty container;) 272.4 524.91 T
(uses) 272.4 512.91 T
5 9 Q
(c) 292.12 512.91 T
7 10 Q
( as a comparison object.) 297.52 512.91 T
(constant) 452.4 524.91 T
5 9 Q
(X\050\051) 78 493.57 T
(X a;) 78 482.57 T
7 10 Q
(constructs an empty container;) 272.4 492.91 T
(uses) 272.4 480.91 T
5 9 Q
(Compare\050\051) 292.12 480.91 T
7 10 Q
( as a comparison object.) 340.72 480.91 T
(constant) 452.4 492.91 T
5 9 Q
(X\050i, j, c\051) 78 461.57 T
(X a\050i, j, c\051;) 78 450.57 T
7 10 Q
(constructs an empty container and inserts) 272.4 460.91 T
(elements from the range) 272.4 448.91 T
5 9 Q
([i, j\051) 371.82 448.91 T
7 10 Q
( into it;) 404.22 448.91 T
(uses) 272.4 436.91 T
5 9 Q
(c) 292.12 436.91 T
7 10 Q
( as a comparison object.) 297.52 436.91 T
(expected) 452.4 460.91 T
5 9 Q
(O\050NlogN\051) 452.4 448.91 T
7 10 Q
( in gen-) 495.6 448.91 T
(eral \050) 452.4 436.91 T
5 9 Q
(N) 473.22 436.91 T
7 10 Q
( is the dis-) 478.62 436.91 T
(tance from) 452.4 424.91 T
5 9 Q
(i) 497.94 424.91 T
7 10 Q
( to) 503.34 424.91 T
5 9 Q
(j) 516.12 424.91 T
7 10 Q
(\051;) 521.52 424.91 T
(expected) 452.4 412.91 T
5 9 Q
(O\050N\051) 490.44 412.91 T
7 10 Q
( if) 512.04 412.91 T
5 9 Q
([i, j\051) 452.4 400.91 T
7 10 Q
( is sorted) 484.8 400.91 T
(with) 452.4 388.91 T
5 9 Q
(value_comp\050\051) 452.4 376.91 T
(X\050i, j\051) 78 357.57 T
(X a\050i, j\051;) 78 346.57 T
7 10 Q
(same as above, but uses) 272.4 356.91 T
5 9 Q
(Compare\050\051) 370.16 356.91 T
7 10 Q
( as a) 418.76 356.91 T
(comparison object.) 272.4 344.91 T
(same as above) 452.4 356.91 T
5 9 Q
(a.key_comp\050\051) 78 325.57 T
(X::key_compare) 178.8 325.57 T
7 10 Q
(returns the comparison object out of) 272.4 324.91 T
(which) 272.4 312.91 T
5 9 Q
(a) 299.34 312.91 T
7 10 Q
( was constructed.) 304.74 312.91 T
(constant) 452.4 324.91 T
5 9 Q
(a.value_comp\050\051) 78 293.57 T
(X::value_compar) 178.8 293.57 T
(e) 178.8 282.57 T
7 10 Q
(returns an object of) 272.4 292.91 T
5 9 Q
(value_compare) 352.38 292.91 T
7 10 Q
(constructed out of the comparison object.) 272.4 280.91 T
(constant) 452.4 292.91 T
5 9 Q
(a.insert\050p, t\051) 78 261.57 T
(iterator) 178.8 261.57 T
7 10 Q
-0.13 (inserts) 272.4 260.91 P
5 9 Q
-0.27 (t) 300.88 260.91 P
7 10 Q
-0.13 ( if and only if there is no element) 306.28 260.91 P
(with key equal to the key of) 272.4 248.91 T
5 9 Q
(t) 386.55 248.91 T
7 10 Q
( in contain-) 391.95 248.91 T
(ers with unique keys; always inserts) 272.4 236.91 T
5 9 Q
(t) 419.05 236.91 T
7 10 Q
( in) 424.45 236.91 T
(containers with equal keys.) 272.4 224.91 T
(always returns the iterator pointing to the) 272.4 212.91 T
(element with key equal to the key of) 272.4 200.91 T
5 9 Q
(t) 420.71 200.91 T
7 10 Q
(.) 426.11 200.91 T
(iterator) 272.4 188.91 T
5 9 Q
(p) 303.78 188.91 T
7 10 Q
( is a hint pointing to where the) 309.18 188.91 T
(insert should start to search.) 272.4 176.91 T
(expected logarith-) 452.4 260.91 T
(mic in general, but) 452.4 248.91 T
(expected constant) 452.4 236.91 T
(if) 452.4 224.91 T
5 9 Q
(t) 461.01 224.91 T
7 10 Q
( is inserted right) 466.41 224.91 T
(after) 452.4 212.91 T
5 9 Q
(p) 473.22 212.91 T
7 10 Q
(.) 478.62 212.91 T
5 9 Q
(a.lower_bound\050k\051) 78 157.57 T
(iterator;) 178.8 157.57 T
(const_iterator) 178.8 145.91 T
7 10 Q
(for constant) 178.8 133.91 T
5 9 Q
(a) 228.79 133.91 T
7 10 Q
-0.3 (returns an iterator) 272.4 156.91 P
5 9 Q
-0.64 (i) 345.1 156.91 P
7 10 Q
-0.3 ( such that all elements) 350.5 156.91 P
-0.12 (with keys equal to or greater than) 272.4 144.91 P
5 9 Q
-0.27 (k) 407.89 144.91 P
7 10 Q
-0.12 ( are in) 413.29 144.91 P
(the range) 272.4 132.91 T
5 9 Q
([i, a.end\050\051\051) 311.83 132.91 T
7 10 Q
(.) 376.63 132.91 T
(expected logarith-) 452.4 156.91 T
(mic) 452.4 144.91 T
5 9 Q
(a.upper_bound\050k\051) 78 113.57 T
7 10 Q
(iterator;) 178.8 112.91 T
5 9 Q
(const_iterator) 178.8 100.91 T
7 10 Q
(for constant) 178.8 88.91 T
5 9 Q
(a) 228.79 88.91 T
7 10 Q
-0.3 (returns an iterator) 272.4 112.91 P
5 9 Q
-0.64 (j) 345.1 112.91 P
7 10 Q
-0.3 ( such that all elements) 350.5 112.91 P
(with keys greater than) 272.4 100.91 T
5 9 Q
(k) 363.49 100.91 T
7 10 Q
( are in the range) 368.89 100.91 T
5 9 Q
([j, a.end\050\051\051) 272.4 88.91 T
7 10 Q
(.) 337.2 88.91 T
(expected logarith-) 452.4 112.91 T
(mic) 452.4 100.91 T
72 661.32 72 81.82 2 L
V
0.5 H
0 Z
N
172.8 661.82 172.8 81.32 2 L
V
N
266.4 661.82 266.4 81.32 2 L
V
N
446.4 661.82 446.4 81.32 2 L
V
N
540 661.32 540 81.82 2 L
V
N
71.75 661.57 540.25 661.57 2 L
V
N
72.25 626.82 539.75 626.82 2 L
V
N
72.25 624.32 539.75 624.32 2 L
V
N
71.75 605.57 540.25 605.57 2 L
V
N
71.75 537.57 540.25 537.57 2 L
V
N
71.75 505.57 540.25 505.57 2 L
V
N
71.75 473.57 540.25 473.57 2 L
V
N
71.75 369.57 540.25 369.57 2 L
V
N
71.75 337.57 540.25 337.57 2 L
V
N
71.75 305.57 540.25 305.57 2 L
V
N
71.75 273.57 540.25 273.57 2 L
V
N
71.75 169.57 540.25 169.57 2 L
V
N
71.75 125.57 540.25 125.57 2 L
V
N
71.75 81.57 540.25 81.57 2 L
V
N
52 445.57 54 467.57 R
V
52 409.57 54 431.57 R
V
52 257.57 54 267.57 R
V
52 233.57 54 243.57 R
V
52 129.57 54 163.57 R
V
52 153.57 54 163.57 R
V
52 85.57 54 119.57 R
V
52 109.57 54 119.57 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 6
%%Page: "5" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(5) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
1.64 (The fundamental property of iterators of sorted associative containers is that they iterate through the) 72 603.33 P
0.28 (containers in the non-descending order of keys, where non-descending is defined by the comparison that) 72 591.33 P
-0.05 (was used to construct them. For any two dereferenceable iterators) 72 579.33 P
5 9 Q
-0.11 (i) 365.08 579.33 P
3 10 Q
-0.05 ( and) 370.48 579.33 P
5 9 Q
-0.11 (j) 392.32 579.33 P
3 10 Q
-0.05 ( such that distance from) 397.72 579.33 P
5 9 Q
-0.11 (i) 505.98 579.33 P
3 10 Q
-0.05 ( to) 511.38 579.33 P
5 9 Q
-0.11 (j) 525 579.33 P
3 10 Q
-0.05 ( is) 530.4 579.33 P
(positive,) 72 567.33 T
5 9 Q
(value_comp\050*j, *i\051 == false) 108 545 T
3 10 Q
(For sorted associative containers with unique keys the stronger condition holds,) 72 526.33 T
5 9 Q
(value_comp\050*i, *j\051 == true.) 108 504 T
8 10 Q
(2.1.1 Set) 72 483.71 T
5 9 Q
1.11 (set) 72 466.85 P
3 10 Q
0.52 ( is a kind of sorted associative container that supports unique keys \050contains at most one of each key) 88.2 466.85 P
(value\051 and provides for fast retrieval of the keys themselves.) 72 454.85 T
5 9 Q
(template <class Key, class Compare = less<Key>,) 108 432.52 T
(template <class U> class Allocator = allocator>) 180 421.52 T
(class set {) 108 410.52 T
(public:) 108 399.52 T
(// typedefs:) 108 377.52 T
(typedef Key key_type;) 144 355.52 T
(typedef Key value_type;) 144 344.52 T
(typedef Allocator<Key>::pointer pointer;) 144 333.52 T
(typedef Allocator<Key>::reference reference;) 144 322.52 T
(typedef Allocator<Key>::const_reference const_reference;) 144 311.52 T
(typedef Compare key_compare;) 144 300.52 T
(typedef Compare value_compare;) 144 289.52 T
(typedef iterator;) 144 278.52 T
(typedef iterator const_iterator;) 144 267.52 T
(typedef size_type;) 144 256.52 T
(typedef difference_type;) 144 245.52 T
(typedef reverse_iterator;) 144 234.52 T
(typedef const_reverse_iterator;) 144 223.52 T
(// allocation/deallocation:) 108 201.52 T
(set\050const Compare& comp = Compare\050\051\051;) 144 179.52 T
(template <class InputIterator>) 144 168.52 T
(set\050InputIterator first, InputIterator last,) 144 157.52 T
(const Compare& comp = Compare\050\051\051;) 180 146.52 T
(set\050const set<Key, Compare, Allocator>& x\051;) 144 135.52 T
(~set\050\051;) 144 124.52 T
(set<Key, Compare, Allocator>& operator=\050const set<Key, Compare,) 144 113.52 T
(Allocator>& x\051;) 180 102.52 T
(void swap\050set<Key, Compare, Allocator>& x\051;) 144 91.52 T
(a.equal_range\050k\051) 78 654 T
7 10 Q
(same as base) 178.8 653.33 T
(requirements) 178.8 641.33 T
(equivalent to) 272.4 653.33 T
5 9 Q
(make_pair\050a.lower_bound\050k\051,) 272.4 641.33 T
(a.upper_bound\050k\051\051.) 272.4 629.33 T
7 10 Q
(expected logarith-) 452.4 653.33 T
(mic) 452.4 641.33 T
6 12 Q
(T) 88.33 712 T
(able 2: Sorted associative container r) 95.23 712 T
(equir) 283.99 712 T
(ements \050in addition to base r) 311.11 712 T
(equir) 456.56 712 T
(ements\051) 483.68 712 T
7 10 Q
(expression) 101.01 681.33 T
(return type) 197.8 681.33 T
(assertion/note) 328.62 687.33 T
(pre/post-condition) 319.73 675.33 T
(complexity) 470.7 681.33 T
72 701.75 72 622.25 2 L
V
0.5 H
0 Z
N
172.8 702.25 172.8 621.75 2 L
V
N
266.4 702.25 266.4 621.75 2 L
V
N
446.4 702.25 446.4 621.75 2 L
V
N
540 701.75 540 622.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 622 540.25 622 2 L
V
N
52 650 54 660 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 7
%%Page: "6" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(6) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(// accessors:) 108 714 T
(key_compare key_comp\050\051 const;) 144 692 T
(value_compare value_comp\050\051 const;) 144 681 T
(iterator begin\050\051 const;) 144 670 T
(iterator end\050\051 const;) 144 659 T
(reverse_iterator rbegin\050\051;) 144 648 T
(reverse_iterator rend\050\051;) 144 637 T
(bool empty\050\051 const;) 144 626 T
(size_type size\050\051 const;) 144 615 T
(size_type max_size\050\051 const;) 144 604 T
(// insert/erase:) 108 582 T
(pair<iterator, bool> insert\050const value_type& x\051;) 144 560 T
(iterator insert\050iterator position, const value_type& x\051;) 144 549 T
(template <class InputIterator>) 144 538 T
(void insert\050InputIterator first, InputIterator last\051;) 144 527 T
(void erase\050iterator position\051;) 144 516 T
(size_type erase\050const key_type& x\051;) 144 505 T
(void erase\050iterator first, iterator last\051;) 144 494 T
(// set operations:) 108 472 T
(iterator find\050const key_type& x\051 const;) 144 450 T
(size_type count\050const key_type& x\051 const;) 144 439 T
(iterator lower_bound\050const key_type& x\051 const;) 144 428 T
(iterator upper_bound\050const key_type& x\051 const;) 144 417 T
(pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 144 406 T
(};) 108 395 T
(template <class Key, class Compare, class Allocator>) 108 373 T
(bool operator==\050const set<Key, Compare, Allocator>& x,) 108 362 T
(const set<Key, Compare, Allocator>& y\051;) 180 351 T
(template <class Key, class Compare, class Allocator>) 108 329 T
(bool operator<\050const set<Key, Compare, Allocator>& x,) 108 318 T
(const set<Key, Compare, Allocator>& y\051;) 180 307 T
8.23 (iterator) 72 288.33 P
3 10 Q
3.81 ( is a constant bidirectional iterator referring to) 115.2 288.33 P
5 9 Q
8.23 (const value_type) 351.48 288.33 P
3 10 Q
3.81 (. The exact type is) 446.1 288.33 P
(implementation dependent and determined by) 72 276.33 T
5 9 Q
(Allocator.) 281.98 276.33 T
(const_iterator) 72 257.33 T
3 10 Q
( is the same type as) 147.6 257.33 T
5 9 Q
(iterator) 235.34 257.33 T
3 10 Q
(.) 278.54 257.33 T
5 9 Q
0.8 (size_type) 72 238.33 P
3 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 238.33 P
5 9 Q
(Allocator) 72 226.33 T
3 10 Q
(.) 120.6 226.33 T
5 9 Q
0.67 (difference_type) 72 207.33 P
3 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 207.33 P
(by) 72 195.33 T
5 9 Q
(Allocator) 85.59 195.33 T
3 10 Q
(.) 134.19 195.33 T
8 F
(2.1.2 Multiset) 72 174.71 T
5 9 Q
2.39 (multiset) 72 157.85 P
3 10 Q
1.11 ( is a kind of sorted associative container that supports equal keys \050possibly contains multiple) 115.2 157.85 P
(copies of the same key value\051 and provides for fast retrieval of the keys themselves.) 72 145.85 T
5 9 Q
(template <class Key, class Compare = less<Key>,) 108 123.52 T
(template <class U> class Allocator = allocator>) 180 112.52 T
(class multiset {) 108 101.52 T
(public:) 108 90.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 8
%%Page: "7" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(7) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(// typedefs:) 108 714 T
(typedef Key key_type;) 144 692 T
(typedef Key value_type;) 144 681 T
(typedef Allocator<Key>::pointer pointer;) 144 670 T
(typedef Allocator<Key>::reference reference;) 144 659 T
(typedef Allocator<Key>::const_reference const_reference;) 144 648 T
(typedef Compare key_compare;) 144 637 T
(typedef Compare value_compare;) 144 626 T
(typedef iterator;) 144 615 T
(typedef iterator const_iterator;) 144 604 T
(typedef size_type;) 144 593 T
(typedef difference_type;) 144 582 T
(typedef reverse_iterator;) 144 571 T
(typedef const_reverse_iterator;) 144 560 T
(// allocation/deallocation:) 108 538 T
(multiset\050const Compare& comp = Compare\050\051\051;) 144 516 T
(template <class InputIterator>) 144 505 T
(multiset\050InputIterator first, InputIterator last,) 144 494 T
(const Compare& comp = Compare\050\051\051;) 180 483 T
(multiset\050const multiset<Key, Compare, Allocator>& x\051;) 144 472 T
(~multiset\050\051;) 144 461 T
-0.6 (multiset<Key, Compare, Allocator>& operator=\050const multiset<Key, Compare,) 144 450 P
(Allocator>& x\051;) 180 439 T
(void swap\050multiset<Key, Compare, Allocator>& x\051;) 144 428 T
(// accessors:) 108 406 T
(key_compare key_comp\050\051 const;) 144 384 T
(value_compare value_comp\050\051 const;) 144 373 T
(iterator begin\050\051 const;) 144 362 T
(iterator end\050\051 const;) 144 351 T
(reverse_iterator rbegin\050\051;) 144 340 T
(reverse_iterator rend\050\051;) 144 329 T
(bool empty\050\051 const;) 144 318 T
(size_type size\050\051 const;) 144 307 T
(size_type max_size\050\051 const;) 144 296 T
(// insert/erase:) 108 274 T
(iterator insert\050const value_type& x\051;) 144 252 T
(iterator insert\050iterator position, const value_type& x\051;) 144 241 T
(template <class InputIterator>) 144 230 T
(void insert\050InputIterator first, InputIterator last\051;) 144 219 T
(void erase\050iterator position\051;) 144 208 T
(size_type erase\050const key_type& x\051;) 144 197 T
(void erase\050iterator first, iterator last\051;) 144 186 T
(// multiset operations:) 108 164 T
(iterator find\050const key_type& x\051 const;) 144 142 T
(size_type count\050const key_type& x\051 const;) 144 131 T
(iterator lower_bound\050const key_type& x\051 const;) 144 120 T
(iterator upper_bound\050const key_type& x\051 const;) 144 109 T
(pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 144 98 T
(};) 108 87 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 9
%%Page: "8" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(8) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(template <class Key, class Compare, class Allocator>) 108 714 T
(bool operator==\050const multiset<Key, Compare, Allocator>& x,) 108 703 T
(const multiset<Key, Compare, Allocator>& y\051;) 180 692 T
(template <class Key, class Compare, class Allocator>) 108 670 T
(bool operator<\050const multiset<Key, Compare, Allocator>& x,) 108 659 T
(const multiset<Key, Compare, Allocator>& y\051;) 180 648 T
8.23 (iterator) 72 629.33 P
3 10 Q
3.81 ( is a constant bidirectional iterator referring to) 115.2 629.33 P
5 9 Q
8.23 (const value_type) 351.48 629.33 P
3 10 Q
3.81 (. The exact type is) 446.1 629.33 P
(implementation dependent and determined by) 72 617.33 T
5 9 Q
(Allocator.) 281.98 617.33 T
(const_iterator) 72 598.33 T
3 10 Q
( is the same type as) 147.6 598.33 T
5 9 Q
(iterator) 235.34 598.33 T
3 10 Q
(.) 278.54 598.33 T
5 9 Q
0.8 (size_type) 72 579.33 P
3 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 579.33 P
5 9 Q
(Allocator) 72 567.33 T
3 10 Q
(.) 120.6 567.33 T
5 9 Q
0.67 (difference_type) 72 548.33 P
3 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 548.33 P
(by) 72 536.33 T
5 9 Q
(Allocator) 85.59 536.33 T
3 10 Q
(.) 134.19 536.33 T
8 F
(2.1.3 Map) 72 515.71 T
5 9 Q
1.11 (map) 72 498.85 P
3 10 Q
0.52 ( is a kind of sorted associative container that supports unique keys \050contains at most one of each key) 88.2 498.85 P
(value\051 and provides for fast retrieval of values of another type) 72 486.85 T
5 9 Q
(T) 348.96 486.85 T
3 10 Q
( based on the keys.) 354.36 486.85 T
5 9 Q
(template <class Key, class T, class Compare = less<Key>,) 108 464.52 T
(template <class U> class Allocator = allocator>) 180 453.52 T
(class map {) 108 442.52 T
(public:) 108 431.52 T
(// typedefs:) 108 409.52 T
(typedef Key key_type;) 144 387.52 T
(typedef pair<const Key, T> value_type;) 144 376.52 T
(typedef Compare key_compare;) 144 365.52 T
(class value_compare) 144 354.52 T
(: public binary_function<) 180 343.52 T
(value_type, value_type, bool> {) 315 343.52 T
(friend class map;) 144 332.52 T
(protected:) 144 321.52 T
(Compare comp;) 180 310.52 T
(value_compare\050Compare c\051 : comp\050c\051 {}) 180 299.52 T
(public:) 144 288.52 T
(bool operator\050\051\050const value_type& x, const value_type& y\051 {) 180 277.52 T
(return comp\050x.first, y.first\051;) 216 266.52 T
(}) 180 255.52 T
(};) 144 244.52 T
(typedef iterator;) 144 233.52 T
(typedef const_iterator;) 144 222.52 T
(typedef Allocator<value_type>::pointer pointer;) 144 211.52 T
(typedef Allocator<value_type>::reference reference;) 144 200.52 T
(typedef Allocator<value_type>::const_reference const_reference;) 144 189.52 T
(typedef size_type;) 144 178.52 T
(typedef difference_type;) 144 167.52 T
(typedef reverse_iterator;) 144 156.52 T
(typedef const_reverse_iterator;) 144 145.52 T
(// allocation/deallocation:) 108 123.52 T
(map\050const Compare& comp = Compare\050\051\051;) 144 101.52 T
(template <class InputIterator>) 144 90.52 T
(map\050InputIterator first, InputIterator last,) 144 79.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 10
%%Page: "9" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(9) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(const Compare& comp = Compare\050\051\051;) 180 714 T
(map\050const map<Key, T, Compare, Allocator>& x\051;) 144 703 T
(~map\050\051;) 144 692 T
(map<Key, T, Compare, Allocator>&) 144 681 T
(operator=\050const map<Key, T, Compare, Allocator>& x\051;) 180 670 T
(void swap\050map<Key, T, Compare, Allocator>& x\051;) 144 659 T
(// accessors:) 108 637 T
(key_compare key_comp\050\051 const;) 144 615 T
(value_compare value_comp\050\051 const;) 144 604 T
(iterator begin\050\051;) 144 593 T
(const_iterator begin\050\051 const;) 144 582 T
(iterator end\050\051;) 144 571 T
(const_iterator end\050\051 const;) 144 560 T
(reverse_iterator rbegin\050\051;) 144 549 T
(reverse_iterator rend\050\051;) 144 538 T
(bool empty\050\051 const;) 144 527 T
(size_type size\050\051 const;) 144 516 T
(size_type max_size\050\051 const;) 144 505 T
(Allocator<T>::reference operator[]\050const key_type& x\051;) 144 494 T
(// insert/erase:) 108 472 T
(pair<iterator, bool> insert\050const value_type& x\051;) 144 450 T
(iterator insert\050iterator position, const value_type& x\051;) 144 439 T
(template <class InputIterator>) 144 428 T
(void insert\050InputIterator first, InputIterator last\051;) 144 417 T
(void erase\050iterator position\051;) 144 406 T
(size_type erase\050const key_type& x\051;) 144 395 T
(void erase\050iterator first, iterator last\051;) 144 384 T
(// map operations:) 108 362 T
(iterator find\050const key_type& x\051;) 144 340 T
(const_iterator find\050const key_type& x\051 const;) 144 329 T
(size_type count\050const key_type& x\051 const;) 144 318 T
(iterator lower_bound\050const key_type& x\051;) 144 307 T
(const_iterator lower_bound\050const key_type& x\051 const;) 144 296 T
(iterator upper_bound\050const key_type& x\051;) 144 285 T
(const_iterator upper_bound\050const key_type& x\051 const;) 144 274 T
(pair<iterator, iterator> equal_range\050const key_type& x\051;) 144 263 T
-0.72 (pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 144 252 P
(};) 108 241 T
(template <class Key, class T, class Compare, class Allocator>) 108 219 T
(bool operator==\050const map<Key, T, Compare, Allocator>& x,) 108 208 T
(const map<Key, T, Compare, Allocator>& y\051;) 180 197 T
(template <class Key, class T, class Compare, class Allocator>) 108 175 T
(bool operator<\050const map<Key, T, Compare, Allocator>& x,) 108 164 T
(const map<Key, T, Compare, Allocator>& y\051;) 180 153 T
0.5 (iterator) 72 134.33 P
3 10 Q
0.23 ( is a bidirectional iterator referring to) 115.2 134.33 P
5 9 Q
0.5 (value_type) 282.84 134.33 P
3 10 Q
0.23 (. The exact type is implementation dependent) 336.84 134.33 P
(and determined by) 72 122.33 T
5 9 Q
(Allocator.) 158.88 122.33 T
3.29 (const_iterator) 72 103.33 P
3 10 Q
1.52 ( is a constant bidirectional iterator referring to) 147.6 103.33 P
5 9 Q
3.29 (const value_type) 365.57 103.33 P
3 10 Q
1.52 (. The exact type is) 455.26 103.33 P
0.37 (implementation dependent and determined by) 72 91.33 P
5 9 Q
0.8 (Allocator) 283.83 91.33 P
3 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 91.33 P
5 9 Q
(const_iterator) 72 79.33 T
3 10 Q
( out of) 147.6 79.33 T
5 9 Q
(iterator) 178.64 79.33 T
3 10 Q
(.) 221.84 79.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 11
%%Page: "10" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(10) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
0.8 (size_type) 72 713.33 P
3 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 713.33 P
5 9 Q
(Allocator) 72 701.33 T
3 10 Q
(.) 120.6 701.33 T
5 9 Q
0.67 (difference_type) 72 682.33 P
3 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 682.33 P
(by) 72 670.33 T
5 9 Q
(Allocator) 85.59 670.33 T
3 10 Q
(.) 134.19 670.33 T
2.64 (In addition to the standard set of member functions of sorted associative containers,) 72 651.33 P
5 9 Q
5.71 (map) 479.54 651.33 P
3 10 Q
2.64 ( provides) 495.73 651.33 P
5 9 Q
1.3 (reference operator[]\050const key_type&\051) 72 639.33 P
3 10 Q
0.6 (. For a map) 274.41 639.33 P
5 9 Q
1.3 (m) 329.13 639.33 P
3 10 Q
0.6 ( and key) 334.53 639.33 P
5 9 Q
1.3 (k) 376.68 639.33 P
3 10 Q
0.6 (,) 382.08 639.33 P
5 9 Q
1.3 (m[k]) 387.69 639.33 P
3 10 Q
0.6 ( is semantically equivalent to) 409.29 639.33 P
5 9 Q
(\050*\050\050m.insert\050make_pair\050k, T\050\051\051\051\051.first\051\051.second) 72 627.33 T
3 10 Q
(.) 325.8 627.33 T
8 F
(2.1.4 Multimap) 72 606.71 T
5 9 Q
2.39 (multimap) 72 589.85 P
3 10 Q
1.11 ( is a kind of sorted associative container that supports equal keys \050possibly contains multiple) 115.2 589.85 P
(copies of the same key value\051 and provides for fast retrieval of values of another type) 72 577.85 T
5 9 Q
(T) 450.74 577.85 T
3 10 Q
( based on the keys.) 456.14 577.85 T
5 9 Q
(template <class Key, class T, class Compare = less<Key>,) 108 555.52 T
(template <class U> class Allocator = allocator>) 180 544.52 T
(class multimap {) 108 533.52 T
(public:) 108 522.52 T
(// typedefs:) 108 500.52 T
(typedef Key key_type;) 144 478.52 T
(typedef pair<const Key, T> value_type;) 144 467.52 T
(typedef Compare key_compare;) 144 456.52 T
(class value_compare) 144 445.52 T
(: public binary_function<) 180 434.52 T
(value_type, value_type, bool> {) 315 434.52 T
(friend class multimap;) 144 423.52 T
(protected:) 144 412.52 T
(Compare comp;) 180 401.52 T
(value_compare\050Compare c\051 : comp\050c\051 {}) 180 390.52 T
(public:) 144 379.52 T
(bool operator\050\051\050const value_type& x, const value_type& y\051 {) 180 368.52 T
(return comp\050x.first, y.first\051;) 216 357.52 T
(}) 180 346.52 T
(};) 144 335.52 T
(typedef iterator;) 144 324.52 T
(typedef const_iterator;) 144 313.52 T
(typedef Allocator<value_type>::pointer pointer;) 144 302.52 T
(typedef Allocator<value_type>::reference reference;) 144 291.52 T
(typedef Allocator<value_type>::const_reference const_reference;) 144 280.52 T
(typedef size_type;) 144 269.52 T
(typedef difference_type;) 144 258.52 T
(typedef reverse_iterator;) 144 247.52 T
(typedef const_reverse_iterator;) 144 236.52 T
(// allocation/deallocation:) 108 214.52 T
(multimap\050const Compare& comp = Compare\050\051\051;) 144 192.52 T
(template <class InputIterator>) 144 181.52 T
(multimap\050InputIterator first, InputIterator last,) 144 170.52 T
(const Compare& comp = Compare\050\051\051;) 180 159.52 T
(multimap\050const multimap<Key, T, Compare, Allocator>& x\051;) 144 148.52 T
(~multimap\050\051;) 144 137.52 T
(multimap<Key, T, Compare, Allocator>&) 144 126.52 T
(operator=\050const multimap<Key, T, Compare, Allocator>& x\051;) 180 115.52 T
(void swap\050multimap<Key, T, Compare, Allocator>& x\051;) 144 104.52 T
(// accessors:) 108 82.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 12
%%Page: "11" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(11) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(key_compare key_comp\050\051 const;) 144 703 T
(value_compare value_comp\050\051 const;) 144 692 T
(iterator begin\050\051;) 144 681 T
(const_iterator begin\050\051 const;) 144 670 T
(iterator end\050\051;) 144 659 T
(const_iterator end\050\051 const;) 144 648 T
(reverse_iterator rbegin\050\051;) 144 637 T
(reverse_iterator rend\050\051;) 144 626 T
(bool empty\050\051 const;) 144 615 T
(size_type size\050\051 const;) 144 604 T
(size_type max_size\050\051 const;) 144 593 T
(// insert/erase:) 108 571 T
(iterator insert\050const value_type& x\051;) 144 549 T
(iterator insert\050iterator position, const value_type& x\051;) 144 538 T
(template <class InputIterator>) 144 527 T
(void insert\050InputIterator first, InputIterator last\051;) 144 516 T
(void erase\050iterator position\051;) 144 505 T
(size_type erase\050const key_type& x\051;) 144 494 T
(void erase\050iterator first, iterator last\051;) 144 483 T
(// multimap operations:) 108 461 T
(iterator find\050const key_type& x\051;) 144 439 T
(const_iterator find\050const key_type& x\051 const;) 144 428 T
(size_type count\050const key_type& x\051 const;) 144 417 T
(iterator lower_bound\050const key_type& x\051;) 144 406 T
(const_iterator lower_bound\050const key_type& x\051 const;) 144 395 T
(iterator upper_bound\050const key_type& x\051;) 144 384 T
(const_iterator upper_bound\050const key_type& x\051 const;) 144 373 T
(pair<iterator, iterator> equal_range\050const key_type& x\051;) 144 362 T
-0.72 (pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 144 351 P
(};) 108 340 T
(template <class Key, class T, class Compare, class Allocator>) 108 318 T
(bool operator==\050const multimap<Key, T, Compare, Allocator>& x,) 108 307 T
(const multimap<Key, T, Compare, Allocator>& y\051;) 180 296 T
(template <class Key, class T, class Compare, class Allocator>) 108 274 T
(bool operator<\050const multimap<Key, T, Compare, Allocator>& x,) 108 263 T
(const multimap<Key, T, Compare, Allocator>& y\051;) 180 252 T
0.5 (iterator) 72 233.33 P
3 10 Q
0.23 ( is a bidirectional iterator referring to) 115.2 233.33 P
5 9 Q
0.5 (value_type) 282.84 233.33 P
3 10 Q
0.23 (. The exact type is implementation dependent) 336.84 233.33 P
(and determined by) 72 221.33 T
5 9 Q
(Allocator.) 158.88 221.33 T
0.74 (const_iterator) 72 202.33 P
3 10 Q
0.34 ( is the a constant bidirectional iterator referring to) 147.6 202.33 P
5 9 Q
0.74 (const value_type) 372.84 202.33 P
3 10 Q
0.34 (. The exact type is) 459.98 202.33 P
0.37 (implementation dependent and determined by) 72 190.33 P
5 9 Q
0.8 (Allocator) 283.83 190.33 P
3 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 190.33 P
5 9 Q
(const_iterator) 72 178.33 T
3 10 Q
( out of) 147.6 178.33 T
5 9 Q
(iterator) 178.64 178.33 T
3 10 Q
(.) 221.84 178.33 T
5 9 Q
0.8 (size_type) 72 159.33 P
3 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 159.33 P
5 9 Q
(Allocator) 72 147.33 T
3 10 Q
(.) 120.6 147.33 T
5 9 Q
0.67 (difference_type) 72 128.33 P
3 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 128.33 P
(by) 72 116.33 T
5 9 Q
(Allocator) 85.59 116.33 T
3 10 Q
(.) 134.19 116.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 13
%%Page: "12" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(12) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(2.2 Hash Tables) 72 711.98 T
3 10 Q
-0.18 (The following table gives the requirements beyond the base requirements of Table 1 for hashed associative) 72 694.91 P
1.07 (containers \050hash tables\051. In this table b is an integer of type size_type, and h is a hash function of type) 72 682.91 P
(X::hash_type.) 72 670.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 12 Q
(T) 85.99 647.57 T
(able 3: Hashed associative container r) 92.89 647.57 T
(equir) 286.33 647.57 T
(ements \050in addition to base r) 313.45 647.57 T
(equir) 458.9 647.57 T
(ements\051) 486.02 647.57 T
7 10 Q
(expression) 101.01 616.91 T
(return type) 197.8 616.91 T
(assertion/note) 328.62 622.91 T
(pre/post-condition) 319.73 610.91 T
(complexity) 470.7 616.91 T
5 9 Q
(X::key_equal) 78 589.57 T
(KeyEqual) 178.8 589.57 T
7 10 Q
(Type of the key equality function.  De-) 272.4 588.91 T
(faults to) 272.4 576.91 T
5 9 Q
(equal_to<key_type>) 310.9 576.91 T
7 10 Q
(.) 408.1 576.91 T
(compile time) 452.4 588.91 T
5 9 Q
(X::hasher) 78 557.57 T
(Hasher) 178.8 557.57 T
7 10 Q
(Type of the hash function.  Defaults to) 272.4 556.91 T
5 9 Q
(hash<Key>) 272.4 544.91 T
7 10 Q
(compile time) 452.4 556.91 T
5 9 Q
(X\050\051) 78 525.57 T
(X a;) 78 514.57 T
7 10 Q
(constructs an empty container;) 272.4 524.91 T
(uses HashFunction\050\051 as the hash function) 272.4 512.91 T
(and Key_Equal\050\051 as the key comparison;) 272.4 500.91 T
(builds at least 1000 buckets.) 272.4 488.91 T
(constant) 452.4 524.91 T
5 9 Q
(X\050b\051) 78 469.57 T
(X a\050b\051;) 78 458.57 T
7 10 Q
-0.79 (constructs an empty container using above) 272.4 468.91 P
-0.47 (defaults, except having space for) 272.4 456.91 P
5 F
-1.12 ( b) 401.88 456.91 P
7 F
-0.47 (buck-) 417.63 456.91 P
(ets.) 272.4 444.91 T
(constant) 452.4 468.91 T
5 9 Q
(X\050b, h\051) 78 425.57 T
(X a\050b, h\051;) 78 414.57 T
7 10 Q
(as above, but uses h as the hash function.) 272.4 424.91 T
(constant) 452.4 424.91 T
5 9 Q
(X\050b, h, c\051) 78 393.57 T
(X a\050b, h, c\051) 78 382.57 T
7 10 Q
(constructs an empty container;) 272.4 392.91 T
-0.71 (uses h as the hash function and c as the key) 272.4 380.91 P
(comparison) 272.4 368.91 T
(constant) 452.4 392.91 T
5 9 Q
(X\050i, j\051) 78 349.57 T
(X\050i, j, b\051) 78 338.57 T
(X\050i, j, b, h\051) 78 327.57 T
(X\050i, j, b, h, c\051) 78 316.57 T
(X a\050i,j\051;) 78 305.57 T
(X a\050i, j, b\051;) 78 294.57 T
(X a\050i, j, b, h\051;) 78 283.57 T
(X a\050i,j,b,h,c\051;) 78 272.57 T
7 10 Q
(constructs an empty container and inserts) 272.4 348.91 T
(elements from the range) 272.4 336.91 T
5 F
( [i,j\051) 369.32 336.91 T
7 F
(into it.) 411.32 336.91 T
(Uses) 272.4 324.91 T
5 F
( b, h, c) 291.84 324.91 T
7 F
(as described above, or) 345.84 324.91 T
(defaults) 272.4 312.91 T
(w) 307.39 312.91 T
(hen they are not provided.) 313.78 312.91 T
(expected) 452.4 348.91 T
5 9 Q
(O\050N\051) 490.44 348.91 T
7 10 Q
(,) 512.04 348.91 T
-0.81 (where) 452.4 336.91 P
5 9 Q
-1.74 (N) 478.52 336.91 P
7 10 Q
-0.81 ( the distance) 483.92 336.91 P
(from) 452.4 324.91 T
5 F
( i) 471.84 324.91 T
7 F
( to) 483.84 324.91 T
5 F
( j) 494.12 324.91 T
7 F
(.) 506.12 324.91 T
5 9 Q
(a::hash_funct\050\051) 78 253.57 T
(X::hasher) 178.8 253.57 T
7 10 Q
(returns the hashing function) 272.4 252.91 T
(compile time) 452.4 252.91 T
5 9 Q
(a::key_eq\050\051) 78 233.57 T
(X::key_equal) 178.8 233.57 T
7 10 Q
(returns the key comparison function) 272.4 232.91 T
(compile time) 452.4 232.91 T
5 9 Q
(a_uniq.insert\050t\051) 78 213.57 T
(pair<iterator,) 178.8 213.57 T
(bool>) 178.8 202.57 T
7 10 Q
(same as base requirements) 272.4 212.91 T
(expected constant) 452.4 212.91 T
5 9 Q
(a_eq.insert\050t\051) 78 183.57 T
(iterator) 178.8 183.57 T
7 10 Q
(same as base requirements) 272.4 182.91 T
(expected constant) 452.4 182.91 T
5 9 Q
(a.insert\050i,j\051) 78 163.57 T
7 10 Q
(result is not used) 178.8 162.91 T
(same as base requirements) 272.4 162.91 T
(expected) 452.4 162.91 T
5 9 Q
(O\050N\051) 490.44 162.91 T
7 10 Q
(,) 512.04 162.91 T
(where) 452.4 150.91 T
5 9 Q
(N) 479.33 150.91 T
7 10 Q
( is the dis-) 484.73 150.91 T
(tance from) 452.4 138.91 T
5 F
( i) 495.44 138.91 T
7 F
( to) 507.44 138.91 T
5 F
( j) 517.72 138.91 T
7 F
(.) 529.72 138.91 T
5 9 Q
(a.erase\050k\051) 78 119.57 T
(size_type) 178.8 119.57 T
7 10 Q
(same as base requirements) 272.4 118.91 T
(expected) 452.4 119.57 T
5 9 Q
(O\050count\050k\051\051) 452.4 108.57 T
72 637.32 72 101.82 2 L
V
0.5 H
0 Z
N
172.8 637.82 172.8 101.32 2 L
V
N
266.4 637.82 266.4 101.32 2 L
V
N
446.4 637.82 446.4 101.32 2 L
V
N
540 637.32 540 101.82 2 L
V
N
71.75 637.57 540.25 637.57 2 L
V
N
72.25 602.82 539.75 602.82 2 L
V
N
72.25 600.32 539.75 600.32 2 L
V
N
71.75 569.57 540.25 569.57 2 L
V
N
71.75 537.57 540.25 537.57 2 L
V
N
71.75 481.57 540.25 481.57 2 L
V
N
71.75 437.57 540.25 437.57 2 L
V
N
71.75 405.57 540.25 405.57 2 L
V
N
71.75 361.57 540.25 361.57 2 L
V
N
71.75 265.57 540.25 265.57 2 L
V
N
71.75 245.57 540.25 245.57 2 L
V
N
71.75 225.57 540.25 225.57 2 L
V
N
71.75 195.57 540.25 195.57 2 L
V
N
71.75 175.57 540.25 175.57 2 L
V
N
71.75 131.57 540.25 131.57 2 L
V
N
71.75 101.57 540.25 101.57 2 L
V
N
52 643.57 54 655.57 R
V
52 497.57 54 507.57 R
V
52 309.57 54 319.57 R
V
52 321.57 54 355.57 R
V
52 209.57 54 219.57 R
V
52 179.57 54 189.57 R
V
52 147.57 54 169.57 R
V
52 105.57 54 125.57 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 14
%%Page: "13" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(13) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
1.82 (For hash tables, iteration through the table presents the keys in no particular order; the actual order) 72 419.33 P
0.41 (depends on the order of insertion, the number of buckets, and on the hash function.  Table entries which) 72 407.33 P
1.72 (have equal keys will appear consecutively when iterating through the table.  Iterators and references) 72 395.33 P
-0.08 (remain valid after all operations, including) 72 383.33 P
5 9 Q
-0.18 (resize) 263.45 383.33 P
3 10 Q
-0.08 (, but ranges such as the result of) 295.85 383.33 P
5 9 Q
-0.18 ( equal_range) 437.07 383.33 P
3 10 Q
-0.08 (may no) 506.91 383.33 P
(longer be valid.) 72 371.33 T
0.23 (The bucket parameters to the constructors and the resize operation guide the implementation in selecting) 72 352.33 P
-0.46 (the actual number of buckets being used. An implementation is free to choose more. The number of buckets) 72 340.33 P
-0.03 (in use for a table may change any time elements are inserted or deleted from the table. The resize\050buckets\051) 72 328.33 P
0.11 (member function can be issued to change the bucket count at a time when the program can accommodate) 72 316.33 P
(the overhead of table restructuring.) 72 304.33 T
1.18 (The hash function is expected to accept a single parameter, the key, and return a number in the range) 72 285.33 P
1.67 (defined by) 72 273.33 P
2 8 Q
1.49 ( size_type) 121.12 273.33 P
3 10 Q
1.67 (. The ability of the implementation to achieve expected constant time performance) 158.62 273.33 P
(depends on the ability of the hashing function to hash key values evenly across a large range of integers.) 72 261.33 T
8 F
(2.2.1 Hash Function) 72 240.71 T
3 F
-0.51 (Each implementation will provide a default hash function, a subclass of) 72 223.85 P
5 9 Q
-1.1 ( unary_function<T, size_type>) 383.11 223.85 P
3 10 Q
-0.51 (,) 537.5 223.85 P
(where T is the key type.) 72 211.85 T
5 9 Q
(template <class T> class hash: unary_function<T, size_type>{) 108 189.52 T
(size_type operator\050\051 \050const T & key\051;) 144 178.52 T
(};) 108 167.52 T
3 10 Q
(This shall be defined at least for the numeric types and) 72 148.85 T
5 9 Q
(string) 316.29 148.85 T
3 10 Q
(.) 348.69 148.85 T
8 F
(2.2.2 Hash_set) 72 128.23 T
3 F
0.79 (hash_set is a kind of hash table that supports unique keys \050contains at most one of each key value\051 and) 72 111.37 P
(provides for fast retrieval of the keys themselves.) 72 99.37 T
5 9 Q
(a.erase\050q1, q2\051) 78 654 T
7 10 Q
(result is not used) 178.8 653.33 T
-0.69 (erases all the elements in the range) 272.4 653.33 P
5 F
-1.65 ( [q1,) 407.69 653.33 P
(q2\051) 272.4 641.33 T
7 F
(expected) 452.4 653.33 T
5 9 Q
( O\050N\051 \050N) 487.94 653.33 T
7 10 Q
-0.56 (is the distance from) 452.4 641.33 P
5 F
(q1) 452.4 629.33 T
7 F
(to) 470.4 629.33 T
5 F
( q2) 478.18 629.33 T
7 F
(\051.) 496.18 629.33 T
5 9 Q
(a.f) 78 610 T
(ind\050k\051) 94.2 610 T
7 10 Q
(as in base require-) 178.8 609.33 T
(ments) 178.8 597.33 T
(as in base requirements) 272.4 609.33 T
(expected constant) 452.4 609.33 T
5 9 Q
(a.equal_range\050k\051) 78 578 T
7 10 Q
(as inbase require-) 178.8 577.33 T
(ments) 178.8 565.33 T
(as in base requirements) 272.4 577.33 T
(expected) 452.4 577.33 T
5 9 Q
(O\050N\051) 490.44 577.33 T
7 10 Q
(,) 512.04 577.33 T
(where) 452.4 565.33 T
5 9 Q
(N) 479.33 565.33 T
7 10 Q
( is the num-) 484.73 565.33 T
-0.11 (ber of elements hav-) 452.4 553.33 P
(ing key) 452.4 541.33 T
5 F
( k) 482.12 541.33 T
7 F
(.) 494.12 541.33 T
5 9 Q
(a.count\050k\051) 78 522 T
(size_type) 178.8 522 T
7 10 Q
(returns the number of elements with key) 272.4 521.33 T
(equal to) 272.4 509.33 T
5 F
(k) 306.84 509.33 T
7 F
(.) 312.84 509.33 T
(expected) 452.4 522 T
5 9 Q
(O\050count\050k\051\051) 452.4 511 T
(bucket_count\050\051) 78 490 T
(size_type) 178.8 490 T
7 10 Q
(returns the current  number of hash buck-) 272.4 489.33 T
(ets) 272.4 477.33 T
(constant) 452.4 489.33 T
5 9 Q
(resize\050b\051) 78 458 T
7 10 Q
(result is not used) 178.8 457.33 T
(restructures the table to contain) 272.4 457.33 T
5 F
( b) 397.93 457.33 T
7 F
(buck-) 415.93 457.33 T
(ets.) 272.4 445.33 T
(linear) 452.4 457.33 T
6 12 Q
(T) 85.99 712 T
(able 3: Hashed associative container r) 92.89 712 T
(equir) 286.33 712 T
(ements \050in addition to base r) 313.45 712 T
(equir) 458.9 712 T
(ements\051) 486.02 712 T
7 10 Q
(expression) 101.01 681.33 T
(return type) 197.8 681.33 T
(assertion/note) 328.62 687.33 T
(pre/post-condition) 319.73 675.33 T
(complexity) 470.7 681.33 T
72 701.75 72 438.25 2 L
V
0.5 H
0 Z
N
172.8 702.25 172.8 437.75 2 L
V
N
266.4 702.25 266.4 437.75 2 L
V
N
446.4 702.25 446.4 437.75 2 L
V
N
540 701.75 540 438.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 622 540.25 622 2 L
V
N
71.75 590 540.25 590 2 L
V
N
71.75 534 540.25 534 2 L
V
N
71.75 502 540.25 502 2 L
V
N
71.75 470 540.25 470 2 L
V
N
71.75 438 540.25 438 2 L
V
N
52 404 54 414 R
V
52 258 54 280 R
V
52 626 54 660 R
V
52 606 54 616 R
V
52 562 54 584 R
V
52 508 54 528 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 15
%%Page: "14" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(14) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(template <class Key, class Hasher=hash<Key>, class KeyEqual = equal_to<Key>,) 108 714 T
(          template <class U> class Allocator = allocator>) 108 703 T
(class hash_set {) 108 692 T
(public:) 108 681 T
(// typedefs:) 108 659 T
(    typedef Key key_type;) 108 637 T
(    typedef Key value_type;) 108 626 T
(    typedef Hasher hasher;) 108 615 T
(    typedef KeyEqual key_equal;) 108 604 T
(    typedef pointer;) 108 582 T
(    typedef reference;) 108 571 T
(    typedef const_reference;) 108 560 T
(    typedef iterator;) 108 549 T
(    typedef iterator const_iterator;) 108 538 T
(    typedef size_type;) 108 527 T
(    typedef difference_type;) 108 516 T
(// allocation/deallocation) 108 494 T
(    hash_set\050size_type table_size = 1009,) 108 472 T
(const Hasher& hf = Hasher\050\051,) 180 461 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 180 450 T
(    template <class InputIterator>) 108 439 T
(    hash_set\050InputIterator first, InputIterator last,) 108 428 T
(size_type table_size = 1009,) 180 417 T
(const Hasher& hf = Hasher\050\051,) 180 406 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 180 395 T
(    ~hash_set\050\051;) 108 384 T
(// copying, assignment, swap) 108 362 T
(    hash_set\050const hash_set<Key, Hasher, KeyEqual, Allocator>& x\051;) 108 340 T
(    hash_set<Key, Hasher, KeyEqual, Allocator>&) 108 329 T
(       operator=\050const hash_set<Key, Hasher, KeyEqual, Allocator>& x\051;) 108 318 T
(    void swap\050hash_set<Key, Hasher, KeyEqual, Allocator>& x\051;) 108 307 T
(// accessors:) 108 285 T
(    key_equal key_eq\050\051 const;) 108 263 T
(    hasher hash_funct\050\051 const;) 108 252 T
(    iterator begin\050\051 const;) 108 241 T
(    iterator end\050\051 const;) 108 230 T
(    bool empty\050\051 const;) 108 219 T
(    size_type size\050\051 const;) 108 208 T
(    size_type max_size\050\051 const;) 108 197 T
(// insert/erase) 108 175 T
(    pair<iterator, bool> insert\050const value_type& x\051;) 108 153 T
(    template <class InputIterator>) 108 142 T
(    void insert\050InputIterator first, InputIterator last\051;) 108 131 T
(    void erase\050iterator position\051;) 108 120 T
(    size_type erase\050const key_type& x\051;) 108 109 T
(    void erase\050iterator first, iterator last\051;) 108 98 T
(// search operations:) 108 76 T
52 469 54 478 R
V
52 414 54 423 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 16
%%Page: "15" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(15) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(    iterator find\050const key_type& x\051 const;) 108 703 T
(    size_type count\050const key_type& x\051 const;) 108 692 T
(    pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 108 681 T
(// hash table size operations) 108 659 T
(    size_type bucket_count\050\051 const;) 108 637 T
(    void resize\050size_type buckets\051;) 108 626 T
(};) 108 615 T
(template <class Key, class Hasher, class KeyEqual, Allocator>) 108 593 T
(bool operator==\050const hash_set<Key, Hasher, KeyEqual, Allocator>& x,) 108 582 T
(const hash_set<Key, Hasher, KeyEqual, Allocator>& y\051;) 190.8 571 T
(iterator) 72 541.33 T
3 10 Q
( is a constant forward iterator referring to) 115.2 541.33 T
5 9 Q
( const value_type) 298.64 541.33 T
3 10 Q
(. The exact type is) 390.44 541.33 T
(implementation dependent and determined by) 72 529.33 T
5 9 Q
( Allocator) 279.48 529.33 T
3 10 Q
(.) 333.48 529.33 T
5 9 Q
(const_iterator) 72 510.33 T
3 10 Q
(is the same type as) 153 510.33 T
5 9 Q
( iterator) 235.74 510.33 T
3 10 Q
(.) 284.34 510.33 T
8 F
(2.2.3 Hash_multiset) 72 489.71 T
5 9 Q
1.05 (hash_multiset) 72 472.85 P
3 10 Q
0.49 ( is a kind of hash table that supports equal keys \050possibly contains multiple copies of the) 142.2 472.85 P
(same key value\051 and provides for fast retrieval of the keys themselves.) 72 460.85 T
5 9 Q
(template <class Key, class Hasher=hash<Key>, class KeyEqual = equal_to<Key>,) 108 438.52 T
(          template <class U> class Allocator = allocator>) 108 427.52 T
(class hash_multiset {) 108 416.52 T
(public:) 108 405.52 T
(// typedefs:) 108 383.52 T
(    typedef Key key_type;) 108 361.52 T
(    typedef Key value_type;) 108 350.52 T
(    typedef Hasher hasher;) 108 339.52 T
(    typedef KeyEqual key_equal;) 108 328.52 T
(    typedef pointer;) 108 306.52 T
(    typedef reference;) 108 295.52 T
(    typedef const_reference;) 108 284.52 T
(    typedef iterator;) 108 273.52 T
(    typedef iterator const_iterator;) 108 262.52 T
(    typedef size_type;) 108 251.52 T
(    typedef difference_type;) 108 240.52 T
(// allocation/deallocation) 108 218.52 T
(    hash_multiset\050size_type table_size = 1009,) 108 196.52 T
(const Hasher& hf = Hasher\050\051,) 216 185.52 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 216 174.52 T
(    template <class InputIterator>) 108 163.52 T
(    hash_multiset\050InputIterator first, InputIterator last,) 108 152.52 T
(size_type table_size = 1009,) 216 141.52 T
(const Hasher& hf = Hasher\050\051,) 216 130.52 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 216 119.52 T
(    ~hash_multiset\050\051;) 108 108.52 T
(// copying, assignment, swap) 108 86.52 T
52 193.52 54 202.52 R
V
52 138.52 54 147.52 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 17
%%Page: "16" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(16) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(    hash_multiset\050const hash_multiset<Key, Hasher, KeyEqual, Allocator>& x\051;) 108 714 T
(    hash_multiset<Key, Hasher, KeyEqual, Allocator>&) 108 703 T
(       operator=\050const hash_multiset<Key, Hasher, KeyEqual, Allocator>& x\051;) 108 692 T
(    void swap\050hash_multiset<Key, Hasher, KeyEqual, Allocator>& x\051;) 108 681 T
(// accessors:) 108 659 T
(    key_equal key_eq\050\051 const;) 108 637 T
(    hasher hash_funct\050\051 const;) 108 626 T
(    iterator begin\050\051 const;) 108 615 T
(    iterator end\050\051 const;) 108 604 T
(    bool empty\050\051 const;) 108 593 T
(    size_type size\050\051 const;) 108 582 T
(    size_type max_size\050\051 const;) 108 571 T
(// insert/erase) 108 549 T
(    iterator insert\050const value_type& x\051;) 108 527 T
(    template <class InputIterator>) 108 516 T
(    void insert\050InputIterator first, InputIterator last\051;) 108 505 T
(    void erase\050iterator position\051;) 108 494 T
(    size_type erase\050const key_type& x\051;) 108 483 T
(    void erase\050iterator first, iterator last\051;) 108 472 T
(// search operations:) 108 450 T
(    iterator find\050const key_type& x\051 const;) 108 428 T
(    size_type count\050const key_type& x\051 const;) 108 417 T
(    pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 108 406 T
(// hash table size operations) 108 384 T
(    size_type bucket_count\050\051 const;) 108 362 T
(    void resize\050size_type buckets\051;) 108 351 T
(};) 108 340 T
(template <class Key, class Hasher, class KeyEqual, Allocator>) 108 318 T
(bool operator==\050const hash_multiset<Key, Hasher, KeyEqual, Allocator>& x,) 108 307 T
(const hash_multiset<Key, Hasher, KeyEqual, Allocator>& y\051;) 190.8 296 T
-0.63 (iterator) 72 255.33 P
3 10 Q
-0.29 (is a constant forward iterator referring to) 119.97 255.33 P
5 9 Q
-0.63 ( const value_type) 299.16 255.33 P
3 10 Q
-0.29 (. The exact type is implementation) 389.7 255.33 P
(dependent and determined by) 72 243.33 T
5 9 Q
( Allocator) 206.38 243.33 T
3 10 Q
(.) 260.38 243.33 T
5 9 Q
(const_iterator) 72 224.33 T
3 10 Q
(is the same type as) 153 224.33 T
5 9 Q
( iterator) 235.74 224.33 T
3 10 Q
(.) 284.34 224.33 T
5 9 Q
-0.03 (size_type) 72 205.33 P
3 10 Q
-0.01 (is an unsigned integral type. The exact type is implementation dependent and determined by) 125.97 205.33 P
5 9 Q
(Allocator) 72 193.33 T
3 10 Q
(.) 120.6 193.33 T
5 9 Q
-0.19 (difference_type) 72 174.33 P
3 10 Q
-0.09 (is a signed integral type. The exact type is implementation dependent and determined) 158.21 174.33 P
(by) 72 162.33 T
5 9 Q
( Allocator) 83.09 162.33 T
3 10 Q
(.) 137.09 162.33 T
8 F
(2.2.4 Hash_map) 72 141.71 T
3 F
0.39 (hash_map is a kind of hash table that supports unique keys \050contains at most one of each key value\051 and) 72 124.85 P
(provides for fast retrieval of values of another type T based on the keys.) 72 112.85 T
5 9 Q
(template <class Key, class Hasher=hash<Key>, class KeyEqual = equal_to<Key>,) 108 90.52 T
(          template <class U> class Allocator = allocator>) 108 79.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 18
%%Page: "17" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(17) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(class hash_map {) 108 714 T
(public:) 108 703 T
(// typedefs:) 108 681 T
(    typedef Key key_type;) 108 659 T
(    typedef pair<const Key, T> value_type;) 108 648 T
(    typedef Hasher hasher;) 108 637 T
(    typedef KeyEqual key_equal;) 108 626 T
(    typedef pointer;) 108 604 T
(    typedef reference;) 108 593 T
(    typedef const_reference;) 108 582 T
(    typedef iterator;) 108 571 T
(    typedef const_iterator;) 108 560 T
(    typedef size_type;) 108 549 T
(    typedef difference_type;) 108 538 T
(// allocation/deallocation) 108 516 T
(    hash_map\050size_type table_size = 1009,) 108 494 T
(const Hasher& hf = Hasher\050\051,) 180 483 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 180 472 T
(    template <class InputIterator>) 108 461 T
(    hash_map\050InputIterator first, InputIterator last,) 108 450 T
(size_type table_size = 1009,) 180 439 T
(const Hasher& hf = Hasher\050\051\051;) 180 428 T
(    ~hash_map\050\051;) 108 417 T
(// copying, assignment, swap) 108 395 T
(    hash_map\050const hash_map<Key, T, Hasher, KeyEqual, Allocator>& x\051;) 108 373 T
(    hash_map<Key,T,Hasher,KeyEqual, Allocator>&) 108 362 T
(      operator=\050const hash_map<Key, T, Hasher, KeyEqual, Allocator>& x\051;) 108 351 T
(    void swap\050hash_map<Key, T, Hasher, KeyEqual, Allocator>& x\051;) 108 340 T
(// accessors:) 108 318 T
(    key_equal key_eq\050\051 const;) 108 296 T
(    hasher hash_funct\050\051 const;) 108 285 T
(    iterator begin\050\051;) 108 274 T
(    const_iterator begin\050\051 const;) 108 263 T
(    iterator end\050\051;) 108 252 T
(    const_iterator end\050\051 const;) 108 241 T
(    bool empty\050\051 const;) 108 230 T
(    size_type size\050\051 const;) 108 219 T
(    size_type max_size\050\051 const;) 108 208 T
(    Allocator<T>::reference operator[]\050const key_type& k\051;) 108 197 T
(// insert/erase) 108 175 T
(    pair<iterator, bool> insert\050const value_type& x\051;) 108 153 T
(    template <class InputIterator>) 108 142 T
(    void insert\050InputIterator first, InputIterator last\051;) 108 131 T
(    void erase\050iterator position\051;) 108 120 T
(    size_type erase\050const key_type& x\051;) 108 109 T
(    void erase\050iterator first, iterator last\051;) 108 98 T
(// search operations:) 108 76 T
52 491 54 500 R
V
52 436 54 445 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 19
%%Page: "18" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(18) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(    iterator find\050const key_type& x\051;) 108 703 T
(    const_iterator find\050const key_type& x\051 const;) 108 692 T
(    size_type count\050const key_type& x\051 const;) 108 681 T
(    pair<iterator, iterator> equal_range\050const key_type& x\051;) 108 670 T
(    pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 108 659 T
(// hash table size operations) 108 637 T
(    size_type bucket_count\050\051 const;) 108 615 T
(    void resize\050size_type buckets\051;) 108 604 T
(};) 108 593 T
(template <class Key, class T, class Hasher, class KeyEqual, Allocator>) 108 571 T
(bool operator==\050const hash_map<Key, T, Hasher, KeyEqual, Allocator>& x,) 108 560 T
(const hash_map<Key, T, Hasher, KeyEqual, Allocator>& y\051;) 190.8 549 T
-0.31 (iterator) 72 530.33 P
3 10 Q
-0.14 (is a forward iterator referring to) 120.29 530.33 P
5 9 Q
-0.31 ( value_type) 260.72 530.33 P
3 10 Q
-0.14 (. The exact type is implementation dependent and) 319.81 530.33 P
(determined by) 72 518.33 T
5 9 Q
( Allocator) 136.95 518.33 T
3 10 Q
(.) 190.95 518.33 T
5 9 Q
4.67 (const_iterator) 72 499.33 P
3 10 Q
2.16 (is a constant forward iterator referring to) 157.67 499.33 P
5 9 Q
4.67 ( const value_type) 351.57 499.33 P
3 10 Q
2.16 (. The exact type is) 452.7 499.33 P
-0.01 (implementation dependent and determined by) 72 487.33 P
5 9 Q
-0.03 ( Allocator) 279.42 487.33 P
3 10 Q
-0.01 (. It is guaranteed that there is a constructor for) 333.4 487.33 P
5 9 Q
(const_iterator) 72 475.33 T
3 10 Q
( out of) 147.6 475.33 T
5 9 Q
( iterator) 176.14 475.33 T
3 10 Q
(.) 224.74 475.33 T
5 9 Q
0.33 (size_type) 72 456.33 P
3 10 Q
0.15 (is an unsigned integral type. The exact type is implementation dependent and determined by) 126.33 456.33 P
5 9 Q
(Allocator) 72 444.33 T
3 10 Q
(.) 120.6 444.33 T
5 9 Q
0.17 (difference_type) 72 425.33 P
3 10 Q
0.08 (is a signed integral type. The exact type is implementation dependent and determined) 158.57 425.33 P
(by) 72 413.33 T
5 9 Q
( Allocator) 83.09 413.33 T
3 10 Q
(.) 137.09 413.33 T
(In addition to the standard set of member functions of hash tables,) 72 394.33 T
5 9 Q
( hash_map) 365.36 394.33 T
3 10 Q
(provides) 419.36 394.33 T
5 9 Q
3.28 (Allocator<T>::reference operator[]\050const key_type&\051) 72 382.33 P
3 10 Q
1.52 (. For a) 353.96 382.33 P
5 9 Q
3.28 (hash_map m) 388.48 382.33 P
3 10 Q
1.52 ( and key) 445.76 382.33 P
5 9 Q
3.28 ( k) 486.64 382.33 P
3 10 Q
1.52 (,) 500.71 382.33 P
5 9 Q
3.28 (m[k]) 507.23 382.33 P
3 10 Q
1.52 ( is) 528.83 382.33 P
(semantically equivalent to) 72 370.33 T
5 9 Q
(\050*\050\050m.insert\050make_pair\050k, T\050\051\051\051\051.first\051\051.second) 190.65 370.33 T
3 10 Q
(.) 444.45 370.33 T
8 F
(2.2.5 Hash_multimap) 72 349.71 T
5 9 Q
0.61 (hash_multimap) 72 332.85 P
3 10 Q
0.28 (is a kind of hash table that supports equal keys \050possibly contains multiple copies of the) 148.21 332.85 P
(same key value\051 and provides for fast retrieval of values of another type T based on the keys.) 72 320.85 T
5 9 Q
(template <class Key, class Hasher=hash<Key>, class KeyEqual = equal_to<Key>,) 108 298.52 T
(          template <class U> class Allocator = allocator>) 108 287.52 T
(class hash_multimap {) 108 276.52 T
(public:) 108 265.52 T
(// typedefs:) 108 243.52 T
(    typedef Key key_type;) 108 221.52 T
(    typedef pair<const Key, T> value_type;) 108 210.52 T
(    typedef Hasher hasher;) 108 199.52 T
(    typedef KeyEqual key_equal;) 108 188.52 T
(    typedef pointer;) 108 166.52 T
(    typedef reference;) 108 155.52 T
(    typedef const_reference;) 108 144.52 T
(    typedef iterator;) 108 133.52 T
(    typedef const_iterator;) 108 122.52 T
(    typedef size_type;) 108 111.52 T
(    typedef difference_type;) 108 100.52 T
(// allocation/deallocation) 108 78.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 20
%%Page: "19" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(19) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(    hash_multimap\050size_type table_size = 1009,) 108 703 T
(const Hasher& hf = Hasher\050\051,) 216 692 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 216 681 T
(    template <class InputIterator>) 108 670 T
(    hash_multimap\050InputIterator first, InputIterator last,) 108 659 T
(size_type table_size = 1009,) 216 648 T
(const Hasher& hf = Hasher\050\051,) 216 637 T
(const KeyEqual& equal = KeyEqual\050\051\051;) 216 626 T
(    ~hash_multimap\050\051;) 108 615 T
(// copying, assignment, swap) 108 593 T
(    hash_multimap\050const hash_multimap<Key, T, Hasher, KeyEqual, Allocator>& x\051;) 108 571 T
(    hash_multimap<Key, T, Hasher, KeyEqual, Allocator>&) 108 560 T
(      operator=\050const hash_multimap<Key, T, Hasher,KeyEqual, Allocator>& x\051;) 108 549 T
(    void swap\050hash_multimap<Key, T, Hasher, KeyEqual, Allocator>& x\051;) 108 538 T
(// accessors:) 108 516 T
(    key_equal key_eq\050\051 const;) 108 494 T
(    hasher hash_funct\050\051 const;) 108 483 T
(    iterator begin\050\051;) 108 472 T
(    const_iterator begin\050\051 const;) 108 461 T
(    iterator end\050\051;) 108 450 T
(    const_iterator end\050\051 const;) 108 439 T
(    bool empty\050\051 const;) 108 428 T
(    size_type size\050\051 const;) 108 417 T
(    size_type max_size\050\051 const;) 108 406 T
(// insert/erase) 108 384 T
(    iterator insert\050const value_type& x\051;) 108 362 T
(    template <class InputIterator>) 108 351 T
(    void insert\050InputIterator first, InputIterator last\051;) 108 340 T
(    void erase\050iterator position\051;) 108 329 T
(    size_type erase\050const key_type& x\051;) 108 318 T
(    void erase\050iterator first, iterator last\051;) 108 307 T
(// search operations:) 108 285 T
(    iterator find\050const key_type& x\051;) 108 263 T
(    const_iterator find\050const key_type& x\051 const;) 108 252 T
(    size_type count\050const key_type& x\051 const;) 108 241 T
(    pair<iterator, iterator> equal_range\050const key_type& x\051;) 108 230 T
(    pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 108 219 T
(// hash table size operations) 108 197 T
(    size_type bucket_count\050\051 const;) 108 175 T
(    void resize\050size_type size\051;) 108 164 T
(};) 108 153 T
(template <class Key, class T, class Hasher, class KeyEqual, Allocator>) 108 131 T
(bool operator==\050const hash_multimap<Key, T, Hasher, KeyEqual, Allocator>& x,) 108 120 T
(const hash_multimap<Key, T, Hasher, KeyEqual, Allocator>& y\051;) 190.8 109 T
52 700 54 709 R
V
52 645 54 654 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 21
%%Page: "20" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
3 10 Q
0 X
(20) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 9 Q
0 X
(iterator) 72 713.33 T
3 10 Q
( is a forward iterator referring to) 115.2 713.33 T
5 9 Q
( value_type) 258.84 713.33 T
3 10 Q
(. The exact type is implementation dependent) 318.24 713.33 T
(and determined by) 72 701.33 T
5 9 Q
( Allocator) 156.38 701.33 T
3 10 Q
(.) 210.38 701.33 T
5 9 Q
(const_iterator) 72 682.33 T
3 10 Q
(is the a constant forward iterator referring to) 153 682.33 T
5 9 Q
( const value_type) 350.31 682.33 T
3 10 Q
(. The exact type is) 442.11 682.33 T
-0.01 (implementation dependent and determined by) 72 670.33 P
5 9 Q
-0.03 ( Allocator) 279.42 670.33 P
3 10 Q
-0.01 (. It is guaranteed that there is a constructor for) 333.4 670.33 P
5 9 Q
(const_iterator) 72 658.33 T
3 10 Q
(out of) 153 658.33 T
5 9 Q
( iterator) 179.04 658.33 T
3 10 Q
(.) 227.64 658.33 T
5 9 Q
-0.03 (size_type) 72 639.33 P
3 10 Q
-0.01 (is an unsigned integral type. The exact type is implementation dependent and determined by) 125.97 639.33 P
5 9 Q
(Allocator) 72 627.33 T
3 10 Q
(.) 120.6 627.33 T
5 9 Q
-0.19 (difference_type) 72 608.33 P
3 10 Q
-0.09 (is a signed integral type. The exact type is implementation dependent and determined) 158.21 608.33 P
(by) 72 596.33 T
5 9 Q
( Allocator) 83.09 596.33 T
3 10 Q
(.) 137.09 596.33 T
0 12 Q
(3  Hash Table Implementations) 72 547.25 T
3 10 Q
2.82 (We have developed two separate reference hash table implementations that meet all of the above) 72 528.96 P
-0.09 (requirements. Both use the method of separate chaining, but with somewhat different ways of storing lists) 72 516.96 P
2.08 (in the hash buckets. The major difference between the two implementations is the way they handle) 72 504.96 P
1.25 (expansion. More detail about these implementations, including performance comparisons, are given in) 72 492.96 P
(separate reports, as mentioned in the introduction.) 72 480.96 T
-0.46 (In order to realize the expected  constant time bounds for insertion, searching, and erasure that are required) 72 461.96 P
0.56 (for hash tables \050Time Complexity entries in Table 3\051, it is necessary that hash tables expand dynamically) 72 449.96 P
0.02 (\050increasing the number of buckets\051 as the number of items stored grows. A simple method of expansion is) 72 437.96 P
-0.3 (often used: allocate another, larger, table of buckets; rehash all items in the old table into the new table; and) 72 425.96 P
1.16 (deallocate the old table.  This method, which we call) 72 413.96 P
4 F
1.16 (intermittent resizing) 317.24 413.96 P
3 F
1.16 (, can be very time-consuming,) 402.58 413.96 P
5.34 (perhaps prohibitively so in some applications requiring very fast response-times. A different) 72 401.96 P
-0.24 (implementation avoids this potential bottleneck by expanding \050or contracting\051 the table on a gradual basis;) 72 389.96 P
0.46 (it could be called) 72 377.96 P
4 F
0.46 (gradual resizing) 151.43 377.96 P
3 F
0.46 (. The method used is based mainly on one described in Per-Ake Larson,) 217.72 377.96 P
4 F
(CACM) 72 365.96 T
3 F
(, Vol. 31, Number 4, April 1988.) 102 365.96 T
0 12 Q
(4  Acknowledgements) 72 335.88 T
3 10 Q
0.64 (Alex Stepanov and Meng Lee provided helpful comments on the drafts of this document and suggested) 72 317.58 P
(several significant improvements.) 72 305.58 T
52 446.62 54 499.62 R
V
52 410.62 54 420.62 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 22
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 22
%%DocumentFonts: Helvetica-Bold
%%+ Times-Italic
%%+ Helvetica
%%+ Palatino-Roman
%%+ Palatino-Italic
%%+ Courier
%%+ Times-Bold
%%+ Times-Roman
%%+ Helvetica-Oblique
%%EOF

