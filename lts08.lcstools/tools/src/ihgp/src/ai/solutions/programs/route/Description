Route-finder
============

This program searches the shortest route between two cities based
on a map of cities and the roads between these cities.

The classes
-----------

First a struct Route is defined that is used to store information
about the roads between the cities:

struct Route;

Route contains three items: the names of the two cities and the
distance of the road that connects these cities. Route is used to
build a database where the road information is stored.

The main search classes are class City and Class Path:

class City: public UniNode

Class City represents the cities that are visited during the search
and serves as an abstraction of the nodes generated by the search
tree. Each object of class city contains two items: the name of
the city visited and the distance of the road between this city
and the "parent" city (the city that was visited before this city). This
distance is used to find the shortest route.

Class Path implements the search algorithm. Because the shortest
route must be find uniform-cost search is selected which is guaranteed
to find the shortest path in an efficient way:

class Path : public UniCostGraph

The algorithm
-------------

The algorithm used by the program is very simple: find all the roads
leading from the current city and use these to continue the search
until the destination city has been found and the route is complete.
Because there is no fixed number of operators in this problem expand()
is implemented rather than do_operator(). Expansion of a node means
searching the database for all cities that are directly reachable
from the current city and creating a successor node for each city
found. Because uniform-cost is selected function compute_g() must
be implemented which computes the cost of getting from the parent
node to the successor node. In this problem this cost is represented
by the distance of the roads between the cities. 

Using the route-finder
----------------------

To use the route-finder first the start city and goal city must
be defined and for each of these an object of class City must be
created. Next an object of class Path is created which is passed
the two City objects. The following line shows how these steps
can be realizes as one step:

    Path
        path(new City("kopenhagen", 0), new City("rome", 0));

Afther this the search can be started. The following sample program
shows how all of these steps can be integrated:

int main()
{
    /* Install new handler to catch out of memory errors. */
    set_new_handler(no_mem);

    Path
        path(new City("kopenhagen", 0), new City("rome", 0));

    if (path.generate())
        path.display();
    return(1);
}

The program can be made to handle more cities by extending the
database of cities and roads. This database is defined by the
following array:

Route
    table[];

This array can be found in file route.cc. Each entry in this
array is made of three items: the name of the first city, the
name of the second city and the distance of the road between
these cities. Note that the last entry of the array must always be
{ 0, 0, 0 }.

