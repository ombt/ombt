%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
pop	%%%	{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
pop	%%%	{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 15 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Palatino-Italic FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
7 0 /Palatino-Bold FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
9 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "-1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
0 0 0 1 0 0 0 K
V
0 18 Q
0 X
(The Standard Template Library) 173.47 473.05 T
1 14 Q
(Alexander Stepanov & Meng Lee) 213.07 425.07 T
1 12 Q
(Hewlett-Packard Laboratories) 232.17 398.18 T
(1501 Page Mill Road) 254.5 385.18 T
(Palo Alto, CA 94304) 256 372.18 T
2 10 Q
(February 7, 1995) 269.57 115.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "-1" 1
%%Page: "0" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
0 0 0 1 0 0 0 K
V
72 72 540 720 C
135.56 344.04 476.44 464.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
144.56 352.04 468.56 455.04 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(Copyright \050c\051 1994 Hewlett-Packard Company) 144.56 448.37 T
-0.23 (Permission to use, copy, modify, distribute and sell this document for any) 144.56 429.37 P
-0.18 (purpose is hereby granted without fee,) 144.56 417.37 P
-0.18 (provided that the above copyright) 317.7 417.37 P
1.22 (notice appear in all copies and that both that copyright notice and this) 144.56 405.37 P
(permission notice appear in supporting documentation.) 144.56 393.37 T
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "0" 2
%%Page: "1" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(1) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
(1 Intr) 72 713.33 T
(oduction) 95.72 713.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140 713.33 T
( 3) 532.5 713.33 T
(2 Str) 72 695.33 T
(uctur) 91.88 695.33 T
(e of the library) 115.41 695.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 695.33 T
( 3) 532.5 695.33 T
(3 Requir) 72 677.33 T
(ements) 109.28 677.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145 677.33 T
( 4) 532.5 677.33 T
(4 Cor) 72 659.33 T
(e components) 95.82 659.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 160 659.33 T
( 5) 532.5 659.33 T
3 F
(4.1 Operators) 99 647.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 155 647.33 T
( 5) 532.5 647.33 T
(4.2 Pair) 99 635.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 132.5 635.33 T
( 5) 532.5 635.33 T
2 F
(5 Iterators) 72 617.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 120 617.33 T
( 6) 532.5 617.33 T
3 F
(5.1 Input iterators) 99 605.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 172.5 605.33 T
( 7) 532.5 605.33 T
(5.2 Output iterators) 99 593.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177.5 593.33 T
( 8) 532.5 593.33 T
(5.3 Forward iterators) 99 581.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 581.33 T
( 8) 532.5 581.33 T
(5.4 Bidirectional iterators) 99 569.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 202.5 569.33 T
( 9) 532.5 569.33 T
(5.5 Random access iterators) 99 557.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 557.33 T
( 10) 527.5 557.33 T
(5.6 Iterator tags) 99 545.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 162.5 545.33 T
( 10) 527.5 545.33 T
(5.6.1 Examples of using iterator tags) 126 533.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 277.5 533.33 T
( 10) 527.5 533.33 T
(5.6.2 Library defined primitives) 126 521.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.5 521.33 T
( 12) 527.5 521.33 T
(5.7 Iterator operations) 99 509.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 509.33 T
( 14) 527.5 509.33 T
2 F
(6 Function objects) 72 491.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 155 491.33 T
( 14) 527.5 491.33 T
3 F
(6.1 Base) 99 479.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 135 479.33 T
( 14) 527.5 479.33 T
(6.2 Arithmetic operations) 99 467.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 202.5 467.33 T
( 15) 527.5 467.33 T
(6.3 Comparisons) 99 455.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.5 455.33 T
( 15) 527.5 455.33 T
(6.4 Logical operations) 99 443.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 443.33 T
( 16) 527.5 443.33 T
2 F
(7 Allocators) 72 425.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 127.5 425.33 T
( 16) 527.5 425.33 T
3 F
(7.1 Allocator requirements) 99 413.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207.5 413.33 T
( 16) 527.5 413.33 T
(7.2 The default allocator) 99 401.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.5 401.33 T
( 17) 527.5 401.33 T
2 F
(8 Containers) 72 383.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 132.5 383.33 T
( 18) 527.5 383.33 T
3 F
(8.1 Sequences) 99 371.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 157.5 371.33 T
( 21) 527.5 371.33 T
(8.1.1 Vector) 126 359.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 359.33 T
( 22) 527.5 359.33 T
(8.1.2 List) 126 347.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.5 347.33 T
( 25) 527.5 347.33 T
(8.1.3 Deque) 126 335.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177.5 335.33 T
( 28) 527.5 335.33 T
(8.2 Associative containers) 99 323.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 205 323.33 T
( 30) 527.5 323.33 T
(8.2.1 Set) 126 311.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 165 311.33 T
( 32) 527.5 311.33 T
(8.2.2 Multiset) 126 299.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 299.33 T
( 34) 527.5 299.33 T
(8.2.3 Map) 126 287.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 170 287.33 T
( 35) 527.5 287.33 T
(8.2.4 Multimap) 126 275.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 275.33 T
( 37) 527.5 275.33 T
2 F
(9 Str) 72 257.33 T
(eam iterators) 91.78 257.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 152.5 257.33 T
( 39) 527.5 257.33 T
3 F
(9.1 Istream Iterator) 99 245.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177.5 245.33 T
( 39) 527.5 245.33 T
(9.2 Ostream iterator) 99 233.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 233.33 T
( 40) 527.5 233.33 T
2 F
(10 Algorithms) 72 215.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140 215.33 T
( 40) 527.5 215.33 T
3 F
(10.1 Non-mutating sequence operations) 99 203.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 260 203.33 T
( 41) 527.5 203.33 T
(10.1.1 For each) 126 191.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 191.33 T
( 41) 527.5 191.33 T
(10.1.2 Find) 126 179.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175 179.33 T
( 41) 527.5 179.33 T
(10.1.3 Adjacent find) 126 167.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 167.33 T
( 41) 527.5 167.33 T
(10.1.4 Count) 126 155.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.5 155.33 T
( 41) 527.5 155.33 T
(10.1.5 Mismatch) 126 143.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.5 143.33 T
( 42) 527.5 143.33 T
(10.1.6 Equal) 126 131.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 131.33 T
( 42) 527.5 131.33 T
(10.1.7 Search) 126 119.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 119.33 T
( 42) 527.5 119.33 T
(10.2 Mutating sequence operations) 99 107.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 107.33 T
( 42) 527.5 107.33 T
(10.2.1 Copy) 126 95.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 95.33 T
( 42) 527.5 95.33 T
(10.2.2 Swap) 126 83.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 83.33 T
( 43) 527.5 83.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 3
%%Page: "2" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(2) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
3 F
0 X
(10.2.3 Transform) 126 713.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200 713.33 T
( 43) 527.5 713.33 T
(10.2.4 Replace) 126 701.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 701.33 T
( 43) 527.5 701.33 T
(10.2.5 Fill) 126 689.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 170 689.33 T
( 44) 527.5 689.33 T
(10.2.6 Generate) 126 677.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 677.33 T
( 44) 527.5 677.33 T
(10.2.7 Remove) 126 665.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 665.33 T
( 44) 527.5 665.33 T
(10.2.8 Unique) 126 653.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187.5 653.33 T
( 45) 527.5 653.33 T
(10.2.9 Reverse) 126 641.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 641.33 T
( 45) 527.5 641.33 T
(10.2.10 Rotate) 126 629.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187.5 629.33 T
( 46) 527.5 629.33 T
(10.2.11 Random shuffle) 126 617.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.5 617.33 T
( 46) 527.5 617.33 T
(10.2.12 Partitions) 126 605.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200 605.33 T
( 46) 527.5 605.33 T
(10.3 Sorting and related operations) 99 593.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 593.33 T
( 47) 527.5 593.33 T
(10.3.1 Sort) 126 581.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175 581.33 T
( 47) 527.5 581.33 T
(10.3.2 Nth element) 126 569.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207.5 569.33 T
( 48) 527.5 569.33 T
(10.3.3 Binary search) 126 557.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 557.33 T
( 48) 527.5 557.33 T
(10.3.4 Merge) 126 545.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.5 545.33 T
( 49) 527.5 545.33 T
(10.3.5 Set operations on sorted structures) 126 533.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 295 533.33 T
( 50) 527.5 533.33 T
(10.3.6 Heap operations) 126 521.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222.5 521.33 T
( 51) 527.5 521.33 T
(10.3.7 Minimum and maximum) 126 509.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.5 509.33 T
( 52) 527.5 509.33 T
(10.3.8 Lexicographical comparison) 126 497.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.5 497.33 T
( 52) 527.5 497.33 T
(10.3.9 Permutation generators) 126 485.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250 485.33 T
( 53) 527.5 485.33 T
(10.4 Generalized numeric operations) 99 473.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 247.5 473.33 T
( 53) 527.5 473.33 T
(10.4.1 Accumulate) 126 461.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 205 461.33 T
( 53) 527.5 461.33 T
(10.4.2 Inner product) 126 449.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 449.33 T
( 53) 527.5 449.33 T
(10.4.3 Partial sum) 126 437.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 202.5 437.33 T
( 54) 527.5 437.33 T
(10.4.4 Adjacent difference) 126 425.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237.5 425.33 T
( 54) 527.5 425.33 T
2 F
(1) 72 407.33 T
(1 Adaptors) 76.45 407.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 130 407.33 T
( 54) 527.5 407.33 T
3 F
(1) 99 395.33 T
(1.1 Container adaptors) 103.63 395.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195 395.33 T
( 54) 527.5 395.33 T
(11.1.1 Stack) 126 383.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 383.33 T
( 54) 527.5 383.33 T
(11.1.2 Queue) 126 371.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.5 371.33 T
( 55) 527.5 371.33 T
(11.1.3 Priority queue) 126 359.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 215 359.33 T
( 56) 527.5 359.33 T
(1) 99 347.33 T
(1.2 Iterator adaptors) 103.63 347.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 347.33 T
( 56) 527.5 347.33 T
(11.2.1 Reverse iterators) 126 335.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 335.33 T
( 56) 527.5 335.33 T
(11.2.2 Insert iterators) 126 323.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 215 323.33 T
( 59) 527.5 323.33 T
(11.2.3 Raw storage iterator) 126 311.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237.5 311.33 T
( 60) 527.5 311.33 T
(1) 99 299.33 T
(1.3 Function adaptors) 103.63 299.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 299.33 T
( 61) 527.5 299.33 T
(11.3.1 Negators) 126 287.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 287.33 T
( 61) 527.5 287.33 T
(11.3.2 Binders) 126 275.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187.5 275.33 T
( 61) 527.5 275.33 T
(11.3.3 Adaptors for pointers to functions) 126 263.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 292.5 263.33 T
( 62) 527.5 263.33 T
2 F
(12 Memory Handling) 72 245.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 170 245.33 T
( 63) 527.5 245.33 T
3 F
(12.1 Primitives) 99 233.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 162.5 233.33 T
( 63) 527.5 233.33 T
(12.2 Specialized algorithms) 99 221.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 221.33 T
( 64) 527.5 221.33 T
2 F
(13 Acknowledgments) 72 203.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 172.5 203.33 T
( 64) 527.5 203.33 T
(14 Bibliography) 72 185.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145 185.33 T
( 65) 527.5 185.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 4
%%Page: "3" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(3) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 12 Q
0 X
(1  Introduction) 72 711.25 T
2 10 Q
1.75 (The Standard Template Library provides a set of well structured generic C++ components that work) 72 692.96 P
-0.17 (together in a seamless way. Special care has been taken to ensure that all the template algorithms work not) 72 680.96 P
1.02 (only on the data structures in the library, but also on built-in C++ data structures. For example, all the) 72 668.96 P
1.34 (algorithms work on regular pointers. The orthogonal design of the library allows programmers to use) 72 656.96 P
1.83 (library data structures with their own algorithms, and to use library algorithms with their own data) 72 644.96 P
-0.26 (structures. The well specified semantic and complexity requirements guarantee that a user component will) 72 632.96 P
-0.14 (work with the library, and that it will work efficiently. This flexibility ensures the widespread utility of the) 72 620.96 P
(library.) 72 608.96 T
-0.58 (Another important consideration is efficiency. C++ is successful because it combines expressive power with) 72 589.96 P
0.01 (efficiency. Much effort has been spent to verify that every template component in the library has a generic) 72 577.96 P
0.21 (implementation that performs within a few percentage points of the efficiency of the corresponding hand) 72 565.96 P
(coded routine.) 72 553.96 T
0.07 (The third consideration in the design has been to develop a library structure that, while being natural and) 72 534.96 P
(easy to grasp, is based on a firm theoretical foundation.) 72 522.96 T
0 12 Q
(2  Structure of the library) 72 492.88 T
2 10 Q
(The library contains five main kinds of components:) 72 474.58 T
(\320) 90 460.58 T
(algorithm: defines a computational procedure.) 102 460.58 T
(\320) 90 447.58 T
(container: manages a set of memory locations.) 102 447.58 T
(\320) 90 434.58 T
(iterator: provides a means for an algorithm to traverse through a container.) 102 434.58 T
(\320) 90 421.58 T
(function object: encapsulates a function in an object for use by other components.) 102 421.58 T
(\320) 90 408.58 T
(adaptor: adapts a component to provide a different interface.) 102 408.58 T
2.14 (Such decomposition allows us to dramatically reduce the component space. For example, instead of) 72 390.58 P
0.72 (providing a search member function for every kind of container we provide a single version that works) 72 378.58 P
(with all of them as long as a basic set of requirements is satisfied.) 72 366.58 T
-0.24 (The following description helps clarify the structure of the library. If software components are tabulated as) 72 347.58 P
1.7 (a three-dimensional array, where one dimension represents different data types \050e.g. int, double\051, the) 72 335.58 P
1.25 (second dimension represents different containers \050e.g. vector, linked-list, file\051, and the third dimension) 72 323.58 P
-0.28 (represents different algorithms on the containers \050e.g. searching, sorting, rotation\051, if) 72 311.58 P
4 9 Q
-0.6 (i) 443.98 311.58 P
2 10 Q
-0.28 (,) 449.38 311.58 P
4 9 Q
-0.6 (j) 454.1 311.58 P
2 10 Q
-0.28 (, and) 459.5 311.58 P
4 9 Q
-0.6 (k) 483.38 311.58 P
2 10 Q
-0.28 ( are the size) 488.78 311.58 P
0.04 (of the dimensions, then) 72 299.58 P
4 9 Q
0.08 (i*j*k) 178.12 299.58 P
2 10 Q
0.04 ( different versions of code have to be designed. By using template functions) 205.12 299.58 P
-0.29 (that are parameterized by a data type, we need only) 72 287.58 P
4 9 Q
-0.64 (j*k) 301.49 287.58 P
2 10 Q
-0.29 ( versions. Further, by making our algorithms work) 317.69 287.58 P
0.66 (on different containers, we need merely) 72 275.58 P
4 9 Q
1.42 (j+k) 254.18 275.58 P
2 10 Q
0.66 ( versions. This significantly simplifies software design work) 270.38 275.58 P
-0.58 (and also makes it possible to use components in the library together with user defined components in a very) 72 263.58 P
-0.49 (flexible way. A user may easily define a specialized container class and use the library\325s sort function to sort) 72 251.58 P
2.19 (it. A user may provide a different comparison function for the sort either as a regular pointer to a) 72 239.58 P
2.54 (comparison function, or as a function object \050an object with an) 72 227.58 P
4 9 Q
5.49 (operator\050\051) 376.83 227.58 P
2 10 Q
2.54 ( defined\051 that does the) 430.83 227.58 P
-0.07 (comparisons. If a user needs to iterate through a container in the reverse direction, the) 72 215.58 P
4 9 Q
-0.15 (reverse_iterator) 453.6 215.58 P
2 10 Q
(adaptor allows that.) 72 203.58 T
-0.01 (The library extends the basic C++ paradigms in a consistent way, so it is easy for a C/C++ programmer to) 72 184.58 P
0.38 (start using the library. For example, the library contains a) 72 172.58 P
4 9 Q
0.82 (merge) 331.85 172.58 P
2 10 Q
0.38 ( template function. When a user has two) 358.85 172.58 P
(arrays) 72 160.58 T
4 9 Q
(a) 102.2 160.58 T
2 10 Q
( and) 107.6 160.58 T
4 9 Q
(b) 129.53 160.58 T
2 10 Q
( to be merged into) 134.93 160.58 T
4 9 Q
(c) 217.95 160.58 T
2 10 Q
( it can be done with:) 223.35 160.58 T
4 9 Q
(int a[1000];) 108 138.25 T
(int b[2000];) 108 127.25 T
(int c[3000];) 108 116.25 T
(...) 108 105.25 T
(merge\050a, a + 1000, b, b + 2000, c\051;) 108 94.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 5
%%Page: "4" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(4) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.19 (When a user wants to merge a vector and a list \050both of which are template classes in the library\051 and put) 72 713.33 P
(the result into a freshly allocated uninitialized storage it can be done with:) 72 701.33 T
4 9 Q
(vector<Employee> a;) 108 679 T
(list<Employee> b;) 108 668 T
(...) 108 657 T
(Employee* c = allocate\050a.size\050\051 + b.size\050\051, \050Employee*\0510\051;) 108 646 T
(merge\050a.begin\050\051, a.end\050\051, b.begin\050\051, b.end\050\051,) 108 635 T
(raw_storage_iterator<Employee*, Employee>\050c\051\051;) 144 624 T
2 10 Q
0.81 (where) 72 605.33 P
4 9 Q
1.75 (begin\050\051) 103 605.33 P
2 10 Q
0.81 ( and) 140.8 605.33 P
4 9 Q
1.75 (end\050\051) 164.35 605.33 P
2 10 Q
0.81 ( are member functions of containers that return the right types of iterators or) 191.35 605.33 P
-0.51 (pointer-like objects that allow the merge to do the job and) 72 593.33 P
4 9 Q
-1.11 (raw_storage_iterator) 323.78 593.33 P
2 10 Q
-0.51 ( is an adapter that allows) 431.78 593.33 P
(algorithms to put results directly into uninitialized memory by calling the appropriate copy constructor.) 72 581.33 T
-0.16 (In many cases it is useful to iterate through input/output streams in the same way as through regular data) 72 562.33 P
0.04 (structures. For example, if we want to merge two data structures and then store them in a file, it would be) 72 550.33 P
-0.26 (nice to avoid creation of an auxiliary data structure for the result, instead storing the result directly into the) 72 538.33 P
-0.21 (corresponding file. The library provides both) 72 526.33 P
4 9 Q
-0.46 (istream_iterator) 272.42 526.33 P
2 10 Q
-0.21 ( and) 358.82 526.33 P
4 9 Q
-0.46 (ostream_iterator) 380.32 526.33 P
2 10 Q
-0.21 ( template classes) 466.72 526.33 P
0.25 (to make many of the library algorithms work with I/O streams that represent homogenous aggregates of) 72 514.33 P
0.88 (data. Here is a program that reads a file of integers from the standard input, removes all those that are) 72 502.33 P
(divisible by its command argument, and writes the result to the standard output:) 72 490.33 T
4 9 Q
(main\050int argc, char** argv\051 {) 108 468 T
(if \050argc != 2\051 throw\050\323usage: remove_if_divides integer\134n\323\051;) 144 457 T
(remove_copy_if\050istream_iterator<int>\050cin\051, istream_iterator<int>\050\051,) 144 446 T
(ostream_iterator<int>\050cout, \323\134n\323\051,) 180 435 T
(not1\050bind2nd\050modulus<int>\050\051, atoi\050argv[1]\051\051\051\051;) 180 424 T
(}) 108 413 T
2 10 Q
-0.05 (All the work is done by) 72 394.33 P
4 9 Q
-0.1 (remove_copy_if) 177.93 394.33 P
2 10 Q
-0.05 ( which reads integers one by one until the input iterator becomes) 253.53 394.33 P
0.07 (equal to the) 72 382.33 P
5 F
0.07 (end-of-stream) 126.63 382.33 P
2 F
0.07 ( iterator that is constructed by the constructor with no arguments. \050In general, all) 182.18 382.33 P
0.39 (the algorithms work in a \322from here to there\323 fashion taking two iterators that signify the beginning and) 72 370.33 P
0.43 (the end of the input.\051 Then) 72 358.33 P
4 9 Q
0.93 (remove_copy_if) 195.25 358.33 P
2 10 Q
0.43 ( writes the integers that pass the test onto the output stream) 270.85 358.33 P
0.36 (through the output iterator that is bound to) 72 346.33 P
4 9 Q
0.78 (cout) 269.45 346.33 P
2 10 Q
0.36 (. As a predicate,) 291.05 346.33 P
4 9 Q
0.78 (remove_copy_if) 365.77 346.33 P
2 10 Q
0.36 ( uses a function object) 441.37 346.33 P
1.77 (constructed from a function object,) 72 334.33 P
4 9 Q
3.83 (modulus<int>) 237.12 334.33 P
2 10 Q
1.77 (, which takes) 301.92 334.33 P
4 9 Q
3.83 (i) 367.42 334.33 P
2 10 Q
1.77 ( and) 372.82 334.33 P
4 9 Q
3.83 (j) 398.29 334.33 P
2 10 Q
1.77 ( and returns) 403.69 334.33 P
4 9 Q
3.83 (i%j) 465.47 334.33 P
2 10 Q
1.77 (, as a binary) 481.67 334.33 P
1.74 (predicate and makes it into a unary predicate by using) 72 322.33 P
4 9 Q
3.76 (bind2nd) 332.88 322.33 P
2 10 Q
1.74 ( to bind the second argument to the) 370.68 322.33 P
1.37 (command line argument,) 72 310.33 P
4 9 Q
2.97 (atoi\050argv[1]\051) 190.28 310.33 P
2 10 Q
1.37 (. Then the negation of this unary predicate is obtained using) 260.48 310.33 P
(function adaptor) 72 298.33 T
4 9 Q
(not1) 148.86 298.33 T
2 10 Q
(.) 170.46 298.33 T
(A somewhat more realistic example is a filter program that takes a file and randomly shuffles its lines.) 72 279.33 T
4 9 Q
(main\050int argc, char**\051 {) 108 268 T
(if \050argc != 1\051 throw\050\323usage: shuffle\134n\323\051;) 144 257 T
(vector<string> v;) 144 246 T
(copy\050istream_iterator<string>\050cin\051, istream_iterator<string>\050\051,) 144 235 T
(inserter\050v, v.end\050\051\051\051;) 180 224 T
(random_shuffle\050v.begin\050\051, v.end\050\051\051;) 144 213 T
(copy\050v.begin\050\051, v.end\050\051, ostream_iterator<string>\050cout\051\051;) 144 202 T
(}) 108 191 T
2 10 Q
0.75 (In this example,) 72 172.33 P
4 9 Q
1.61 (copy) 147.15 172.33 P
2 10 Q
0.75 ( moves lines from the standard input into a vector, but since the vector is not pre-) 168.75 172.33 P
-0.14 (allocated it uses an insert iterator to insert the lines one by one into the vector. \050This technique allows all of) 72 160.33 P
2.87 (the copying functions to work in the usual overwrite mode as well as in the insert mode.\051 Then) 72 148.33 P
4 9 Q
(random_shuffle) 72 136.33 T
2 10 Q
( shuffles the vector and another call to) 147.6 136.33 T
4 9 Q
(copy) 318.72 136.33 T
2 10 Q
( copies it onto the) 340.32 136.33 T
4 9 Q
(cout) 420.71 136.33 T
2 10 Q
( stream.) 442.31 136.33 T
0 12 Q
(3  Requirements) 72 106.25 T
2 10 Q
2.91 (To ensure that the different components in a library work together, they must satisfy some basic) 72 87.96 P
0.24 (requirements. Requirements should be as general as possible, so instead of saying \322class) 72 75.96 P
4 9 Q
0.52 (X) 467.11 75.96 P
2 10 Q
0.24 ( has to define a) 472.51 75.96 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 6
%%Page: "5" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(5) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.71 (member function) 72 713.33 P
4 9 Q
1.54 (operator++\050\051,\323) 152.22 713.33 P
2 10 Q
0.71 ( we say \322for any object) 227.82 713.33 P
4 9 Q
1.54 (x) 334.96 713.33 P
2 10 Q
0.71 ( of class) 340.36 713.33 P
4 9 Q
1.54 (X) 379.62 713.33 P
2 10 Q
0.71 (,) 385.02 713.33 P
4 9 Q
1.54 (++x) 390.73 713.33 P
2 10 Q
0.71 ( is defined.\323 \050It is unspecified) 406.93 713.33 P
0.32 (whether the operator is a member or a global function.\051 Requirements are stated in terms of well-defined) 72 701.33 P
3.01 (expressions, which define valid terms of the types that satisfy the requirements. For every set of) 72 689.33 P
0.4 (requirements there is a table that specifies an initial set of the valid expressions and their semantics. Any) 72 677.33 P
1.17 (generic algorithm that uses the requirements has to be written in terms of the valid expressions for its) 72 665.33 P
(formal type parameters.) 72 653.33 T
1.52 (If an operation is required to be linear time, it means no worse than linear time, and a constant time) 72 634.33 P
(operation satisfies the requirement.) 72 622.33 T
2.77 (In some cases we present the semantic requirements using C++ code. Such code is intended as a) 72 603.33 P
0.84 (specification of equivalence of a construct to another construct, not necessarily as the way the construct) 72 591.33 P
4.17 (must be implemented \050although in some cases the code given is unambiguously the optimum) 72 579.33 P
(implementation\051.) 72 567.33 T
0 12 Q
(4  Core components) 72 537.25 T
2 10 Q
0.81 (This section contains some basic template functions and classes that are used throughout the rest of the) 72 518.96 P
(library.) 72 506.96 T
0 11 Q
(4.1 Operators) 72 483.61 T
2 10 Q
1.4 (To avoid redundant definitions of) 72 466.53 P
4 9 Q
3.02 (operator!=) 231.46 466.53 P
2 10 Q
1.4 ( out of) 285.46 466.53 P
4 9 Q
3.02 (operator==) 320.7 466.53 P
2 10 Q
1.4 ( and) 374.7 466.53 P
4 9 Q
3.02 (operators>) 399.43 466.53 P
2 10 Q
1.4 (,) 453.43 466.53 P
4 9 Q
3.02 (<=) 459.83 466.53 P
2 10 Q
1.4 (, and) 470.63 466.53 P
4 9 Q
3.02 (>=) 497.86 466.53 P
2 10 Q
1.4 ( out of) 508.66 466.53 P
4 9 Q
(operator<) 72 454.53 T
2 10 Q
( the library provides the following:) 120.6 454.53 T
4 9 Q
(template <class T>) 108 432.2 T
(inline bool operator!=\050const T& x, const T& y\051 {) 108 421.2 T
(return !\050x == y\051;) 144 410.2 T
(}) 108 399.2 T
(template <class T>) 108 377.2 T
(inline bool operator>\050const T& x, const T& y\051 {) 108 366.2 T
(return y < x;) 144 355.2 T
(}) 108 344.2 T
(template <class T>) 108 322.2 T
(inline bool operator<=\050const T& x, const T& y\051 {) 108 311.2 T
(return !\050y < x\051;) 144 300.2 T
(}) 108 289.2 T
(template <class T>) 108 267.2 T
(inline bool operator>=\050const T& x, const T& y\051 {) 108 256.2 T
(return !\050x < y\051;) 144 245.2 T
(}) 108 234.2 T
0 11 Q
(4.2 Pair) 72 211.18 T
2 10 Q
(The library includes templates for heterogeneous pairs of values.) 72 194.1 T
4 9 Q
(template <class T1, class T2>) 108 171.77 T
(struct pair {) 108 160.77 T
(T1 first;) 144 149.77 T
(T2 second;) 144 138.77 T
(pair\050const T1& x, const T2& y\051 : first\050x\051, second\050y\051 {}) 144 127.77 T
(};) 108 116.77 T
(template <class T1, class T2>) 108 94.77 T
(inline bool operator==\050const pair<T1, T2>& x, const pair<T1, T2>& y\051 {) 108 83.77 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 7
%%Page: "6" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(6) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(return x.first == y.first && x.second == y.second;) 144 714 T
(}) 108 703 T
(template <class T1, class T2>) 108 681 T
(inline bool operator<\050const pair<T1, T2>& x, const pair<T1, T2>& y\051 {) 108 670 T
-0.33 (return x.first < y.first || \050!\050y.first < x.first\051 && x.second < y.second\051;) 144 659 P
(}) 108 648 T
2 10 Q
1.04 (The library provides a matching template function) 72 629.33 P
4 9 Q
2.25 (make_pair) 305.03 629.33 P
2 10 Q
1.04 ( to simplify their construction. Instead of) 353.63 629.33 P
(saying, for example,) 72 617.33 T
4 9 Q
(return pair<int, double>\0505, 3.1415926\051; // explicit types) 108 595 T
2 10 Q
(one may say) 72 576.33 T
4 9 Q
(return make_pair\0505, 3.1415926\051; // types are deduced) 108 554 T
(template <class T1, class T2>) 108 532 T
(inline pair<T1, T2> make_pair\050const T1& x, const T2& y\051 {) 108 521 T
(return pair<T1, T2>\050x, y\051;) 144 510 T
0 12 Q
(5  Iterators) 72 480.25 T
2 10 Q
0.57 (Iterators are a generalization of pointers that allow a programmer to work with different data structures) 72 461.96 P
1.23 (\050containers\051 in a uniform manner. To be able to construct template algorithms that work correctly and) 72 449.96 P
0.85 (efficiently on different types of data structures, we need to formalize not just the interfaces but also the) 72 437.96 P
0.48 (semantics and complexity assumptions of iterators. Iterators are objects that have) 72 425.96 P
4 9 Q
1.03 (operator*) 438.36 425.96 P
2 10 Q
0.48 ( returning a) 486.96 425.96 P
0.28 (value of some class or built-in type) 72 413.96 P
4 9 Q
0.61 (T) 230.51 413.96 P
2 10 Q
0.28 ( called a) 235.91 413.96 P
5 F
0.28 (value type) 275.41 413.96 P
2 F
0.28 ( of the iterator. For every iterator type) 317.08 413.96 P
4 9 Q
0.61 (X) 488.97 413.96 P
2 10 Q
0.28 ( for which) 494.37 413.96 P
(equality is defined, there is a corresponding signed integral type called the) 72 401.96 T
5 F
(distance type) 404.13 401.96 T
2 F
( of the iterator.) 456.81 401.96 T
1.75 (Since iterators are a generalization of pointers, their semantics is a generalization of the semantics of) 72 382.96 P
-0.13 (pointers in C++. This assures that every template function that takes iterators works with regular pointers.) 72 370.96 P
0.48 (Depending on the operations defined on them, there are five categories of iterators:) 72 358.96 P
5 F
0.48 (input iterators, output) 448.21 358.96 P
0.75 (iterators,) 72 346.96 P
0.75 (forward iterators) 111.63 346.96 P
2 F
0.75 (,) 180.42 346.96 P
5 F
0.75 (bidirectional iterators) 186.17 346.96 P
2 F
0.75 ( and) 273.67 346.96 P
5 F
0.75 (random access iterators) 297.1 346.96 P
2 F
0.75 (. Forward iterators satisfy all the) 392.83 346.96 P
2.56 (requirements of the input and output iterators and can be used whenever either kind is specified.) 72 334.96 P
1.11 (Bidirectional iterators satisfy all the requirements of the forward iterators and can be used whenever a) 72 322.96 P
0.15 (forward iterator is specified. Random access iterators satisfy all the requirements of bidirectional iterators) 72 310.96 P
-0.33 (and can be used whenever a bidirectional iterator is specified. There is an additional attribute that forward,) 72 298.96 P
-0.12 (bidirectional and random access iterators might have, that is, they can be) 72 286.96 P
5 F
-0.12 (mutable) 394.82 286.96 P
2 F
-0.12 ( or) 427.23 286.96 P
5 F
-0.12 (constant) 441.41 286.96 P
2 F
-0.12 ( depending on) 476.03 286.96 P
-0.52 (whether the result of the) 72 274.96 P
4 9 Q
-1.13 (operator*) 180.37 274.96 P
2 10 Q
-0.52 ( behaves as a reference or as a reference to a constant. Constant iterators) 228.97 274.96 P
(do not satisfy the requirements for output iterators.) 72 262.96 T
0.22 (Just as a regular pointer to an array guarantees that there is a pointer value pointing past the last element) 72 143.96 P
1.95 (of the array, so for any iterator type there is an iterator value that points past the last element of a) 72 131.96 P
0.7 (corresponding container. These values are called) 72 119.96 P
5 F
0.7 (past-the-end) 293.94 119.96 P
2 F
0.7 ( values. Values of the iterator for which the) 343.93 119.96 P
4 9 Q
3.11 (operator*) 72 107.96 P
2 10 Q
1.44 ( is defined are called) 120.6 107.96 P
5 F
1.44 (dereferenceable) 221.21 107.96 P
2 F
1.44 (. The library never assumes that past-the-end values are) 281.59 107.96 P
0.64 (dereferenceable. Iterators might also have) 72 95.96 P
5 F
0.64 (singular) 262.51 95.96 P
2 F
0.64 ( values that are not associated with any container. For) 296.41 95.96 P
-0.14 (example, after the declaration of an uninitialized pointer) 72 83.96 P
4 9 Q
-0.3 (x) 322.91 83.96 P
2 10 Q
-0.14 ( \050as with) 328.31 83.96 P
4 9 Q
-0.3 (int* x;) 368.29 83.96 P
2 10 Q
-0.14 (\051,) 405.79 83.96 P
4 9 Q
-0.3 (x) 413.98 83.96 P
2 10 Q
-0.14 ( should always be assumed) 419.38 83.96 P
72 72 540 720 C
72 159.62 540 240.62 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 158.62 540 257.62 R
7 X
0 0 0 1 0 0 0 K
V
6 12 Q
0 X
(T) 192.74 225.62 T
(able 1: Relations among iterator categories) 199.64 225.62 T
3 10 Q
(Random access) 116.64 190.96 T
(Bidirectional) 243.6 190.96 T
(Forward) 366 190.96 T
(Input) 466.8 202.96 T
(Output) 466.8 178.96 T
108 215.37 108 171.87 2 L
V
0.5 H
0 Z
N
504 215.37 504 171.87 2 L
V
N
107.75 215.62 504.25 215.62 2 L
V
N
107.75 171.62 504.25 171.62 2 L
V
N
216.8 196.12 222 193.12 216.8 190.12 3 L
N
195 193.12 221.75 193.12 2 L
7 X
V
2 Z
0 X
N
342.8 196.12 348 193.12 342.8 190.12 3 L
0 Z
N
321 193.12 347.75 193.12 2 L
7 X
V
2 Z
0 X
N
441.12 203.33 447 202.12 443.02 197.64 3 L
0 Z
N
420 193.12 446.76 202.04 2 L
7 X
V
2 Z
0 X
N
443.02 188.61 447 184.12 441.12 182.92 3 L
0 Z
N
420 193.12 446.76 184.2 2 L
7 X
V
2 Z
0 X
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 8
%%Page: "7" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(7) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.61 (to have a singular value of a pointer. Results of most expressions are undefined for singular values. The) 72 713.33 P
0.52 (only exception is an assignment of a non-singular value to an iterator that holds a singular value. In this) 72 701.33 P
0.17 (case the singular value is overwritten the same way as any other value. Dereferenceable and past-the-end) 72 689.33 P
(values are always non-singular.) 72 677.33 T
0.2 (An iterator) 72 658.33 P
4 9 Q
0.43 (j) 123.58 658.33 P
2 10 Q
0.2 ( is called) 128.98 658.33 P
5 F
0.2 (reachable) 170.4 658.33 P
2 F
0.2 ( from an iterator) 207.43 658.33 P
4 9 Q
0.43 (i) 283.2 658.33 P
2 10 Q
0.2 ( if and only if there is a finite sequence of applications of) 288.6 658.33 P
4 9 Q
0.27 (operator++) 72 646.33 P
2 10 Q
0.12 ( to) 126 646.33 P
4 9 Q
0.27 (i) 139.97 646.33 P
2 10 Q
0.12 ( that makes) 145.37 646.33 P
4 9 Q
0.27 (i == j) 199 646.33 P
2 10 Q
0.12 (. If) 231.94 646.33 P
4 9 Q
0.27 (i) 246.38 646.33 P
2 10 Q
0.12 ( and) 251.79 646.33 P
4 9 Q
0.27 (j) 273.96 646.33 P
2 10 Q
0.12 ( refer to the same container, then either) 279.36 646.33 P
4 9 Q
0.27 (j) 455.78 646.33 P
2 10 Q
0.12 ( is reachable from) 461.18 646.33 P
4 9 Q
(i) 72 634.33 T
2 10 Q
(, or) 77.4 634.33 T
4 9 Q
(i) 94.31 634.33 T
2 10 Q
( is reachable from) 99.71 634.33 T
4 9 Q
(j) 180.66 634.33 T
2 10 Q
(, or both \050) 186.06 634.33 T
4 9 Q
(i == j) 228.87 634.33 T
2 10 Q
(\051.) 261.27 634.33 T
0.06 (Most of the library\325s algorithmic templates that operate on data structures have interfaces that use ranges.) 72 615.33 P
0.28 (A range is a pair of iterators that designate the beginning and end of the computation. A range) 72 603.33 P
4 9 Q
0.59 ([i, i\051) 497.08 603.33 P
2 10 Q
0.28 ( is) 530.07 603.33 P
-0.29 (an empty range; in general, a range) 72 591.33 P
4 9 Q
-0.63 ([i, j\051) 228.5 591.33 P
2 10 Q
-0.29 ( refers to the elements in the data structure starting with the one) 260.27 591.33 P
-0.12 (pointed to by) 72 579.33 P
4 9 Q
-0.26 (i) 133.3 579.33 P
2 10 Q
-0.12 ( and up to but not including the one pointed to by) 138.7 579.33 P
4 9 Q
-0.26 ( j) 358.53 579.33 P
2 10 Q
-0.12 (. Range) 369.07 579.33 P
4 9 Q
-0.26 ( [i, j\051) 401.79 579.33 P
2 10 Q
-0.12 ( is valid if and only if) 439.07 579.33 P
4 9 Q
-0.26 (j) 534.6 579.33 P
2 10 Q
1.68 (is reachable from) 72 567.33 P
4 9 Q
3.63 (i) 155.5 567.33 P
2 10 Q
1.68 (. The result of the application of the algorithms in the library to invalid ranges is) 160.9 567.33 P
(undefined.) 72 555.33 T
-0.53 (All the categories of iterators require only those functions that are realizable for a given category in constant) 72 536.33 P
(time \050amortized\051. Therefore, requirement tables for the iterators do not have a complexity column.) 72 524.33 T
-0.15 (In the following sections, we assume:) 72 505.33 P
4 9 Q
-0.32 (a) 238.3 505.33 P
2 10 Q
-0.15 ( and) 243.7 505.33 P
4 9 Q
-0.32 (b) 265.33 505.33 P
2 10 Q
-0.15 ( are values of) 270.73 505.33 P
4 9 Q
-0.32 (X) 331.29 505.33 P
2 10 Q
-0.15 (,) 336.69 505.33 P
4 9 Q
-0.32 (n) 341.55 505.33 P
2 10 Q
-0.15 ( is a value of the distance type) 346.95 505.33 P
4 9 Q
-0.32 (Distance,) 481.15 505.33 P
-0.32 (u) 532.1 505.33 P
2 10 Q
-0.15 (,) 537.5 505.33 P
4 9 Q
(tmp) 72 493.33 T
2 10 Q
(, and) 88.2 493.33 T
4 9 Q
(m) 112.63 493.33 T
2 10 Q
( are identifiers,) 118.03 493.33 T
4 9 Q
(r) 186.79 493.33 T
2 10 Q
( and) 192.19 493.33 T
4 9 Q
(s) 214.12 493.33 T
2 10 Q
( are lvalues of) 219.52 493.33 T
4 9 Q
(X) 283.58 493.33 T
2 10 Q
(,) 288.98 493.33 T
4 9 Q
(t) 293.98 493.33 T
2 10 Q
( is a value of value type) 299.38 493.33 T
4 9 Q
(T) 406.2 493.33 T
2 10 Q
(.) 411.6 493.33 T
0 11 Q
(5.1 Input iterators) 72 469.98 T
2 10 Q
-0.38 (A class or a built-in type) 72 452.91 P
4 9 Q
-0.83 (X) 180.05 452.91 P
2 10 Q
-0.38 ( satisfies the requirements of an input iterator for the value type) 185.45 452.91 P
4 9 Q
-0.83 (T) 465.44 452.91 P
2 10 Q
-0.38 ( if the following) 470.84 452.91 P
(expressions are valid:) 72 440.91 T
7 F
1.9 (NOTE:) 72 102.91 P
2 F
1.9 ( For input iterators,) 103.94 102.91 P
4 9 Q
4.1 (r == s) 199.85 102.91 P
2 10 Q
1.9 ( does not imply) 240.45 102.91 P
4 9 Q
4.1 (++r == ++s) 319.4 102.91 P
2 10 Q
1.9 (. \050Equality does not guarantee the) 381.59 102.91 P
0.49 (substitution property or referential transparency.\051 Algorithms on input iterators should never attempt to) 72 90.91 P
-0.08 (pass through the same iterator twice. They should be) 72 78.91 P
5 F
-0.08 (single pass) 307.91 78.91 P
2 F
-0.08 ( algorithms.) 351.45 78.91 P
5 F
-0.08 (Value type) 406.73 78.91 P
8 9 Q
-0.17 (T) 452.68 78.91 P
5 10 Q
-0.08 ( is not required to be) 458.08 78.91 P
6 12 Q
(T) 212.78 398.57 T
(able 2: Input iterator r) 219.68 398.57 T
(equir) 336.11 398.57 T
(ements) 363.23 398.57 T
3 10 Q
(expression) 93.82 367.91 T
(return type) 169 367.91 T
(operational semantics) 244.54 367.91 T
(assertion/note) 404.23 373.91 T
(pre/post-condition) 395.33 361.91 T
4 9 Q
(X\050a\051) 92.4 340.57 T
(a == X\050a\051.) 344.4 340.57 T
3 10 Q
(note: a destructor is assumed.) 344.4 328.91 T
4 9 Q
(X u\050a\051;) 92.4 309.57 T
(X u = a;) 92.4 298.57 T
3 10 Q
(post:) 344.4 308.91 T
4 9 Q
(u == a.) 366.35 308.91 T
(a == b) 92.4 279.57 T
3 10 Q
(convertible to) 150 278.91 T
4 9 Q
(bool) 207.77 278.91 T
(==) 344.4 278.91 T
3 10 Q
( is an equivalence relation.) 355.2 278.91 T
4 9 Q
(a != b) 92.4 259.57 T
3 10 Q
(convertible to) 150 258.91 T
4 9 Q
(bool) 207.77 258.91 T
(!\050a == b\051) 243.6 259.57 T
(*a) 92.4 239.57 T
3 10 Q
(convertible to) 150 238.91 T
4 9 Q
(T) 207.77 238.91 T
3 10 Q
(pre:) 344.4 238.91 T
4 9 Q
(a) 362.45 238.91 T
3 10 Q
( is dereferenceable.) 367.85 238.91 T
4 9 Q
(a == b) 344.4 226.91 T
3 10 Q
( implies) 376.8 226.91 T
4 9 Q
(*a == *b) 411.25 226.91 T
3 10 Q
(.) 454.45 226.91 T
4 9 Q
(++r) 92.4 207.57 T
(X&) 150 207.57 T
3 10 Q
(pre:) 344.4 206.91 T
4 9 Q
(r) 362.45 206.91 T
3 10 Q
( is dereferenceable.) 367.85 206.91 T
(post:) 344.4 194.91 T
4 9 Q
(r) 366.35 194.91 T
3 10 Q
( is dereferenceable or) 371.75 194.91 T
4 9 Q
(r) 460.04 194.91 T
3 10 Q
( is past-the-) 465.44 194.91 T
(end.) 344.4 182.91 T
4 9 Q
(&r == &++r.) 344.4 171.57 T
(r++) 92.4 152.57 T
(X) 150 152.57 T
({ X tmp = r;) 243.6 152.57 T
(++r;) 253.8 141.57 T
(return tmp; }) 253.8 130.57 T
86.4 388.32 86.4 123.82 2 L
V
0.5 H
0 Z
N
144 388.82 144 123.32 2 L
V
N
237.6 388.82 237.6 123.32 2 L
V
N
338.4 388.82 338.4 123.32 2 L
V
N
525.6 388.32 525.6 123.82 2 L
V
N
86.15 388.57 525.85 388.57 2 L
V
N
86.65 353.82 525.35 353.82 2 L
V
N
86.65 351.32 525.35 351.32 2 L
V
N
86.15 321.57 525.85 321.57 2 L
V
N
86.15 291.57 525.85 291.57 2 L
V
N
86.15 271.57 525.85 271.57 2 L
V
N
86.15 251.57 525.85 251.57 2 L
V
N
86.15 219.57 525.85 219.57 2 L
V
N
86.15 164.57 525.85 164.57 2 L
V
N
86.15 123.57 525.85 123.57 2 L
V
N
52 655 54 665 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 9
%%Page: "8" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(8) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
5 F
0 X
1.28 (an lvalue type) 72 713.33 P
2 F
1.28 (. These algorithms can be used with istreams as the source of the input data through the) 131.22 713.33 P
4 9 Q
(istream_iterator) 72 701.33 T
2 10 Q
( class.) 158.4 701.33 T
0 11 Q
(5.2 Output iterators) 72 677.98 T
2 10 Q
0.23 (A class or a built-in type) 72 660.9 P
4 9 Q
0.49 (X) 183.71 660.9 P
2 10 Q
0.23 ( satisfies the requirements of an output iterator if the following expressions are) 189.11 660.9 P
(valid:) 72 648.9 T
7 F
1.11 (NOTE:) 72 418.91 P
2 F
1.11 ( The only valid use of an) 103.94 418.91 P
4 9 Q
2.39 (operator*) 222.92 418.91 P
2 10 Q
1.11 ( is on the left side of the assignment statement.) 271.52 418.91 P
5 F
1.11 (Assignment) 491.1 418.91 P
0.16 (through the same value of the iterator happens only once) 72 406.91 P
2 F
0.16 (. Algorithms on output iterators should never attempt) 300.02 406.91 P
0.05 (to pass through the same iterator twice. They should be) 72 394.91 P
5 F
0.05 (single pass) 320.32 394.91 P
2 F
0.05 ( algorithms. Equality and inequality are) 363.98 394.91 P
-0.14 (not necessarily defined. Algorithms that take output iterators can be used with ostreams as the destination) 72 382.91 P
-0.21 (for placing data through the) 72 370.91 P
4 9 Q
-0.45 (ostream_iterator) 197.99 370.91 P
2 10 Q
-0.21 ( class as well as with insert iterators and insert pointers. In) 284.39 370.91 P
0.33 (particular, the following two conditions should hold: first, any iterator value should be assigned through) 72 358.91 P
0.38 (before it is incremented \050this is, for an output iterator) 72 346.91 P
4 9 Q
0.81 (i) 312.83 346.91 P
2 10 Q
0.38 (,) 318.23 346.91 P
4 9 Q
0.81 (i++; i++) 323.61 346.91 P
2 10 Q
0.38 (; is not a valid code sequence\051; second,) 367.61 346.91 P
0.24 (any value of an output iterator may have at most one active copy at any given time \050for example,) 72 334.91 P
4 9 Q
0.52 (i = j;) 506.56 334.91 P
(*++i = a; *j = b;) 72 322.91 T
2 10 Q
( is not a valid code sequence\051.) 163.8 322.91 T
0 11 Q
(5.3 Forward iterators) 72 299.55 T
2 10 Q
(A class or a built-in type) 72 282.48 T
4 9 Q
(X) 182.34 282.48 T
2 10 Q
( satisfies the requirements of a forward iterator if the following expressions are) 187.74 282.48 T
(valid:) 72 270.48 T
6 12 Q
(T) 208.45 606.57 T
(able 3: Output iterator r) 215.35 606.57 T
(equir) 340.45 606.57 T
(ements) 367.57 606.57 T
3 10 Q
(expression) 101.01 575.9 T
(return type) 172.6 575.9 T
(operational semantics) 244.54 575.9 T
(assertion/note) 400.62 581.9 T
(pre/post-condition) 391.73 569.9 T
4 9 Q
(X\050a\051) 99.6 548.57 T
(*a = t) 344.4 547.9 T
3 10 Q
(is equivalent to) 382.2 547.9 T
4 9 Q
( *X\050a\051 = t) 443.31 547.9 T
3 10 Q
(.) 497.31 547.9 T
(note: a destructor is assumed.) 344.4 535.9 T
4 9 Q
(X u\050a\051;) 99.6 516.57 T
(X u = a;) 99.6 505.57 T
(*a = t) 99.6 486.57 T
3 10 Q
(result is not used) 157.2 485.9 T
4 9 Q
(++r) 99.6 466.57 T
(X&) 157.2 466.57 T
(r++) 99.6 447.57 T
(X) 157.2 446.91 T
3 10 Q
( or) 162.6 446.91 T
4 9 Q
(X&) 175.93 446.91 T
6 12 Q
(T) 204.46 228.14 T
(able 4: Forward iterator r) 211.36 228.14 T
(equir) 344.44 228.14 T
(ements) 371.56 228.14 T
3 10 Q
(expression) 93.82 197.48 T
(return type) 169 197.48 T
(operational semantics) 244.54 197.48 T
(assertion/note) 404.23 203.48 T
(pre/post-condition) 395.33 191.48 T
4 9 Q
(X u;) 92.4 170.14 T
3 10 Q
(note:) 344.4 169.48 T
4 9 Q
(u) 366.9 169.48 T
3 10 Q
( might have a singular value.) 372.3 169.48 T
(note: a destructor is assumed.) 344.4 157.48 T
4 9 Q
(X\050\051) 92.4 138.14 T
3 10 Q
(note:) 344.4 137.48 T
4 9 Q
(X\050\051) 366.9 137.48 T
3 10 Q
( might be singular) 383.1 137.48 T
(.) 455.05 137.48 T
4 9 Q
(X\050a\051) 92.4 118.14 T
(a == X\050a\051.) 344.4 118.14 T
(X u\050a\051;) 92.4 98.14 T
(X u = a;) 92.4 87.14 T
(X u; u = a;) 243.6 98.14 T
3 10 Q
(post:) 344.4 97.48 T
4 9 Q
(u == a.) 366.35 97.48 T
93.6 596.32 93.6 439.82 2 L
V
0.5 H
0 Z
N
151.2 596.82 151.2 439.32 2 L
V
N
237.6 596.82 237.6 439.32 2 L
V
N
338.4 596.82 338.4 439.32 2 L
V
N
518.4 596.32 518.4 439.82 2 L
V
N
93.35 596.57 518.65 596.57 2 L
V
N
93.85 561.82 518.15 561.82 2 L
V
N
93.85 559.32 518.15 559.32 2 L
V
N
93.35 528.57 518.65 528.57 2 L
V
N
93.35 498.57 518.65 498.57 2 L
V
N
93.35 478.57 518.65 478.57 2 L
V
N
93.35 459.57 518.65 459.57 2 L
V
N
93.35 439.57 518.65 439.57 2 L
V
N
86.4 217.89 86.4 80.39 2 L
V
N
144 218.39 144 79.89 2 L
V
N
237.6 218.39 237.6 79.89 2 L
V
N
338.4 218.39 338.4 79.89 2 L
V
N
525.6 217.89 525.6 80.39 2 L
V
N
86.15 218.14 525.85 218.14 2 L
V
N
86.65 183.39 525.35 183.39 2 L
V
N
86.65 180.89 525.35 180.89 2 L
V
N
86.15 150.14 525.85 150.14 2 L
V
N
86.15 130.14 525.85 130.14 2 L
V
N
86.15 110.14 525.85 110.14 2 L
V
N
86.15 80.14 525.85 80.14 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 10
%%Page: "9" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(9) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
7 F
0 X
-0.03 (NOTE:) 72 404.33 P
2 F
-0.03 ( The fact that) 103.94 404.33 P
4 9 Q
-0.05 (r == s) 163.95 404.33 P
2 10 Q
-0.03 ( implies) 196.24 404.33 P
4 9 Q
-0.05 (++r == ++s) 233.8 404.33 P
2 10 Q
-0.03 ( \050which is not true for input and output iterators\051 and the) 287.69 404.33 P
-0.26 (removal on the restrictions on the number of the assignments through the iterator \050which applies to output) 72 392.33 P
(iterators\051 allows the use of multi-pass one-directional algorithms with forward iterators.) 72 380.33 T
0 11 Q
(5.4 Bidirectional iterators) 72 356.98 T
2 10 Q
0.23 (A class or a built-in type) 72 339.91 P
4 9 Q
0.49 (X) 183.7 339.91 P
2 10 Q
0.23 ( satisfies the requirements of a bidirectional iterator if to the table that specifies) 189.1 339.91 P
(forward iterators we add the following lines:) 72 327.91 T
7 F
(NOTE:) 72 109.91 T
2 F
( Bidirectional iterators allow algorithms to move iterators backward as well as forward.) 103.94 109.91 T
4 9 Q
(a == b) 92.4 654 T
3 10 Q
(convertible to) 150 653.33 T
4 9 Q
(bool) 207.77 653.33 T
(==) 344.4 653.33 T
3 10 Q
( is an equivalence relation.) 355.2 653.33 T
4 9 Q
(a != b) 92.4 634 T
3 10 Q
(convertible to) 150 633.33 T
4 9 Q
(bool) 207.77 633.33 T
(!\050a == b\051) 243.6 634 T
(r = a) 92.4 614 T
(X&) 150 613.33 T
3 10 Q
(post:) 344.4 613.33 T
4 9 Q
(r == a.) 366.35 613.33 T
(*a) 92.4 594 T
3 10 Q
(convertible to) 150 593.33 T
4 9 Q
(T) 207.77 593.33 T
3 10 Q
(pre:) 344.4 593.33 T
4 9 Q
(a) 362.45 593.33 T
3 10 Q
( is dereferenceable.) 367.85 593.33 T
4 9 Q
(a == b) 344.4 581.33 T
3 10 Q
( implies) 376.8 581.33 T
4 9 Q
(*a == *b) 411.25 581.33 T
3 10 Q
(.) 454.45 581.33 T
(If) 344.4 569.33 T
4 9 Q
(X) 353.56 569.33 T
3 10 Q
( is mutable,) 358.96 569.33 T
4 9 Q
(*a = t) 407.85 569.33 T
3 10 Q
( is valid.) 440.25 569.33 T
4 9 Q
(++r) 92.4 550 T
(X&) 150 550 T
3 10 Q
(pre:) 344.4 549.33 T
4 9 Q
(r) 362.45 549.33 T
3 10 Q
( is dereferenceable.) 367.85 549.33 T
(post:) 344.4 537.33 T
4 9 Q
(r) 366.35 537.33 T
3 10 Q
( is dereferenceable or) 371.75 537.33 T
4 9 Q
(r) 460.04 537.33 T
3 10 Q
( is past-the-) 465.44 537.33 T
(end.) 344.4 525.33 T
4 9 Q
(r == s) 344.4 513.33 T
3 10 Q
( and) 376.8 513.33 T
4 9 Q
(r) 396.24 513.33 T
3 10 Q
( is dereferenceable implies) 401.64 513.33 T
4 9 Q
(++r == ++s) 344.4 501.33 T
3 10 Q
(.) 398.4 501.33 T
4 9 Q
(&r == &++r.) 344.4 490 T
(r++) 92.4 471 T
(X) 150 471 T
({ X tmp = r;) 243.6 471 T
(++r;) 253.8 460 T
(return tmp; }) 253.8 449 T
6 12 Q
(T) 110.4 285.57 T
(able 5: Bidir) 117.3 285.57 T
(ectional iterator r) 181.09 285.57 T
(equir) 271.51 285.57 T
(ements \050in addition to forward iterator\051) 298.63 285.57 T
3 10 Q
(expression) 93.82 254.91 T
(return type) 169 254.91 T
(operational semantics) 244.54 254.91 T
(assertion/note) 404.23 260.91 T
(pre/post-condition) 395.33 248.91 T
4 9 Q
(--r) 92.4 227.57 T
(X&) 150 227.57 T
3 10 Q
(pre: there exists) 344.4 226.91 T
4 9 Q
(s) 410.22 226.91 T
3 10 Q
( such that) 415.62 226.91 T
4 9 Q
(r == ++s.) 456.45 226.91 T
3 10 Q
(post:) 344.4 214.91 T
4 9 Q
(s) 366.35 214.91 T
3 10 Q
( is dereferenceable.) 371.75 214.91 T
4 9 Q
(--\050++r\051 == r) 344.4 202.91 T
3 10 Q
(.) 408.65 202.91 T
4 9 Q
(--r == --s) 344.4 190.91 T
3 10 Q
( implies) 398.4 190.91 T
4 9 Q
(r == s) 432.85 190.91 T
3 10 Q
(.) 465.25 190.91 T
4 9 Q
(&r == &--r) 344.4 178.91 T
3 10 Q
(.) 397.85 178.91 T
4 9 Q
(r--) 92.4 159.57 T
(X) 150 159.57 T
({ X tmp = r;) 243.6 159.57 T
(--r;) 253.8 148.57 T
(return tmp; }) 253.8 137.57 T
6 12 Q
(T) 204.46 712 T
(able 4: Forward iterator r) 211.36 712 T
(equir) 344.44 712 T
(ements) 371.56 712 T
3 10 Q
(expression) 93.82 681.33 T
(return type) 169 681.33 T
(operational semantics) 244.54 681.33 T
(assertion/note) 404.23 687.33 T
(pre/post-condition) 395.33 675.33 T
86.4 701.75 86.4 442.25 2 L
V
0.5 H
0 Z
N
144 702.25 144 441.75 2 L
V
N
237.6 702.25 237.6 441.75 2 L
V
N
338.4 702.25 338.4 441.75 2 L
V
N
525.6 701.75 525.6 442.25 2 L
V
N
86.15 702 525.85 702 2 L
V
N
86.65 667.25 525.35 667.25 2 L
V
N
86.65 664.75 525.35 664.75 2 L
V
N
86.15 646 525.85 646 2 L
V
N
86.15 626 525.85 626 2 L
V
N
86.15 606 525.85 606 2 L
V
N
86.15 562 525.85 562 2 L
V
N
86.15 483 525.85 483 2 L
V
N
86.15 442 525.85 442 2 L
V
N
86.4 275.32 86.4 130.82 2 L
V
N
144 275.82 144 130.32 2 L
V
N
237.6 275.82 237.6 130.32 2 L
V
N
338.4 275.82 338.4 130.32 2 L
V
N
525.6 275.32 525.6 130.82 2 L
V
N
86.15 275.57 525.85 275.57 2 L
V
N
86.65 240.82 525.35 240.82 2 L
V
N
86.65 238.32 525.35 238.32 2 L
V
N
86.15 171.57 525.85 171.57 2 L
V
N
86.15 130.57 525.85 130.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 11
%%Page: "10" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(10) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(5.5 Random access iterators) 72 711.98 T
2 10 Q
-0.22 (A class or a built-in type) 72 694.9 P
4 9 Q
-0.49 (X) 180.99 694.9 P
2 10 Q
-0.22 ( satisfies the requirements of a random access iterator if to the table that specifies) 186.39 694.9 P
(bidirectional iterators we add the following lines:) 72 682.9 T
0 11 Q
(5.6 Iterator tags) 72 275.55 T
2 10 Q
-0.04 (To implement algorithms only in terms of iterators, it is often necessary to infer both of the value type and) 72 258.48 P
0.46 (the distance type from the iterator. To enable this task it is required that for an iterator) 72 246.48 P
4 9 Q
0.99 (i) 462.53 246.48 P
2 10 Q
0.46 ( of any category) 467.93 246.48 P
4.53 (other than output iterator) 72 234.48 P
4 9 Q
9.79 (,) 198.9 234.48 P
2 10 Q
4.53 ( the expression) 204.3 234.48 P
4 9 Q
9.79 (value_type\050i\051) 286.64 234.48 P
2 10 Q
4.53 ( returns) 356.83 234.48 P
4 9 Q
9.79 (\050T*\051\0500\051) 402.94 234.48 P
2 10 Q
4.53 ( and the expression) 440.74 234.48 P
4 9 Q
(distance_type\050i\051) 72 222.48 T
2 10 Q
( returns) 158.4 222.48 T
4 9 Q
(\050Distance*\051\0500\051) 195.44 222.48 T
2 10 Q
(. For output iterators, these expressions are not required.) 271.04 222.48 T
9 F
(5.6.1 Examples of using iterator tags) 72 201.85 T
2 F
(For all the regular pointer types we can define) 72 185 T
4 9 Q
(value_type) 278.55 185 T
2 10 Q
( and) 332.55 185 T
4 9 Q
(distance_type) 354.48 185 T
2 10 Q
( with the help of:) 424.68 185 T
4 9 Q
(template <class T>) 108 162.66 T
(inline T* value_type\050const T*\051 { return \050T*\051\0500\051; }) 108 151.66 T
(template <class T>) 108 129.66 T
(inline ptrdiff_t* distance_type\050const T*\051 { return \050ptrdiff_t*\051\0500\051; }) 108 118.66 T
2 10 Q
(Then, if we want to implement a generic) 72 100 T
4 9 Q
(reverse) 252.98 100 T
2 10 Q
( function, we do the following:) 290.78 100 T
4 9 Q
(template <class BidirectionalIterator>) 108 77.66 T
6 12 Q
(T) 92.9 640.57 T
(able 6: Random access iterator r) 99.8 640.57 T
(equir) 265.88 640.57 T
(ements \050in addition to bidir) 293 640.57 T
(ectional iterator\051) 432.8 640.57 T
3 10 Q
(expression) 83.01 609.9 T
(return type) 158.2 609.9 T
(operational semantics) 244.54 609.9 T
(assertion/note) 415.02 615.9 T
(pre/post-condition) 406.14 603.9 T
4 9 Q
(r += n) 81.6 582.57 T
(X&) 139.2 582.57 T
({ Distance m = n;) 232.8 582.57 T
(if \050m >= 0\051) 243 571.57 T
-0.8 (while \050m--\051 ++r;) 253.8 560.57 P
(else) 243 549.57 T
-0.8 (while \050m++\051 --r;) 253.8 538.57 P
(return r; }) 243 527.57 T
(a + n) 81.6 508.57 T
(n + a) 81.6 497.57 T
(X) 139.2 508.57 T
({ X tmp = a;) 232.8 508.57 T
(return tmp += n; }) 243 497.57 T
(a + n == n + a) 355.2 507.9 T
3 10 Q
(.) 430.8 507.9 T
4 9 Q
(r -= n) 81.6 478.57 T
(X&) 139.2 478.57 T
(return r += -n;) 243 478.57 T
(a - n) 81.6 458.57 T
(X) 139.2 458.57 T
({ X tmp = a;) 232.8 458.57 T
(return tmp -= n; }) 243 447.57 T
(b - a) 81.6 428.57 T
(Distance) 139.2 428.57 T
3 10 Q
(pre: there exists a value) 355.2 427.9 T
4 9 Q
(n) 452.12 427.9 T
3 10 Q
( of) 457.52 427.9 T
4 9 Q
(Distance) 470.85 427.9 T
3 10 Q
(such that) 355.2 415.9 T
4 9 Q
(a + n = b) 393.53 415.9 T
3 10 Q
(.) 442.13 415.9 T
4 9 Q
(b == a + \050b - a\051.) 355.2 404.57 T
(a[n]) 81.6 385.57 T
3 10 Q
(convertible to) 139.2 384.9 T
4 9 Q
(T) 196.97 384.9 T
(*\050a + n\051) 232.8 385.57 T
(a < b) 81.6 365.57 T
3 10 Q
(convertible to) 139.2 364.9 T
4 9 Q
(bool) 196.97 364.9 T
(b - a > 0) 232.8 365.57 T
(<) 355.2 364.9 T
3 10 Q
(is a total ordering relation) 366 364.9 T
4 9 Q
(a > b) 81.6 345.57 T
3 10 Q
(convertible to) 139.2 344.91 T
4 9 Q
(bool) 196.97 344.91 T
(b < a) 232.8 345.57 T
(>) 355.2 345.57 T
3 10 Q
(is a total ordering relation opposite to) 366 345.57 T
4 9 Q
(<.) 518.49 345.57 T
(a >= b) 81.6 325.57 T
3 10 Q
(convertible to) 139.2 324.91 T
4 9 Q
(bool) 196.97 324.91 T
(!\050a < b\051) 232.8 325.57 T
(a <= b) 81.6 305.57 T
3 10 Q
(convertible to) 139.2 304.91 T
4 9 Q
(bool) 196.97 304.91 T
(!\050a > b\051) 232.8 305.57 T
75.6 630.32 75.6 297.82 2 L
V
0.5 H
0 Z
N
133.2 630.82 133.2 297.32 2 L
V
N
226.8 630.82 226.8 297.32 2 L
V
N
349.2 630.82 349.2 297.32 2 L
V
N
536.4 630.32 536.4 297.82 2 L
V
N
75.35 630.57 536.65 630.57 2 L
V
N
75.85 595.82 536.15 595.82 2 L
V
N
75.85 593.32 536.15 593.32 2 L
V
N
75.35 520.57 536.65 520.57 2 L
V
N
75.35 490.57 536.65 490.57 2 L
V
N
75.35 470.57 536.65 470.57 2 L
V
N
75.35 440.57 536.65 440.57 2 L
V
N
75.35 397.57 536.65 397.57 2 L
V
N
75.35 377.57 536.65 377.57 2 L
V
N
75.35 357.57 536.65 357.57 2 L
V
N
75.35 337.57 536.65 337.57 2 L
V
N
75.35 317.57 536.65 317.57 2 L
V
N
75.35 297.57 536.65 297.57 2 L
V
N
52 425.57 54 434.57 R
V
52 401.57 54 434.57 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 12
%%Page: "11" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(11) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(inline void reverse\050BidirectionalIterator first, BidirectionalIterator last\051 {) 108 714 T
(__reverse\050first, last, value_type\050first\051, distance_type\050first\051\051;) 144 703 T
(}) 108 692 T
2 10 Q
(where) 72 673.33 T
4 9 Q
(__reverse) 102.19 673.33 T
2 10 Q
( is defined as:) 150.79 673.33 T
4 9 Q
(template <class BidirectionalIterator, class T, class Distance>) 108 651 T
(void __reverse\050BidirectionalIterator first,) 108 640 T
(BidirectionalIterator last,) 345.6 640 T
(T*,) 496.8 640 T
( Distance*\051 {) 180 629 T
(Distance n;) 144 618 T
(distance\050first, last, n\051; // see) 144 607 T
8 F
(Iterator operations) 322.2 607 T
4 F
( section) 424.8 607 T
(--n;) 144 596 T
(while \050n > 0\051 {) 144 585 T
(T tmp = *first;) 180 574 T
(*first++ = *--last;) 180 563 T
(*last = tmp;) 180 552 T
(n -= 2;) 180 541 T
(}) 144 530 T
(}) 108 519 T
2 10 Q
0.18 (If there is an additional pointer type) 72 500.33 P
4 9 Q
0.38 (__huge) 235.34 500.33 P
2 10 Q
0.18 ( such that the difference of two) 267.74 500.33 P
4 9 Q
0.38 (__huge) 408.34 500.33 P
2 10 Q
0.18 ( pointers is of the type) 440.74 500.33 P
4 9 Q
(long long) 72 488.33 T
2 10 Q
(, we define:) 120.6 488.33 T
4 9 Q
(template <class T>) 108 466 T
(inline T* value_type\050const T __huge *\051 { return \050T*\051\0500\051; }) 108 455 T
(template <class T>) 108 433 T
(inline long long* distance_type\050const T __huge *\051 { return \050long long*\051\0500\051; }) 108 422 T
2 10 Q
1.08 (It is often desirable for a template function to find out what is the most specific category of its iterator) 72 403.33 P
-0.04 (argument, so that the function can select the most efficient algorithm at compile time. To facilitate this, the) 72 391.33 P
-0.39 (library introduces) 72 379.33 P
5 F
-0.39 (category tag) 153.03 379.33 P
2 F
-0.39 ( classes which are used as compile time tags for algorithm selection. They are:) 201.97 379.33 P
4 9 Q
3.46 (input_iterator_tag) 72 367.33 P
2 10 Q
1.6 (,) 169.2 367.33 P
4 9 Q
3.46 (output_iterator_tag) 175.8 367.33 P
2 10 Q
1.6 (,) 278.4 367.33 P
4 9 Q
3.46 (forward_iterator_tag) 285 367.33 P
2 10 Q
1.6 (,) 393 367.33 P
4 9 Q
3.46 (bidirectional_iterator_tag) 399.6 367.33 P
2 10 Q
1.31 (and) 72 355.33 P
4 9 Q
2.84 (random_access_iterator_tag) 92.74 355.33 P
2 10 Q
1.31 (. Every iterator) 233.14 355.33 P
4 9 Q
2.84 (i) 305.72 355.33 P
2 10 Q
1.31 ( must have an expression) 311.12 355.33 P
4 9 Q
2.84 (iterator_category\050i\051) 432 355.33 P
2 10 Q
-0.12 (defined on it that returns the most specific category tag that describes its behavior. For example, we define) 72 343.33 P
(that all the pointer types are in the random access iterator category by:) 72 331.33 T
4 9 Q
(template <class T>) 108 309 T
(inline random_access_iterator_tag iterator_category\050const T*\051 {) 108 298 T
(return random_access_iterator_tag\050\051;) 144 287 T
(}) 108 276 T
2 10 Q
-0.13 (For a user-defined iterator) 72 257.33 P
4 9 Q
-0.29 (BinaryTreeIterator) 190.21 257.33 P
2 10 Q
-0.13 (, it can be included into the bidirectional iterator category) 287.41 257.33 P
(by saying:) 72 245.33 T
4 9 Q
(template <class T>) 108 223 T
(inline bidirectional_iterator_tag iterator_category\050) 108 212 T
(const BinaryTreeIterator<T>&\051 {) 180 201 T
(return bidirectional_iterator_tag\050\051;) 144 190 T
(}) 108 179 T
2 10 Q
1.33 (If a template function) 72 160.33 P
4 9 Q
2.88 (evolve) 174.95 160.33 P
2 10 Q
1.33 ( is well defined for bidirectional iterators, but can be implemented more) 207.35 160.33 P
(efficiently for random access iterators, then the implementation is like:) 72 148.33 T
4 9 Q
(template <class BidirectionalIterator>) 108 126 T
(inline void evolve\050BidirectionalIterator first, BidirectionalIterator last\051) 108 115 T
(evolve\050first, last, iterator_category\050first\051\051;) 144 104 T
(}) 108 93 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 13
%%Page: "12" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(12) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class BidirectionalIterator>) 108 714 T
(void evolve\050BidirectionalIterator first, BidirectionalIterator last,) 108 703 T
(bidirectional_iterator_tag\051 {) 180 692 T
(// ... more generic, but less efficient algorithm) 144 681 T
(}) 108 670 T
(template <class RandomAccessIterator>) 108 648 T
(void evolve\050RandomAccessIterator first, RandomAccessIterator last,) 108 637 T
(random_access_iterator_tag\051 {) 180 626 T
(// ... more efficient, but less generic algorithm) 144 615 T
(}) 108 604 T
9 10 Q
(5.6.2 Library defined primitives) 72 583.71 T
2 F
2.56 (To simplify the task of defining the) 72 566.85 P
4 9 Q
5.52 (iterator_category) 247.53 566.85 P
2 10 Q
2.56 (,) 339.33 566.85 P
4 9 Q
5.52 (value_type) 346.89 566.85 P
2 10 Q
2.56 ( and) 400.89 566.85 P
4 9 Q
5.52 (distance_type) 427.93 566.85 P
2 10 Q
2.56 ( for user) 498.14 566.85 P
(definable iterators, the library provides the following predefined classes and functions:) 72 554.85 T
4 9 Q
(// iterator tags) 108 532.52 T
(struct input_iterator_tag {};) 108 510.52 T
(struct output_iterator_tag {};) 108 499.52 T
(struct forward_iterator_tag {};) 108 488.52 T
(struct bidirectional_iterator_tag {};) 108 477.52 T
(struct random_access_iterator_tag {};) 108 466.52 T
(// iterator bases) 108 444.52 T
(template <class T, class Distance = ptrdiff_t> struct input_iterator {};) 108 422.52 T
(struct output_iterator {};) 108 411.52 T
(// output_iterator is not a template because output iterators) 108 400.52 T
(// do not have either value type or distance type defined.) 108 389.52 T
(template <class T, class Distance = ptrdiff_t> struct forward_iterator {};) 108 378.52 T
(template <class T, class Distance = ptrdiff_t> struct bidirectional_iterator {};) 108 367.52 T
(template <class T, class Distance = ptrdiff_t> struct random_access_iterator {};) 108 356.52 T
(// iterator_category) 108 334.52 T
(template <class T, class Distance>) 108 312.52 T
(inline input_iterator_tag) 108 301.52 T
(iterator_category\050const input_iterator<T, Distance>&\051 {) 108 290.52 T
(return input_iterator_tag\050\051;) 144 279.52 T
(}) 108 268.52 T
(inline output_iterator_tag iterator_category\050const output_iterator&\051 {) 108 257.52 T
(return output_iterator_tag\050\051;) 144 246.52 T
(}) 108 235.52 T
(template <class T, class Distance>) 108 224.52 T
(inline forward_iterator_tag) 108 213.52 T
(iterator_category\050const forward_iterator<T, Distance>&\051 {) 108 202.52 T
(return forward_iterator_tag\050\051;) 144 191.52 T
(}) 108 180.52 T
(template <class T, class Distance>) 108 169.52 T
(inline bidirectional_iterator_tag) 108 158.52 T
(iterator_category\050const bidirectional_iterator<T, Distance>&\051 {) 108 147.52 T
(return bidirectional_iterator_tag\050\051;) 144 136.52 T
(}) 108 125.52 T
(template <class T, class Distance>) 108 114.52 T
(inline random_access_iterator_tag) 108 103.52 T
(iterator_category\050const random_access_iterator<T, Distance>&\051 {) 108 92.52 T
(return random_access_iterator_tag\050\051;) 144 81.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 14
%%Page: "13" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(13) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(}) 108 714 T
(template <class T>) 108 703 T
(inline random_access_iterator_tag iterator_category\050const T*\051 {) 108 692 T
(return random_access_iterator_tag\050\051;) 144 681 T
(}) 108 670 T
(// value_type of iterator) 108 648 T
(template <class T, class Distance>) 108 626 T
(inline T* value_type\050const input_iterator<T, Distance>&\051 {) 108 615 T
(return \050T*\051\0500\051;) 144 604 T
(}) 108 593 T
(template <class T, class Distance>) 108 582 T
(inline T* value_type\050const forward_iterator<T, Distance>&\051 {) 108 571 T
(return \050T*\051\0500\051;) 144 560 T
(}) 108 549 T
(template <class T, class Distance>) 108 538 T
(inline T* value_type\050const bidirectional_iterator<T, Distance>&\051 {) 108 527 T
(return \050T*\051\0500\051;) 144 516 T
(}) 108 505 T
(template <class T, class Distance>) 108 494 T
(inline T* value_type\050const random_access_iterator<T, Distance>&\051 {) 108 483 T
(return \050T*\051\0500\051;) 144 472 T
(}) 108 461 T
(template <class T>) 108 450 T
(inline T* value_type\050const T*\051 { return \050T*\051\0500\051; }) 108 439 T
(// distance_type of iterator) 108 417 T
(template <class T, class Distance>) 108 395 T
(inline Distance* distance_type\050const input_iterator<T, Distance>&\051 {) 108 384 T
(return \050Distance*\051\0500\051;) 144 373 T
(}) 108 362 T
(template <class T, class Distance>) 108 351 T
(inline Distance* distance_type\050const forward_iterator<T, Distance>&\051 {) 108 340 T
(return \050Distance*\051\0500\051;) 144 329 T
(}) 108 318 T
(template <class T, class Distance>) 108 307 T
(inline Distance* distance_type\050const bidirectional_iterator<T, Distance>&\051 {) 108 296 T
(return \050Distance*\051\0500\051;) 144 285 T
(}) 108 274 T
(template <class T, class Distance>) 108 263 T
(inline Distance* distance_type\050const random_access_iterator<T, Distance>&\051 {) 108 252 T
(return \050Distance*\051\0500\051;) 144 241 T
(}) 108 230 T
(template <class T>) 108 219 T
(inline ptrdiff_t* distance_type\050const T*\051 { return \050ptrdiff_t*\051\0500\051; }) 108 208 T
2 10 Q
-0.01 (If a user wants to define a bidirectional iterator for some data structure containing) 72 189.33 P
4 9 Q
-0.02 (double) 436.67 189.33 P
2 10 Q
-0.01 ( and such that it) 469.07 189.33 P
(works on a large memory model of a computer, it can be done by defining:) 72 177.33 T
4 9 Q
(class MyIterator : public bidirectional_iterator<double, long> {) 108 155 T
(// code implementing ++, etc.) 144 144 T
(};) 108 133 T
2 10 Q
(Then there is no need to define) 72 114.33 T
4 9 Q
(iterator_category) 211.08 114.33 T
2 10 Q
(,) 302.88 114.33 T
4 9 Q
(value_type) 307.88 114.33 T
2 10 Q
(, and) 361.88 114.33 T
4 9 Q
(distance_type) 386.31 114.33 T
2 10 Q
( on) 456.51 114.33 T
4 9 Q
(MyIterator) 472.79 114.33 T
2 10 Q
(.) 526.79 114.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 15
%%Page: "14" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(14) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(5.7 Iterator operations) 72 711.98 T
2 10 Q
0.08 (Since only random access iterators provide) 72 694.9 P
4 9 Q
0.17 (+) 264.44 694.9 P
2 10 Q
0.08 ( and) 269.84 694.9 P
4 9 Q
0.17 (-) 291.92 694.9 P
2 10 Q
0.08 ( operators, the library provides two template functions) 297.32 694.9 P
4 9 Q
4.2 (advance) 72 682.9 P
2 10 Q
1.95 ( and) 109.8 682.9 P
4 9 Q
4.2 (distance) 135.62 682.9 P
2 10 Q
1.95 (. These functions use) 178.82 682.9 P
4 9 Q
4.2 (+) 281.24 682.9 P
2 10 Q
1.95 ( and) 286.64 682.9 P
4 9 Q
4.2 (-) 312.46 682.9 P
2 10 Q
1.95 ( for random access iterators \050and are, therefore,) 317.86 682.9 P
0.65 (constant time for them\051; for input, forward and bidirectional iterators they use) 72 670.9 P
4 9 Q
1.41 (++) 427.83 670.9 P
2 10 Q
0.65 ( to provide linear time) 438.62 670.9 P
-0.08 (implementations.) 72 658.9 P
4 9 Q
-0.16 (advance) 151.76 658.9 P
2 10 Q
-0.08 ( takes a negative argument) 189.57 658.9 P
4 9 Q
-0.16 (n) 310.56 658.9 P
2 10 Q
-0.08 ( for random access and bidirectional iterators only.) 315.96 658.9 P
4 9 Q
-0.23 (advance) 72 646.9 P
2 10 Q
-0.11 ( increments \050or decrements for negative) 109.8 646.9 P
4 9 Q
-0.23 (n) 287.3 646.9 P
2 10 Q
-0.11 (\051 iterator reference) 292.7 646.9 P
4 9 Q
-0.23 (i) 376.44 646.9 P
2 10 Q
-0.11 ( by) 381.84 646.9 P
4 9 Q
-0.23 (n) 397.72 646.9 P
2 10 Q
-0.11 (.) 403.12 646.9 P
4 9 Q
-0.23 (distance) 408.01 646.9 P
2 10 Q
-0.11 ( increments) 451.21 646.9 P
4 9 Q
-0.23 (n) 504.85 646.9 P
2 10 Q
-0.11 ( by the) 510.25 646.9 P
(number of times it takes to get from) 72 634.9 T
4 9 Q
(first) 232.69 634.9 T
2 10 Q
( to) 259.69 634.9 T
4 9 Q
(last) 273.41 634.9 T
2 10 Q
(.) 295.01 634.9 T
4 9 Q
(template <class InputIterator, class Distance>) 108 612.57 T
(inline void advance\050InputIterator& i, Distance n\051;) 108 601.57 T
(template <class InputIterator, class Distance>) 108 579.57 T
(inline void distance\050InputIterator first, InputIterator last, Distance& n\051;) 108 568.57 T
1.89 (distance) 72 549.9 P
2 10 Q
0.87 ( must be a three argument function storing the result into a reference instead of returning the) 115.2 549.9 P
(result because the distance type cannot be deduced from built-in iterator types such as) 72 537.9 T
4 9 Q
(int*) 456.04 537.9 T
2 10 Q
(.) 477.64 537.9 T
0 12 Q
(6  Function objects) 72 507.82 T
2 10 Q
0.7 (Function objects are objects with an) 72 489.53 P
4 9 Q
1.51 (operator\050\051) 235.5 489.53 P
2 10 Q
0.7 ( defined. They are important for the effective use of the) 289.5 489.53 P
-0.28 (library. In the places where one would expect to pass a pointer to a function to an algorithmic template, the) 72 477.53 P
1.19 (interface is specified to accept an object with an) 72 465.53 P
4 9 Q
2.57 (operator\050\051) 294.64 465.53 P
2 10 Q
1.19 ( defined. This not only makes algorithmic) 348.64 465.53 P
0.37 (templates work with pointers to functions, but also enables them to work with arbitrary function objects.) 72 453.53 P
0.81 (Using function objects together with function templates increases the expressive power of the library as) 72 441.53 P
1.29 (well as making the resulting code much more efficient. For example, if we want to have a by-element) 72 429.53 P
(addition of two vectors) 72 417.53 T
4 9 Q
(a) 177.22 417.53 T
2 10 Q
( and) 182.62 417.53 T
4 9 Q
(b) 204.55 417.53 T
2 10 Q
( containing) 209.95 417.53 T
4 9 Q
(double) 261.95 417.53 T
2 10 Q
( and put the result into) 294.35 417.53 T
4 9 Q
(a) 398.08 417.53 T
2 10 Q
( we can do:) 403.48 417.53 T
4 9 Q
(transform\050a.begin\050\051, a.end\050\051, b.begin\050\051, a.begin\050\051, plus<double>\050\051\051;) 108 395.2 T
2 10 Q
(If we want to negate every element of) 72 376.53 T
4 9 Q
(a) 240.91 376.53 T
2 10 Q
( we can do:) 246.31 376.53 T
4 9 Q
(transform\050a.begin\050\051, a.end\050\051, a.begin\050\051, negate<double>\050\051\051;) 108 354.2 T
2 10 Q
(The corresponding functions will inline the addition and the negation.) 72 335.53 T
0.29 (To enable adaptors and other components to manipulate function objects that take one or two arguments) 72 316.53 P
0.62 (it is required that they correspondingly provide typedefs) 72 304.53 P
4 9 Q
1.35 (argument_type) 331.17 304.53 P
2 10 Q
0.62 ( and) 401.37 304.53 P
4 9 Q
1.35 (result_type) 424.54 304.53 P
2 10 Q
0.62 ( for function) 483.94 304.53 P
-0.39 (objects that take one argument and) 72 292.53 P
4 9 Q
-0.85 (first_argument_type) 226.9 292.53 P
2 10 Q
-0.39 (,) 329.5 292.53 P
4 9 Q
-0.85 (second_argument_type) 334.11 292.53 P
2 10 Q
-0.39 (, and) 442.11 292.53 P
4 9 Q
-0.85 (result_type) 465.75 292.53 P
2 10 Q
-0.39 ( for) 525.15 292.53 P
(function objects that take two arguments.) 72 280.53 T
0 11 Q
(6.1 Base) 72 257.18 T
2 10 Q
(The following classes are provided to simplify the typedefs of the argument and result types:) 72 240.1 T
4 9 Q
(template <class Arg, class Result>) 108 217.77 T
(struct unary_function {) 108 206.77 T
(typedef Arg argument_type;) 144 195.77 T
(typedef Result result_type;) 144 184.77 T
(};) 108 173.77 T
(template <class Arg1, class Arg2, class Result>) 108 151.77 T
(struct binary_function {) 108 140.77 T
(typedef Arg1 first_argument_type;) 144 129.77 T
(typedef Arg2 second_argument_type;) 144 118.77 T
(typedef Result result_type;) 144 107.77 T
(};) 108 96.77 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 16
%%Page: "15" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(15) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(6.2 Arithmetic operations) 72 711.98 T
2 10 Q
(The library provides basic function object classes for all of the arithmetic operators in the language.) 72 694.9 T
4 9 Q
(template <class T>) 108 672.57 T
(struct plus : binary_function<T, T, T> {) 108 661.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x + y; }) 144 650.57 T
(};) 108 639.57 T
(template <class T>) 108 617.57 T
(struct minus : binary_function<T, T, T> {) 108 606.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x - y; }) 144 595.57 T
(};) 108 584.57 T
(template <class T>) 108 562.57 T
(struct times : binary_function<T, T, T> {) 108 551.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x * y; }) 144 540.57 T
(};) 108 529.57 T
(template <class T>) 108 507.57 T
(struct divides : binary_function<T, T, T> {) 108 496.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x / y; }) 144 485.57 T
(};) 108 474.57 T
(template <class T>) 108 452.57 T
(struct modulus : binary_function<T, T, T> {) 108 441.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x % y; }) 144 430.57 T
(};) 108 419.57 T
(template <class T>) 108 397.57 T
(struct negate : unary_function<T, T> {) 108 386.57 T
(T operator\050\051\050const T& x\051 const { return -x; }) 144 375.57 T
(};) 108 364.57 T
0 11 Q
(6.3 Comparisons) 72 341.55 T
2 10 Q
(The library provides basic function object classes for all of the comparison operators in the language.) 72 324.48 T
4 9 Q
(template <class T>) 108 302.14 T
(struct equal_to : binary_function<T, T, bool> {) 108 291.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x == y; }) 144 280.14 T
(};) 108 269.14 T
(template <class T>) 108 247.14 T
(struct not_equal_to : binary_function<T, T, bool> {) 108 236.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x != y; }) 144 225.14 T
(};) 108 214.14 T
(template <class T>) 108 192.14 T
(struct greater : binary_function<T, T, bool> {) 108 181.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x > y; }) 144 170.14 T
(};) 108 159.14 T
(template <class T>) 108 137.14 T
(struct less : binary_function<T, T, bool> {) 108 126.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x < y; }) 144 115.14 T
(};) 108 104.14 T
(template <class T>) 108 82.14 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 17
%%Page: "16" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(16) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(struct greater_equal : binary_function<T, T, bool> {) 108 714 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x >= y; }) 144 703 T
(};) 108 692 T
(template <class T>) 108 670 T
(struct less_equal : binary_function<T, T, bool> {) 108 659 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x <= y; }) 144 648 T
(};) 108 637 T
0 11 Q
(6.4 Logical operations) 72 613.98 T
4 9 Q
(template <class T>) 108 593.57 T
(struct logical_and : binary_function<T, T, bool> {) 108 582.57 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x && y; }) 144 571.57 T
(};) 108 560.57 T
(template <class T>) 108 538.57 T
(struct logical_or : binary_function<T, T, bool> {) 108 527.57 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x || y; }) 144 516.57 T
(};) 108 505.57 T
(template <class T>) 108 483.57 T
(struct logical_not : unary_function<T, bool> {) 108 472.57 T
(bool operator\050\051\050const T& x\051 const { return !x; }) 144 461.57 T
(};) 108 450.57 T
0 12 Q
(7  Allocators) 72 420.82 T
2 10 Q
-0.02 (One of the common problems in portability is to be able to encapsulate the information about the memory) 72 402.53 P
0.36 (model. This information includes the knowledge of pointer types, the type of their difference, the type of) 72 390.53 P
-0.52 (the size of objects in this memory model, as well as the memory allocation and deallocation primitives for it.) 72 378.53 P
-0.56 (STL addresses this problem by providing a standard set of requirements for) 72 359.53 P
5 F
-0.56 (allocators) 402.75 359.53 P
2 F
-0.56 (, which are objects that) 441.25 359.53 P
0.83 (encapsulate this information. All of the containers in STL are parameterized in terms of allocators. That) 72 347.53 P
(dramatically simplifies the task of dealing with multiple memory models.) 72 335.53 T
0 11 Q
(7.1 Allocator requirements) 72 312.18 T
2 10 Q
0.33 (In the following table, we assume) 72 295.1 P
4 9 Q
0.71 (X) 224.98 295.1 P
2 10 Q
0.33 ( is an allocator class for objects of type) 230.38 295.1 P
4 9 Q
0.71 (T) 404.24 295.1 P
2 10 Q
0.33 (,) 409.64 295.1 P
4 9 Q
0.71 (a) 414.96 295.1 P
2 10 Q
0.33 ( is a value of) 420.36 295.1 P
4 9 Q
0.71 (X) 479.83 295.1 P
2 10 Q
0.33 (,) 485.23 295.1 P
4 9 Q
0.71 (n) 490.55 295.1 P
2 10 Q
0.33 ( is of type) 495.95 295.1 P
4 9 Q
-0.33 (X::size_type) 72 283.1 P
2 10 Q
-0.15 (,) 136.8 283.1 P
4 9 Q
-0.33 (p) 141.65 283.1 P
2 10 Q
-0.15 ( is of type) 147.05 283.1 P
4 9 Q
-0.33 (X::pointer) 191.99 283.1 P
2 10 Q
-0.15 (,) 245.99 283.1 P
4 9 Q
-0.33 (r) 250.84 283.1 P
2 10 Q
-0.15 ( is of type) 256.24 283.1 P
4 9 Q
-0.33 (X::reference) 301.18 283.1 P
2 10 Q
-0.15 ( and) 365.98 283.1 P
4 9 Q
-0.33 (s) 387.61 283.1 P
2 10 Q
-0.15 ( is of type) 393.01 283.1 P
4 9 Q
-0.33 (X::const_reference) 437.95 283.1 P
2 10 Q
-0.15 (.) 535.15 283.1 P
(All the operations on the allocators are expected to be amortized constant time.) 72 264.1 T
6 12 Q
(T) 224.28 240.77 T
(able 7: Allocator r) 231.18 240.77 T
(equir) 324.61 240.77 T
(ements) 351.73 240.77 T
3 10 Q
(expression) 108.21 210.1 T
(return type) 223 210.1 T
(assertion/note) 393.42 216.1 T
(pre/post-condition) 384.54 204.1 T
4 9 Q
(X::value_type) 78 182.77 T
(T) 193.2 182.77 T
(X::reference) 78 162.77 T
3 10 Q
(lvalue of) 193.2 162.1 T
4 9 Q
(T) 230.97 162.1 T
(X::const_reference) 78 142.77 T
3 10 Q
(const lvalue of) 193.2 142.1 T
4 9 Q
(T) 254.58 142.1 T
(X::pointer) 78 122.77 T
3 10 Q
(pointer to) 193.2 122.1 T
4 9 Q
(T) 234.31 122.1 T
3 10 Q
( type) 239.71 122.1 T
-0.2 (the result of) 308.4 122.1 P
4 9 Q
-0.43 (operator*) 358.08 122.1 P
3 10 Q
-0.2 ( of values of) 406.68 122.1 P
4 9 Q
-0.43 (X::pointer) 458.09 122.1 P
3 10 Q
-0.2 ( is of) 512.09 122.1 P
4 9 Q
(reference.) 308.4 110.1 T
72 230.52 72 103.02 2 L
V
0.5 H
0 Z
N
187.2 231.02 187.2 102.52 2 L
V
N
302.4 231.02 302.4 102.52 2 L
V
N
540 230.52 540 103.02 2 L
V
N
71.75 230.77 540.25 230.77 2 L
V
N
72.25 196.02 539.75 196.02 2 L
V
N
72.25 193.52 539.75 193.52 2 L
V
N
71.75 174.77 540.25 174.77 2 L
V
N
71.75 154.77 540.25 154.77 2 L
V
N
71.75 134.77 540.25 134.77 2 L
V
N
71.75 102.77 540.25 102.77 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 18
%%Page: "17" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(17) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.64 (pointer) 72 251.33 P
2 10 Q
-0.3 ( belongs to the category of mutable random access iterators referring to) 109.8 251.33 P
4 9 Q
-0.64 (T) 423.19 251.33 P
2 10 Q
-0.3 (.) 428.59 251.33 P
4 9 Q
-0.64 (const_pointer) 433.29 251.33 P
2 10 Q
-0.3 ( belongs) 503.49 251.33 P
1.56 (to the category of constant random access iterators referring to) 72 239.33 P
4 9 Q
3.36 (T) 366.17 239.33 P
2 10 Q
1.56 (. There is a conversion defined from) 371.57 239.33 P
4 9 Q
(pointer) 72 227.33 T
2 10 Q
( to) 109.8 227.33 T
4 9 Q
(const_pointer) 123.52 227.33 T
2 10 Q
(.) 193.72 227.33 T
-0.27 (For any allocator template) 72 208.33 P
4 9 Q
-0.57 (Alloc) 189.53 208.33 P
2 10 Q
-0.27 ( there is a specialization for type) 216.53 208.33 P
4 9 Q
-0.57 (void) 359.94 208.33 P
2 10 Q
-0.27 (.) 381.54 208.33 P
4 9 Q
-0.57 (Alloc<void>) 386.28 208.33 P
2 10 Q
-0.27 ( has only constructor,) 445.68 208.33 P
4.77 (destructor, and) 72 196.33 P
4 9 Q
10.3 (Alloc<void>::pointer) 151.45 196.33 P
2 10 Q
4.77 ( defined. Conversions are defined from any instance of) 259.45 196.33 P
4 9 Q
18.23 (Alloc<T>::pointer) 72 184.33 P
2 10 Q
8.44 ( into) 163.8 184.33 P
4 9 Q
18.23 (Alloc<void>::pointer) 203.13 184.33 P
2 10 Q
8.44 ( and back so that for any) 311.13 184.33 P
4 9 Q
18.23 (p) 481.33 184.33 P
2 10 Q
8.44 (,) 486.73 184.33 P
4 9 Q
18.23 (p ==) 500.17 184.33 P
(Alloc<T>::pointer\050Alloc<void>::pointer\050p\051\051) 72 172.33 T
2 10 Q
(.) 298.8 172.33 T
0 11 Q
(7.2 The default allocator) 72 148.98 T
4 9 Q
(template <class T>) 108 128.57 T
(class allocator {) 108 117.57 T
(public:) 108 106.57 T
(typedef T* pointer;) 144 95.57 T
(typedef const T* const_pointer;) 144 84.57 T
(X::const_pointer) 78 654 T
3 10 Q
(pointer to) 193.2 653.33 T
4 9 Q
( const T) 231.81 653.33 T
3 10 Q
( type) 275.01 653.33 T
(the result of) 308.4 653.33 T
4 9 Q
(operator*) 358.67 653.33 T
3 10 Q
( of values of) 407.27 653.33 T
4 9 Q
(X::const_pointer) 308.4 641.33 T
3 10 Q
( is of) 394.8 641.33 T
4 9 Q
(const_reference;) 417.3 641.33 T
3 10 Q
-0.16 (it is the same type of pointer as) 308.4 629.33 P
4 9 Q
-0.34 (X::pointer) 434.34 629.33 P
3 10 Q
-0.16 (, in particu-) 487.94 629.33 P
(lar) 308.4 617.33 T
(,) 318.55 617.33 T
4 9 Q
(sizeof\050X::const_pointer\051 ==) 323.55 617.33 T
(sizeof\050X::pointer\051.) 308.4 605.33 T
(X::size_type) 78 586 T
3 10 Q
(unsigned integral type) 193.2 585.33 T
(the type that can represent the size of the lar) 308.4 585.33 T
(gest object) 484.56 585.33 T
(in the memory model.) 308.4 573.33 T
4 9 Q
(X::difference_type) 78 554 T
3 10 Q
(signed integral type) 193.2 553.33 T
(the type that can represent the dif) 308.4 553.33 T
(ference between any) 441.52 553.33 T
(two pointers in the memory model.) 308.4 541.33 T
4 9 Q
(X a;) 78 522 T
3 10 Q
(note: a destructor is assumed.) 308.4 521.33 T
4 9 Q
(a.address\050r\051) 78 502 T
(pointer) 193.2 502 T
(*\050a.address\050r\051\051 == r) 308.4 501.33 T
3 10 Q
(.) 415.85 501.33 T
4 9 Q
(a.const_address\050s\051) 78 482 T
(const_pointer) 193.2 482 T
(*\050a.address\050s\051\051 == s) 308.4 481.33 T
3 10 Q
(.) 416.4 481.33 T
4 9 Q
(a.allocate\050n\051) 78 462 T
(X::pointer) 193.2 462 T
3 10 Q
(memory is allocated for) 308.4 461.33 T
4 9 Q
(n) 406.16 461.33 T
3 10 Q
( objects of type) 411.56 461.33 T
4 9 Q
(T) 475.44 461.33 T
3 10 Q
( but objects) 480.84 461.33 T
-0.28 (are not constructed.) 308.4 449.33 P
4 9 Q
-0.61 (allocate) 388.64 449.33 P
3 10 Q
-0.28 ( may raise an appropriate) 431.84 449.33 P
(exception.) 308.4 437.33 T
4 9 Q
(a.deallocate\050p\051) 78 418 T
3 10 Q
(result is not used) 193.2 417.33 T
(all the objects in the area pointed by) 308.4 417.33 T
4 9 Q
(p) 455.6 417.33 T
3 10 Q
( should be) 461 417.33 T
(destroyed prior to the call of the deallocate.) 308.4 405.33 T
4 9 Q
(construct\050p, a\051) 78 386 T
(void) 193.2 386 T
3 10 Q
(post:) 308.4 385.33 T
4 9 Q
(*p == a) 330.35 385.33 T
3 10 Q
(.) 368.15 385.33 T
4 9 Q
(destroy\050p\051) 78 366 T
(void) 193.2 366 T
3 10 Q
(the value pointed by) 308.4 365.33 T
4 9 Q
(p) 392.28 365.33 T
3 10 Q
( is destroyed.) 397.68 365.33 T
4 9 Q
(a.init_page_size\050\051) 78 346 T
(X::size_type) 193.2 346 T
3 10 Q
(the returned value is the optimal value for an initial) 308.4 345.33 T
(buf) 308.4 333.33 T
(fer size of the given type. It is assumed that if) 321.55 333.33 T
4 9 Q
(k) 506.52 333.33 T
3 10 Q
( is) 511.92 333.33 T
(returned by) 308.4 321.33 T
4 9 Q
(init_page_size) 356.72 321.33 T
3 10 Q
(,) 432.32 321.33 T
4 9 Q
(t) 437.32 321.33 T
3 10 Q
( is the construction) 442.72 321.33 T
(time for) 308.4 309.33 T
4 9 Q
(T) 342.84 309.33 T
3 10 Q
(, and) 347.5 309.33 T
4 9 Q
(u) 369.44 309.33 T
3 10 Q
( is the time that it takes to do) 374.84 309.33 T
4 9 Q
(allo-) 492.9 309.33 T
(cate\050k\051) 308.4 297.33 T
3 10 Q
(, then) 346.2 297.33 T
4 9 Q
(k * t) 370.92 297.33 T
3 10 Q
( is much greater than) 397.92 297.33 T
4 9 Q
(u) 484.29 297.33 T
3 10 Q
(.) 489.69 297.33 T
4 9 Q
(a.max_size\050\051) 78 278 T
(X::size_type) 193.2 278 T
3 10 Q
(the lar) 308.4 277.33 T
(gest positive value of) 333.49 277.33 T
4 9 Q
(X::difference_type) 421.26 277.33 T
6 12 Q
(T) 224.28 712 T
(able 7: Allocator r) 231.18 712 T
(equir) 324.61 712 T
(ements) 351.73 712 T
3 10 Q
(expression) 108.21 681.33 T
(return type) 223 681.33 T
(assertion/note) 393.42 687.33 T
(pre/post-condition) 384.54 675.33 T
72 701.75 72 270.25 2 L
V
0.5 H
0 Z
N
187.2 702.25 187.2 269.75 2 L
V
N
302.4 702.25 302.4 269.75 2 L
V
N
540 701.75 540 270.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 598 540.25 598 2 L
V
N
71.75 566 540.25 566 2 L
V
N
71.75 534 540.25 534 2 L
V
N
71.75 514 540.25 514 2 L
V
N
71.75 494 540.25 494 2 L
V
N
71.75 474 540.25 474 2 L
V
N
71.75 430 540.25 430 2 L
V
N
71.75 398 540.25 398 2 L
V
N
71.75 378 540.25 378 2 L
V
N
71.75 358 540.25 358 2 L
V
N
71.75 290 540.25 290 2 L
V
N
71.75 270 540.25 270 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 19
%%Page: "18" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(18) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(typedef T& reference;) 144 714 T
(typedef const T& const_reference;) 144 703 T
(typedef T value_type;) 144 692 T
(typedef size_t size_type;) 144 681 T
(typedef ptrdiff_t difference_type;) 144 670 T
(allocator\050\051;) 144 659 T
(~allocator\050\051;) 144 648 T
(pointer address\050reference x\051;) 144 637 T
(const_pointer const_address\050const_reference x\051;) 144 626 T
(pointer allocate\050size_type n\051;) 144 615 T
(void deallocate\050pointer p\051;) 144 604 T
(size_type init_page_size\050\051;) 144 593 T
(size_type max_size\050\051;) 144 582 T
(};) 108 571 T
(class allocator<void> {) 108 549 T
(public:) 108 538 T
(typedef void* pointer;) 144 527 T
(allocator\050\051;) 144 516 T
(~allocator\050\051;) 144 505 T
(};) 108 494 T
2 10 Q
0.04 (In addition to) 72 475.33 P
4 9 Q
0.08 (allocator) 135.1 475.33 P
2 10 Q
0.04 ( the library vendors are expected to provide allocators for all supported memory) 183.7 475.33 P
(models.) 72 463.33 T
0 12 Q
(8  Containers) 72 433.25 T
2 10 Q
1.18 (Containers are objects that store other objects. They control allocation and deallocation of these objects) 72 414.96 P
(through constructors, destructors, insert and erase operations.) 72 402.96 T
-0.14 (In the following table, we assume) 72 383.96 P
4 9 Q
-0.29 (X) 222.19 383.96 P
2 10 Q
-0.14 ( is a container class containing objects of type) 227.59 383.96 P
4 9 Q
-0.29 (T) 428.77 383.96 P
2 10 Q
-0.14 (,) 434.17 383.96 P
4 9 Q
-0.29 (a) 439.04 383.96 P
2 10 Q
-0.14 ( and) 444.43 383.96 P
4 9 Q
-0.29 (b) 466.09 383.96 P
2 10 Q
-0.14 ( are values of) 471.49 383.96 P
4 9 Q
-0.29 (X) 532.1 383.96 P
2 10 Q
-0.14 (,) 537.5 383.96 P
4 9 Q
(u) 72 371.96 T
2 10 Q
( is an identifier and) 77.4 371.96 T
4 9 Q
(r) 165.58 371.96 T
2 10 Q
( is a value of) 170.98 371.96 T
4 9 Q
(X&) 228.8 371.96 T
2 10 Q
(.) 239.6 371.96 T
6 12 Q
(T) 222.28 329.62 T
(able 8: Container r) 229.18 329.62 T
(equir) 326.62 329.62 T
(ements) 353.74 329.62 T
3 10 Q
(expression) 90.21 298.96 T
(return type) 183.4 298.96 T
(operational semantics) 266.14 298.96 T
(assertion/note) 400.62 304.96 T
(pre/post-condition) 391.73 292.96 T
(complex) 501.18 304.96 T
(ity) 513.12 292.96 T
4 9 Q
(X::value_type) 76 271.62 T
(T) 155.2 271.62 T
3 10 Q
(compile) 500.8 270.96 T
(time) 500.8 258.96 T
4 9 Q
(X::reference) 76 239.62 T
3 10 Q
(compile) 500.8 238.96 T
(time) 500.8 226.96 T
4 9 Q
(X::const_refe) 76 207.62 T
(rence) 76 196.62 T
3 10 Q
(compile) 500.8 206.96 T
(time) 500.8 194.96 T
4 9 Q
(X::pointer) 76 175.62 T
3 10 Q
(a pointer type pointing) 155.2 174.96 T
(to) 155.2 162.96 T
4 9 Q
(X::reference) 165.48 162.96 T
3 10 Q
(pointer to) 364 174.96 T
4 9 Q
(T) 405.11 174.96 T
3 10 Q
( in the memory) 410.51 174.96 T
(model used by the container) 364 162.96 T
(compile) 500.8 174.96 T
(time) 500.8 162.96 T
4 9 Q
(X::iterator) 76 143.62 T
3 10 Q
(iterator type pointing to) 155.2 142.96 T
4 9 Q
(X::reference) 155.2 130.96 T
3 10 Q
(an iterator of any iterator cate-) 364 142.96 T
(gory except output iterator) 364 130.96 T
(.) 469.82 130.96 T
(compile) 500.8 142.96 T
(time) 500.8 130.96 T
4 9 Q
(X::const_iter) 76 111.62 T
(ator) 76 100.62 T
3 10 Q
(iterator type pointing to) 155.2 110.96 T
4 9 Q
(X::const_reference) 155.2 98.96 T
3 10 Q
(a constant iterator of any itera-) 364 110.96 T
(tor category except output itera-) 364 98.96 T
(tor) 364 86.96 T
(.) 374.56 86.96 T
(compile) 500.8 110.96 T
(time) 500.8 98.96 T
72 319.37 72 79.87 2 L
V
0.5 H
0 Z
N
151.2 319.87 151.2 79.37 2 L
V
N
259.2 319.87 259.2 79.37 2 L
V
N
360 319.87 360 79.37 2 L
V
N
496.8 319.87 496.8 79.37 2 L
V
N
540 319.37 540 79.87 2 L
V
N
71.75 319.62 540.25 319.62 2 L
V
N
72.25 284.87 539.75 284.87 2 L
V
N
72.25 282.37 539.75 282.37 2 L
V
N
71.75 251.62 540.25 251.62 2 L
V
N
71.75 219.62 540.25 219.62 2 L
V
N
71.75 187.62 540.25 187.62 2 L
V
N
71.75 155.62 540.25 155.62 2 L
V
N
71.75 123.62 540.25 123.62 2 L
V
N
71.75 79.62 540.25 79.62 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 20
%%Page: "19" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(19) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(X::difference) 76 654 T
(_type) 76 643 T
3 10 Q
(signed integral type) 155.2 653.33 T
(is identical to the distance type) 364 653.33 T
(of) 364 641.33 T
4 9 Q
(X::iterator) 374.83 641.33 T
3 10 Q
( and) 434.23 641.33 T
4 9 Q
(X::const_iterator) 364 629.33 T
3 10 Q
(compile) 500.8 653.33 T
(time) 500.8 641.33 T
4 9 Q
(X::) 76 610 T
(size_type) 76 599 T
3 10 Q
(unsigned integral type) 155.2 609.33 T
4 9 Q
(size_type) 364 609.33 T
3 10 Q
( can represent any) 412.6 609.33 T
(non-negative value of) 364 597.33 T
4 9 Q
(difference_type) 364 585.33 T
3 10 Q
(compile) 500.8 609.33 T
(time) 500.8 597.33 T
4 9 Q
(X u;) 76 566 T
3 10 Q
(post:) 364 565.33 T
4 9 Q
(u.size\050\051 == 0.) 385.95 565.33 T
3 10 Q
(constant) 500.8 565.33 T
4 9 Q
(X\050\051) 76 546 T
(X\050\051) 364 545.33 T
3 10 Q
(.) 380.2 545.33 T
4 9 Q
(size\050\051 == 0) 382.7 545.33 T
3 10 Q
(.) 442.1 545.33 T
(constant) 500.8 545.33 T
4 9 Q
(X\050a\051) 76 526 T
(a == X\050a\051.) 364 526 T
3 10 Q
(linear) 500.8 525.33 T
4 9 Q
(X u\050a\051;) 76 506 T
(X u = a;) 76 495 T
(X u; u = a;) 263.2 506 T
3 10 Q
(post:) 364 505.33 T
4 9 Q
(u == a.) 385.95 505.33 T
3 10 Q
(linear) 500.8 505.33 T
4 9 Q
(\050&a\051->~X\050\051) 76 476 T
3 10 Q
(result is not used) 155.2 475.33 T
(post:) 364 475.33 T
4 9 Q
(a.size\050\051 == 0) 385.95 475.33 T
3 10 Q
(.) 456.15 475.33 T
-0.38 (note: the destructor is applied to) 364 463.33 P
(every element of) 364 451.33 T
4 9 Q
(a) 433.7 451.33 T
3 10 Q
( and all the) 439.1 451.33 T
(memory is returned.) 364 439.33 T
(linear) 500.8 475.33 T
4 9 Q
(a.begin\050\051) 76 420 T
(iterator;) 155.2 419.33 T
(const_iterator) 155.2 407.33 T
3 10 Q
(for) 236.2 407.33 T
(constant) 155.2 395.33 T
4 9 Q
(a) 191.03 395.33 T
3 10 Q
(constant) 500.8 419.33 T
4 9 Q
(a.end\050\051) 76 376 T
(iterator;) 155.2 375.33 T
(const_iterator) 155.2 363.33 T
3 10 Q
(for) 236.2 363.33 T
(constant) 155.2 351.33 T
4 9 Q
(a) 191.03 351.33 T
3 10 Q
(constant) 500.8 375.33 T
4 9 Q
(a == b) 76 332 T
3 10 Q
(convertible to) 155.2 331.33 T
4 9 Q
(bool) 212.97 331.33 T
(a.size\050\051 ==) 263.2 332 T
(b.size\050\051 &&) 263.2 321 T
(equal\050a.begin\050\051,) 263.2 310 T
(a.end\050\051,) 263.2 299 T
(b.begin\050\051\051) 263.2 288 T
(==) 364 331.33 T
3 10 Q
( is an equivalence relation.) 374.8 331.33 T
(note:) 364 319.33 T
4 9 Q
(equal) 386.5 319.33 T
3 10 Q
( is de\336ned in the) 413.5 319.33 T
(algorithms section.) 364 307.33 T
(linear) 500.8 331.33 T
4 9 Q
(a != b) 76 269 T
3 10 Q
(convertible to) 155.2 268.33 T
4 9 Q
(bool) 212.97 268.33 T
(!\050a == b\051) 263.2 269 T
3 10 Q
(linear) 500.8 268.33 T
4 9 Q
(r = a) 76 249 T
(X&) 155.2 248.33 T
(if \050&r != &a\051 {) 263.2 249 T
(\050&r\051->X::~X\050\051;) 279 238 T
-1.33 (new \050&r\051 X\050a\051;) 279 227 P
(return r; }) 279 216 T
3 10 Q
(post:) 364 248.33 T
4 9 Q
(r == a.) 385.95 248.33 T
3 10 Q
(linear) 500.8 248.33 T
4 9 Q
(a.size\050\051) 76 197 T
(size_type) 155.2 197 T
(a.end\050\051 -) 263.2 197 T
(a.begin\050\051) 263.2 186 T
3 10 Q
(constant) 500.8 196.33 T
4 9 Q
(a.max_size\050\051) 76 167 T
(size_type) 155.2 167 T
(size\050\051) 364 166.33 T
3 10 Q
( of the lar) 396.4 166.33 T
(gest possible) 434.82 166.33 T
(container) 364 154.33 T
(.) 400.66 154.33 T
(constant) 500.8 166.33 T
4 9 Q
(a.empty\050\051) 76 135 T
3 10 Q
(convertible to) 155.2 134.33 T
4 9 Q
(bool) 212.97 134.33 T
(a.size\050\051 == 0) 263.2 135 T
3 10 Q
(constant) 500.8 134.33 T
6 12 Q
(T) 222.28 712 T
(able 8: Container r) 229.18 712 T
(equir) 326.62 712 T
(ements) 353.74 712 T
3 10 Q
(expression) 90.21 681.33 T
(return type) 183.4 681.33 T
(operational semantics) 266.14 681.33 T
(assertion/note) 400.62 687.33 T
(pre/post-condition) 391.73 675.33 T
(complex) 501.18 687.33 T
(ity) 513.12 675.33 T
72 701.75 72 127.25 2 L
V
0.5 H
0 Z
N
151.2 702.25 151.2 126.75 2 L
V
N
259.2 702.25 259.2 126.75 2 L
V
N
360 702.25 360 126.75 2 L
V
N
496.8 702.25 496.8 126.75 2 L
V
N
540 701.75 540 127.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 622 540.25 622 2 L
V
N
71.75 578 540.25 578 2 L
V
N
71.75 558 540.25 558 2 L
V
N
71.75 538 540.25 538 2 L
V
N
71.75 518 540.25 518 2 L
V
N
71.75 488 540.25 488 2 L
V
N
71.75 432 540.25 432 2 L
V
N
71.75 388 540.25 388 2 L
V
N
71.75 344 540.25 344 2 L
V
N
71.75 281 540.25 281 2 L
V
N
71.75 261 540.25 261 2 L
V
N
71.75 209 540.25 209 2 L
V
N
71.75 179 540.25 179 2 L
V
N
71.75 147 540.25 147 2 L
V
N
71.75 127 540.25 127 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 21
%%Page: "20" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(20) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.18 (The member function) 72 499.33 P
4 9 Q
0.4 (size\050\051) 170.58 499.33 P
2 10 Q
0.18 ( returns the number of elements in the container. Its semantics is defined by) 202.98 499.33 P
(the rules of constructors, inserts, and erases.) 72 487.33 T
4 9 Q
0.53 (begin\050\051) 72 468.33 P
2 10 Q
0.25 ( returns an iterator referring to the first element in the container.) 109.8 468.33 P
4 9 Q
0.53 (end\050\051) 399.25 468.33 P
2 10 Q
0.25 ( returns an iterator which) 426.25 468.33 P
(is the past-the-end value.) 72 456.33 T
1.38 (If the iterator type of a container belongs to the bidirectional or random access iterator categories, the) 72 437.33 P
(container is called) 72 425.33 T
4 9 Q
(reversible) 154.26 425.33 T
2 10 Q
( and satisfies the following additional requirements:) 208.26 425.33 T
4 9 Q
(a < b) 76 654 T
3 10 Q
(convertible to) 155.2 654 T
4 9 Q
(bool) 212.97 654 T
(lexicographical_c) 263.2 653.33 T
(ompare\050a.begin\050\051,) 263.2 641.33 T
(a.end\050\051,) 263.2 629.33 T
(b.begin\050\051,) 263.2 617.33 T
(b.end\050\051\051) 263.2 605.33 T
3 10 Q
(pre:) 364 653.33 T
4 9 Q
(<) 382.05 653.33 T
3 10 Q
( is de\336ned for values of) 387.45 653.33 T
4 9 Q
(T) 484.1 653.33 T
3 10 Q
(.) 488.76 653.33 T
4 9 Q
(<) 364 641.33 T
3 10 Q
( is a total ordering relation.) 369.4 641.33 T
4 9 Q
(lexicographical_compare) 364 629.33 T
3 10 Q
(is de\336ned in the algorithms sec-) 364 617.33 T
(tion.) 364 605.33 T
(linear) 500.8 653.33 T
4 9 Q
(a > b) 76 586 T
3 10 Q
(convertible to) 155.2 586 T
4 9 Q
(bool) 212.97 586 T
(b < a) 263.2 585.33 T
3 10 Q
(linear) 500.8 585.33 T
4 9 Q
(a <= b) 76 566 T
3 10 Q
(convertible to) 155.2 566 T
4 9 Q
(bool) 212.97 566 T
(!\050a > b\051) 263.2 565.33 T
3 10 Q
(linear) 500.8 565.33 T
4 9 Q
(a >= b) 76 546 T
3 10 Q
(convertible to) 155.2 545.33 T
4 9 Q
(bool) 212.97 545.33 T
(!\050a < b\051) 263.2 546 T
3 10 Q
(linear) 500.8 545.33 T
4 9 Q
(a.swap\050b\051) 76 526 T
(void) 155.2 526 T
(swap\050a,b\051) 263.2 526 T
3 10 Q
(constant) 500.8 525.33 T
6 12 Q
(T) 129.78 383 T
(able 9: Reversible container r) 136.68 383 T
(equir) 287.77 383 T
(ements \050in addition to container\051) 314.89 383 T
3 10 Q
(expression) 90.21 352.33 T
(return type) 183.4 352.33 T
(operational semantics) 334.54 352.33 T
(complex) 501.18 358.33 T
(ity) 513.12 346.33 T
4 9 Q
(X::reverse_it) 76 325 T
(erator) 76 314 T
(reverse_iterator<iterator, value_type,) 263.2 325 T
(reference, difference_type>) 263.2 313.33 T
3 10 Q
(for random access iterator) 263.2 301.33 T
4 9 Q
(reverse_bidirectional_iterator<iterator,) 263.2 290 T
(value_type, reference, difference_type>) 263.2 279 T
3 10 Q
(for bidirectional iterator) 263.2 267.33 T
(compile) 500.8 324.33 T
(time) 500.8 312.33 T
4 9 Q
(X::const_reve) 76 248 T
(rse_iterator) 76 237 T
(reverse_iterator<const_iterator,) 263.2 248 T
(value_type, const_reference,) 263.2 237 T
(difference_type>) 263.2 226 T
3 10 Q
(for random access iterator) 263.2 214.33 T
4 9 Q
(reverse_bidirectional_iterator<) 263.2 203 T
(const_iterator, value_type,) 263.2 192 T
(const_reference, difference_type>) 263.2 181 T
3 10 Q
(for bidirectional iterator) 263.2 169.33 T
(compile) 500.8 247.33 T
(time) 500.8 235.33 T
4 9 Q
(a.rbegin\050\051) 76 150 T
(reverse_iterator) 155.2 149.33 T
3 10 Q
(;) 241.6 149.33 T
4 9 Q
(const_reverse_iter) 155.2 137.33 T
(ator) 155.2 125.33 T
3 10 Q
( for constant) 176.8 125.33 T
4 9 Q
(a) 229.29 125.33 T
(reverse_iterator\050end\050\051\051) 263.2 150 T
3 10 Q
(constant) 500.8 149.33 T
4 9 Q
(a.rend\050\051) 76 106 T
(reverse_iterator) 155.2 105.33 T
3 10 Q
(;) 241.6 105.33 T
4 9 Q
(const_reverse_iter) 155.2 93.33 T
(ator) 155.2 81.33 T
3 10 Q
( for constant a) 176.8 81.33 T
4 9 Q
(reverse_iterator\050begin\050\051\051) 263.2 106 T
3 10 Q
(constant) 500.8 105.33 T
6 12 Q
(T) 222.28 712 T
(able 8: Container r) 229.18 712 T
(equir) 326.62 712 T
(ements) 353.74 712 T
3 10 Q
(expression) 90.21 681.33 T
(return type) 183.4 681.33 T
(operational semantics) 266.14 681.33 T
(assertion/note) 400.62 687.33 T
(pre/post-condition) 391.73 675.33 T
(complex) 501.18 687.33 T
(ity) 513.12 675.33 T
72 701.75 72 518.25 2 L
V
0.5 H
0 Z
N
151.2 702.25 151.2 517.75 2 L
V
N
259.2 702.25 259.2 517.75 2 L
V
N
360 702.25 360 517.75 2 L
V
N
496.8 702.25 496.8 517.75 2 L
V
N
540 701.75 540 518.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 598 540.25 598 2 L
V
N
71.75 578 540.25 578 2 L
V
N
71.75 558 540.25 558 2 L
V
N
71.75 538 540.25 538 2 L
V
N
71.75 518 540.25 518 2 L
V
N
72 372.75 72 74.25 2 L
V
N
151.2 373.25 151.2 73.75 2 L
V
N
259.2 373.25 259.2 73.75 2 L
V
N
496.8 373.25 496.8 73.75 2 L
V
N
540 372.75 540 74.25 2 L
V
N
71.75 373 540.25 373 2 L
V
N
72.25 338.25 539.75 338.25 2 L
V
N
72.25 335.75 539.75 335.75 2 L
V
N
71.75 260 540.25 260 2 L
V
N
71.75 162 540.25 162 2 L
V
N
71.75 118 540.25 118 2 L
V
N
71.75 74 540.25 74 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 22
%%Page: "21" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(21) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(8.1 Sequences) 72 711.98 T
2 10 Q
0.54 (A sequence is a kind of container that organizes a finite set of objects, all of the same type, into a strictly) 72 694.9 P
1.72 (linear arrangement. The library provides three basic kinds of sequence containers:) 72 682.9 P
4 9 Q
3.72 (vector) 455.62 682.9 P
2 10 Q
1.72 (,) 488.02 682.9 P
4 9 Q
3.72 (list) 494.75 682.9 P
2 10 Q
1.72 (, and) 516.35 682.9 P
4 9 Q
-0.21 (deque) 72 670.9 P
2 10 Q
-0.1 (. It also provides container adaptors that make it easy to construct abstract data types, such as stacks) 99 670.9 P
(or queues, out of the basic sequence kinds \050or out of other kinds of sequences that the user might define\051.) 72 658.9 T
-0.23 (In the following two tables,) 72 639.9 P
4 9 Q
-0.5 (X) 194.39 639.9 P
2 10 Q
-0.23 ( is a sequence class,) 199.79 639.9 P
4 9 Q
-0.5 (a) 287.1 639.9 P
2 10 Q
-0.23 ( is value of) 292.5 639.9 P
4 9 Q
-0.5 (X) 341.89 639.9 P
2 10 Q
-0.23 (,) 347.29 639.9 P
4 9 Q
-0.5 (i) 352.06 639.9 P
2 10 Q
-0.23 ( and) 357.46 639.9 P
4 9 Q
-0.5 (j) 378.92 639.9 P
2 10 Q
-0.23 ( satisfy input iterator requirements,) 384.32 639.9 P
4 9 Q
2.2 ([i, j\051) 72 627.9 P
2 10 Q
1.02 ( is a valid range,) 106.6 627.9 P
4 9 Q
2.2 (n) 186.55 627.9 P
2 10 Q
1.02 ( is a value of) 191.95 627.9 P
4 9 Q
2.2 (X::size_type) 254.87 627.9 P
2 10 Q
1.02 (,) 319.67 627.9 P
4 9 Q
2.2 (p) 325.69 627.9 P
2 10 Q
1.02 ( is a valid iterator to) 331.09 627.9 P
4 9 Q
2.2 (a) 428.23 627.9 P
2 10 Q
1.02 (,) 433.63 627.9 P
4 9 Q
2.2 (q) 439.65 627.9 P
2 10 Q
1.02 (,) 445.05 627.9 P
4 9 Q
2.2 (q1) 451.07 627.9 P
2 10 Q
1.02 ( and) 461.87 627.9 P
4 9 Q
2.2 (q2) 485.84 627.9 P
2 10 Q
1.02 ( are valid) 496.64 627.9 P
(dereferenceable iterators to) 72 615.9 T
4 9 Q
(a) 194.82 615.9 T
2 10 Q
(,) 200.22 615.9 T
4 9 Q
([q1, q2\051) 205.22 615.9 T
2 10 Q
( is a valid range,) 248.42 615.9 T
4 9 Q
(t) 323.27 615.9 T
2 10 Q
( is a value of) 328.67 615.9 T
4 9 Q
(X::value_type) 386.49 615.9 T
2 10 Q
(.) 456.69 615.9 T
(The complexities of the expressions are sequence dependent.) 72 596.9 T
4 9 Q
5.33 (vector) 72 311.91 P
2 10 Q
2.47 (,) 104.4 311.91 P
4 9 Q
5.33 (list) 111.87 311.91 P
2 10 Q
2.47 (, and) 133.47 311.91 P
4 9 Q
5.33 (deque) 162.84 311.91 P
2 10 Q
2.47 ( offer the programmer different complexity trade-offs and should be used) 189.84 311.91 P
-0.52 (accordingly.) 72 299.91 P
4 9 Q
-1.13 (vector) 128.63 299.91 P
2 10 Q
-0.52 ( is the type of sequence that should be used by default.) 161.04 299.91 P
4 9 Q
-1.13 (list) 399.08 299.91 P
2 10 Q
-0.52 ( should be used when there) 420.68 299.91 P
-0.19 (are frequent insertions and deletions from the middle of the sequence.) 72 287.91 P
4 9 Q
-0.4 (deque) 382.13 287.91 P
2 10 Q
-0.19 ( is the data structure of choice) 409.13 287.91 P
(when most insertions and deletions take place at the beginning or at the end of the sequence.) 72 275.91 T
4 9 Q
(iterator) 72 256.91 T
2 10 Q
( and) 115.2 256.91 T
4 9 Q
(const_iterator) 137.13 256.91 T
2 10 Q
( types for sequences have to be at least of the forward iterator category.) 212.73 256.91 T
6 12 Q
(T) 155.6 554.57 T
(able 10: Sequence r) 162.5 554.57 T
(equir) 261.95 554.57 T
(ements \050in addition to container\051) 289.07 554.57 T
3 10 Q
(expression) 126.21 523.91 T
(return type) 226.6 523.91 T
(assertion/note) 379.02 529.9 T
(pre/post-condition) 370.14 517.91 T
4 9 Q
(X\050n, t\051) 96 496.57 T
(X a\050n, t\051;) 96 485.57 T
3 10 Q
(post:) 297.6 495.91 T
4 9 Q
(size\050\051 == n) 319.55 495.91 T
3 10 Q
(.) 378.95 495.91 T
(constructs a sequence with) 297.6 483.91 T
4 9 Q
(n) 407.02 483.91 T
3 10 Q
( copies of) 412.42 483.91 T
4 9 Q
(t) 453.8 483.91 T
3 10 Q
(.) 459.2 483.91 T
4 9 Q
(X\050i, j\051) 96 464.57 T
(X a\050i, j\051;) 96 453.57 T
3 10 Q
(post:) 297.6 463.91 T
4 9 Q
(size\050\051) 319.55 463.91 T
3 10 Q
( == distance between) 351.95 463.91 T
4 9 Q
(i) 439.32 463.91 T
3 10 Q
( and) 444.72 463.91 T
4 9 Q
(j) 464.16 463.91 T
3 10 Q
(.) 469.56 463.91 T
(constructs a sequence equal to the range) 297.6 451.91 T
4 9 Q
([i, j\051) 460.61 451.91 T
3 10 Q
(.) 493.01 451.91 T
4 9 Q
(a.insert\050p, t\051) 96 432.57 T
(iterator) 211.2 432.57 T
3 10 Q
(inserts a copy of) 297.6 431.91 T
4 9 Q
(t) 365.92 431.91 T
3 10 Q
( before) 371.32 431.91 T
4 9 Q
(p.) 401.86 431.91 T
3 10 Q
(the return value points to the inserted copy) 297.6 419.91 T
(.) 467.76 419.91 T
4 9 Q
(a.insert\050p, n, t\051) 96 400.57 T
3 10 Q
(result is not used) 211.2 399.91 T
(inserts) 297.6 399.91 T
4 9 Q
(n) 326.21 399.91 T
3 10 Q
( copies of) 331.61 399.91 T
4 9 Q
(t) 372.99 399.91 T
3 10 Q
( before) 378.39 399.91 T
4 9 Q
(p) 408.93 399.91 T
3 10 Q
(.) 414.33 399.91 T
4 9 Q
(a.insert\050p, i, j\051) 96 380.57 T
3 10 Q
(result is not used) 211.2 379.91 T
(inserts copies of elements in) 297.6 379.91 T
4 9 Q
([i, j\051) 413.42 379.91 T
3 10 Q
( before) 445.82 379.91 T
4 9 Q
(p) 476.36 379.91 T
3 10 Q
(.) 481.76 379.91 T
4 9 Q
(a.erase\050q\051) 96 360.57 T
3 10 Q
(result is not used) 211.2 359.91 T
(erases the element pointed to by) 297.6 359.91 T
4 9 Q
(q) 428.69 359.91 T
3 10 Q
(.) 434.09 359.91 T
4 9 Q
(a.erase\050q1, q2\051) 96 340.57 T
3 10 Q
(result is not used) 211.2 339.91 T
(erases the elements in the range) 297.6 339.91 T
4 9 Q
([q1, q2\051) 427.01 339.91 T
3 10 Q
(.) 470.21 339.91 T
6 12 Q
(T) 205.54 214.57 T
(able 1) 212.44 214.57 T
(1: Optional sequence operations) 242.12 214.57 T
3 10 Q
(expression) 104.61 189.91 T
(return type) 212.2 189.91 T
(operational semantics) 316.54 189.91 T
(container) 463.8 189.91 T
4 9 Q
(a.front\050\051) 81.6 168.57 T
(reference;) 182.4 168.57 T
(const_reference) 182.4 156.91 T
3 10 Q
( for) 263.4 156.91 T
(constant) 182.4 144.91 T
4 9 Q
(a) 218.23 144.91 T
(*a.begin\050\051) 297.6 168.57 T
(vector) 434.4 167.91 T
3 10 Q
(,) 466.4 167.91 T
4 9 Q
(list) 471.4 167.91 T
3 10 Q
(,) 493 167.91 T
4 9 Q
(deque) 498 167.91 T
(a.back\050\051) 81.6 125.57 T
(reference;) 182.4 125.57 T
(const_reference) 182.4 113.91 T
3 10 Q
( for) 263.4 113.91 T
(constant) 182.4 101.91 T
4 9 Q
(a) 218.23 101.91 T
(*a.\050--end\050\051\051) 297.6 125.57 T
(vector) 434.4 124.91 T
3 10 Q
(,) 466.4 124.91 T
4 9 Q
(list) 471.4 124.91 T
3 10 Q
(,) 493 124.91 T
4 9 Q
(deque) 498 124.91 T
(a.push_front\050x\051) 81.6 82.57 T
(void) 182.4 81.91 T
(a.insert\050a.begin\050\051, x\051) 297.6 82.57 T
(list) 434.4 81.91 T
3 10 Q
(,) 456 81.91 T
4 9 Q
(deque) 461 81.91 T
90 544.32 90 332.82 2 L
V
0.5 H
0 Z
N
205.2 544.82 205.2 332.32 2 L
V
N
291.6 544.82 291.6 332.32 2 L
V
N
522 544.32 522 332.82 2 L
V
N
89.75 544.57 522.25 544.57 2 L
V
N
90.25 509.82 521.75 509.82 2 L
V
N
90.25 507.32 521.75 507.32 2 L
V
N
89.75 476.57 522.25 476.57 2 L
V
N
89.75 444.57 522.25 444.57 2 L
V
N
89.75 412.57 522.25 412.57 2 L
V
N
89.75 392.57 522.25 392.57 2 L
V
N
89.75 372.57 522.25 372.57 2 L
V
N
89.75 352.57 522.25 352.57 2 L
V
N
89.75 332.57 522.25 332.57 2 L
V
N
75.6 204.32 75.6 74.82 2 L
V
N
176.4 204.82 176.4 74.32 2 L
V
N
291.6 204.82 291.6 74.32 2 L
V
N
428.4 204.82 428.4 74.32 2 L
V
N
536.4 204.32 536.4 74.82 2 L
V
N
75.35 204.57 536.65 204.57 2 L
V
N
75.85 181.82 536.15 181.82 2 L
V
N
75.85 179.32 536.15 179.32 2 L
V
N
75.35 137.57 536.65 137.57 2 L
V
N
75.35 94.57 536.65 94.57 2 L
V
N
75.35 74.57 536.65 74.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 23
%%Page: "22" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(22) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
-0.35 (All the operations in the above table are provided only for the containers for which they take constant time.) 72 556.33 P
9 F
(8.1.1 Vector) 72 535.71 T
4 9 Q
1.65 (vector) 72 518.85 P
2 10 Q
0.76 ( is a kind of sequence that supports random access iterators. In addition, it supports \050amortized\051) 104.4 518.85 P
-0.31 (constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage) 72 506.85 P
(management is handled automatically, though hints can be given to improve efficiency.) 72 494.85 T
4 9 Q
(template <class T, template <class U> class Allocator = allocator>) 108 472.52 T
(class vector {) 108 461.52 T
(public:) 108 450.52 T
(// typedefs:) 108 428.52 T
(typedef iterator;) 144 406.52 T
(typedef const_iterator;) 144 395.52 T
(typedef Allocator<T>::pointer pointer;) 144 384.52 T
(typedef Allocator<T>::reference reference;) 144 373.52 T
(typedef Allocator<T>::const_reference const_reference;) 144 362.52 T
(typedef size_type;) 144 351.52 T
(typedef difference_type;) 144 340.52 T
(typedef T value_type;) 144 329.52 T
(typedef reverse_iterator;) 144 318.52 T
(typedef const_reverse_iterator;) 144 307.52 T
(// allocation/deallocation:) 108 285.52 T
(vector\050\051;) 144 263.52 T
(vector\050size_type n, const T& value = T\050\051\051;) 144 252.52 T
(vector\050const vector<T, Allocator>& x\051;) 144 241.52 T
(template <class InputIterator>) 144 230.52 T
(vector\050InputIterator first, InputIterator last\051;) 144 219.52 T
(~vector\050\051;) 144 208.52 T
(vector<T, Allocator>& operator=\050const vector<T, Allocator>& x\051;) 144 197.52 T
(void reserve\050size_type n\051;) 144 186.52 T
(void swap\050vector<T, Allocator>& x\051;) 144 175.52 T
(// accessors:) 108 153.52 T
(iterator begin\050\051;) 144 131.52 T
(const_iterator begin\050\051 const;) 144 120.52 T
(iterator end\050\051;) 144 109.52 T
(const_iterator end\050\051 const;) 144 98.52 T
(reverse_iterator rbegin\050\051;) 144 87.52 T
(const_reverse_iterator rbegin\050\051;) 144 76.52 T
(a.push_back\050x\051) 81.6 666 T
(void) 182.4 666 T
(a.insert\050a.end\050\051, x\051) 297.6 666 T
(vector) 434.4 665.33 T
3 10 Q
(,) 466.4 665.33 T
4 9 Q
(list) 471.4 665.33 T
3 10 Q
(,) 493 665.33 T
4 9 Q
(deque) 498 665.33 T
(a.pop_front\050\051) 81.6 646 T
(void) 182.4 646 T
(a.erase\050a.begin\050\051\051) 297.6 646 T
(list) 434.4 645.33 T
3 10 Q
(,) 456 645.33 T
4 9 Q
(deque) 461 645.33 T
(a.pop_back\050\051) 81.6 626 T
(void) 182.4 626 T
(a.erase\050--a.end\050\051\051) 297.6 626 T
(vector) 434.4 625.33 T
3 10 Q
(,) 466.4 625.33 T
4 9 Q
(list) 471.4 625.33 T
3 10 Q
(,) 493 625.33 T
4 9 Q
(deque) 498 625.33 T
(a[n]) 81.6 606 T
(reference;) 182.4 606 T
(const_reference) 182.4 594.33 T
3 10 Q
( for) 263.4 594.33 T
(constant) 182.4 582.33 T
4 9 Q
(a) 218.23 582.33 T
(*\050a.begin\050\051 + n\051) 297.6 606 T
(vector) 434.4 605.33 T
3 10 Q
(,) 466.4 605.33 T
4 9 Q
(deque) 471.4 605.33 T
6 12 Q
(T) 205.54 712 T
(able 1) 212.44 712 T
(1: Optional sequence operations) 242.12 712 T
3 10 Q
(expression) 104.61 687.33 T
(return type) 212.2 687.33 T
(operational semantics) 316.54 687.33 T
(container) 463.8 687.33 T
75.6 701.75 75.6 575.25 2 L
V
0.5 H
0 Z
N
176.4 702.25 176.4 574.75 2 L
V
N
291.6 702.25 291.6 574.75 2 L
V
N
428.4 702.25 428.4 574.75 2 L
V
N
536.4 701.75 536.4 575.25 2 L
V
N
75.35 702 536.65 702 2 L
V
N
75.85 679.25 536.15 679.25 2 L
V
N
75.85 676.75 536.15 676.75 2 L
V
N
75.35 658 536.65 658 2 L
V
N
75.35 638 536.65 638 2 L
V
N
75.35 618 536.65 618 2 L
V
N
75.35 575 536.65 575 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 24
%%Page: "23" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(23) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(reverse_iterator rend\050\051;) 144 714 T
(const_reverse_iterator rend\050\051;) 144 703 T
(size_type size\050\051 const;) 144 692 T
(size_type max_size\050\051 const;) 144 681 T
(size_type capacity\050\051 const;) 144 670 T
(bool empty\050\051 const;) 144 659 T
(reference operator[]\050size_type n\051;) 144 648 T
(const_reference operator[]\050size_type n\051 const;) 144 637 T
(reference front\050\051;) 144 626 T
(const_reference front\050\051 const;) 144 615 T
(reference back\050\051;) 144 604 T
(const_reference back\050\051 const;) 144 593 T
(// insert/erase:) 108 571 T
(void push_back\050const T& x\051;) 144 549 T
(iterator insert\050iterator position, const T& x = T\050\051\051;) 144 538 T
(void insert\050iterator position, size_type n, const T& x\051;) 144 527 T
(template <class InputIterator>) 144 516 T
(void insert\050iterator position, InputIterator first, InputIterator last\051;) 144 505 T
(void pop_back\050\051;) 144 494 T
(void erase\050iterator position\051;) 144 483 T
(void erase\050iterator first, iterator last\051;) 144 472 T
(};) 108 461 T
(template <class T, class Allocator>) 108 439 T
(bool operator==\050const vector<T, Allocator>& x, const vector<T, Allocator>& y\051;) 108 428 T
(template <class T, class Allocator>) 108 406 T
(bool operator<\050const vector<T, Allocator>& x, const vector<T, Allocator>& y\051;) 108 395 T
3.37 (iterator) 72 365.33 P
2 10 Q
1.56 ( is a random access iterator) 115.2 365.33 P
1.56 (referring to) 246.61 365.33 P
4 9 Q
3.37 (T) 302.49 365.33 P
2 10 Q
1.56 (. The exact type is implementation dependent and) 307.89 365.33 P
(determined by) 72 353.33 T
4 9 Q
(Allocator) 139.45 353.33 T
2 10 Q
(.) 188.05 353.33 T
4 9 Q
8.74 (const_iterator) 72 334.33 P
2 10 Q
4.05 ( is a constant random access iterator referring to) 147.6 334.33 P
4 9 Q
8.74 (const T) 398.62 334.33 P
2 10 Q
4.05 (.) 445.16 334.33 P
4.05 ( The exact type is) 447.66 334.33 P
0.37 (implementation dependent and determined by) 72 322.33 P
4 9 Q
0.8 (Allocator) 283.83 322.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 322.33 P
4 9 Q
(const_iterator) 72 310.33 T
2 10 Q
( out of) 147.6 310.33 T
4 9 Q
(iterator) 178.64 310.33 T
2 10 Q
(.) 221.84 310.33 T
4 9 Q
0.8 (size_type) 72 291.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 291.33 P
4 9 Q
(Allocator) 72 279.33 T
2 10 Q
(.) 120.6 279.33 T
4 9 Q
0.67 (difference_type) 72 260.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 260.33 P
(by) 72 248.33 T
4 9 Q
(Allocator) 85.59 248.33 T
2 10 Q
(.) 134.19 248.33 T
0.3 (The constructor) 72 229.33 P
4 9 Q
0.66 ( template <class InputIterator>) 141.85 229.33 P
0.66 (vector\050InputIterator first, InputIterator) 317.29 229.33 P
-0.84 (last\051) 72 217.33 P
2 10 Q
-0.39 ( makes only) 99 217.33 P
4 9 Q
-0.84 (N) 153.51 217.33 P
2 10 Q
-0.39 ( calls to the copy constructor of) 158.91 217.33 P
4 9 Q
-0.84 (T) 296.36 217.33 P
2 10 Q
-0.39 ( \050where) 301.76 217.33 P
4 9 Q
-0.84 (N) 337 217.33 P
2 10 Q
-0.39 ( is the distance between) 342.4 217.33 P
4 9 Q
-0.84 (first) 447.87 217.33 P
2 10 Q
-0.39 ( and) 474.87 217.33 P
4 9 Q
-0.84 (last) 496.03 217.33 P
2 10 Q
-0.39 (\051 and) 517.63 217.33 P
0.64 (no reallocations if iterators) 72 205.33 P
4 9 Q
1.38 (first) 195.04 205.33 P
2 10 Q
0.64 ( and) 222.04 205.33 P
4 9 Q
1.38 (last) 245.24 205.33 P
2 10 Q
0.64 ( are of forward, bidirectional, or random access categories. It) 266.84 205.33 P
-0.35 (does at most) 72 193.33 P
4 9 Q
-0.76 (2N) 129.1 193.33 P
2 10 Q
-0.35 ( calls to the copy constructor of) 139.9 193.33 P
4 9 Q
-0.76 (T) 277.6 193.33 P
2 10 Q
-0.35 ( and) 283 193.33 P
4 9 Q
-0.76 (logN) 304.23 193.33 P
2 10 Q
-0.35 ( reallocations if they are just input iterators, since) 325.83 193.33 P
(it is impossible to determine the distance between) 72 181.33 T
4 9 Q
(first) 294.88 181.33 T
2 10 Q
( and) 321.88 181.33 T
4 9 Q
(last) 343.81 181.33 T
2 10 Q
( and then do copying.) 365.41 181.33 T
-0.41 (The member function) 72 162.33 P
4 9 Q
-0.89 (capacity) 168.8 162.33 P
2 10 Q
-0.41 ( returns the size of the allocated storage in the vector. The member function) 212 162.33 P
4 9 Q
0.91 (reserve) 72 150.33 P
2 10 Q
0.42 ( is a directive that informs) 109.8 150.33 P
4 9 Q
0.91 (vector) 230.17 150.33 P
2 10 Q
0.42 ( of a planned change in size, so that it can manage the storage) 262.57 150.33 P
0.05 (allocation accordingly. It does not change the size of the sequence and takes at most linear time in the size) 72 138.33 P
1.56 (of the sequence. Reallocation happens at this point if and only if the current capacity is less than the) 72 126.33 P
2.71 (argument of) 72 114.33 P
4 9 Q
5.86 (reserve) 134.46 114.33 P
2 10 Q
2.71 (. After) 172.26 114.33 P
4 9 Q
5.86 (reserve) 208.3 114.33 P
2 10 Q
2.71 (,) 246.1 114.33 P
4 9 Q
5.86 (capacity) 253.81 114.33 P
2 10 Q
2.71 ( is greater or equal to the argument of) 297.01 114.33 P
4 9 Q
5.86 (reserve) 490.75 114.33 P
2 10 Q
2.71 ( if) 528.55 114.33 P
0.31 (reallocation happens; and equal to the previous value of) 72 102.33 P
4 9 Q
0.67 (capacity) 325.44 102.33 P
2 10 Q
0.31 ( otherwise. Reallocation invalidates all) 368.64 102.33 P
0.92 (the references, pointers, and iterators referring to the elements in the sequence. It is guaranteed that no) 72 90.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 25
%%Page: "24" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(24) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.2 (reallocation takes place during the insertions that happen after) 72 713.33 P
4 9 Q
0.44 (reserve) 353 713.33 P
2 10 Q
0.2 ( takes place till the time when the) 390.8 713.33 P
(size of the vector reaches the size specified by) 72 701.33 T
4 9 Q
(reserve) 276.11 701.33 T
2 10 Q
(.) 313.91 701.33 T
4 9 Q
-0.8 (insert) 72 682.33 P
2 10 Q
-0.37 ( causes reallocation if the new size is greater than the old capacity. If no reallocation happens, all the) 104.4 682.33 P
0.33 (iterators and references before the insertion point remain valid. Inserting a single element into a vector is) 72 670.33 P
0.18 (linear in the distance from the insertion point to the end of the vector. The amortized complexity over the) 72 658.33 P
0.04 (lifetime of a vector of inserting a single element at its end is constant. Insertion of multiple elements into a) 72 646.33 P
0.15 (vector with a single call of the insert member function is linear in the sum of the number of elements plus) 72 634.33 P
0.99 (the distance to the end of the vector. In other words, it is much faster to insert many elements into the) 72 622.33 P
1.03 (middle of a vector at once than to do the insertion one at a time. The insert template member function) 72 610.33 P
-0.33 (preallocates enough storage for the insertion if the iterators) 72 598.33 P
4 9 Q
-0.72 (first) 332.71 598.33 P
2 10 Q
-0.33 ( and) 359.71 598.33 P
4 9 Q
-0.72 (last) 380.98 598.33 P
2 10 Q
-0.33 ( are of forward, bidirectional or) 402.58 598.33 P
-0.34 (random access category. Otherwise, it does insert elements one by one and should not be used for inserting) 72 586.33 P
(into the middle of vectors.) 72 574.33 T
4 9 Q
-0.87 (erase) 72 555.33 P
2 10 Q
-0.4 ( invalidates all the iterators and references after the point of the erase. The destructor of) 99 555.33 P
4 9 Q
-0.87 (T) 481.12 555.33 P
2 10 Q
-0.4 ( is called the) 486.52 555.33 P
-0.05 (number of times equal to the number of the elements erased, but the assignment operator of) 72 543.33 P
4 9 Q
-0.12 (T) 480.08 543.33 P
2 10 Q
-0.05 ( is called the) 485.48 543.33 P
(number of times equal to the number of elements in the vector after the erased elements.) 72 531.33 T
(To optimize space allocation, a specialization for) 72 512.33 T
4 9 Q
(bool) 288.81 512.33 T
2 10 Q
( is provided:) 310.41 512.33 T
4 9 Q
(class vector<bool, allocator> {) 108 490 T
(public:) 108 479 T
(// bit reference:) 108 457 T
(class reference {) 144 435 T
(public:) 144 424 T
(~reference\050\051;) 180 413 T
(operator bool\050\051 const;) 180 402 T
(reference& operator=\050const bool x\051;) 180 391 T
(void flip\050\051;) 180 380 T
(// flips the bit) 288 380 T
(};) 144 369 T
(// typedefs:) 108 347 T
(typedef bool const_reference;) 144 325 T
(typedef iterator;) 144 314 T
(typedef const_iterator;) 144 303 T
(typedef size_t size_type;) 144 292 T
(typedef ptrdiff_t difference_type;) 144 281 T
(typedef bool value_type;) 144 270 T
(typedef reverse_iterator;) 144 259 T
(typedef const_reverse_iterator;) 144 248 T
(// allocation/deallocation:) 108 226 T
(vector\050\051;) 144 204 T
(vector\050size_type n, const bool& value = bool\050\051\051;) 144 193 T
(vector\050const vector<bool, allocator>& x\051;) 144 182 T
(template <class InputIterator>) 144 171 T
(vector\050InputIterator first, InputIterator last\051;) 144 160 T
(~vector\050\051;) 144 149 T
(vector<bool, allocator>& operator=\050const vector<bool, allocator>& x\051;) 144 138 T
(void reserve\050size_type n\051;) 144 127 T
(void swap\050vector<bool, allocator>& x\051;) 144 116 T
(// accessors:) 108 94 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 26
%%Page: "25" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(25) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(iterator begin\050\051;) 144 714 T
(const_iterator begin\050\051 const;) 144 703 T
(iterator end\050\051;) 144 692 T
(const_iterator end\050\051 const;) 144 681 T
(reverse_iterator rbegin\050\051;) 144 670 T
(const_reverse_iterator rbegin\050\051;) 144 659 T
(reverse_iterator rend\050\051;) 144 648 T
(const_reverse_iterator rend\050\051;) 144 637 T
(size_type size\050\051 const;) 144 626 T
(size_type max_size\050\051 const;) 144 615 T
(size_type capacity\050\051 const;) 144 604 T
(bool empty\050\051 const;) 144 593 T
(reference operator[]\050size_type n\051;) 144 582 T
(const_reference operator[]\050size_type n\051 const;) 144 571 T
(reference front\050\051;) 144 560 T
(const_reference front\050\051 const;) 144 549 T
(reference back\050\051;) 144 538 T
(const_reference back\050\051 const;) 144 527 T
(// insert/erase:) 108 505 T
(void push_back\050const bool& x\051;) 144 483 T
(iterator insert\050iterator position, const bool& x = bool\050\051\051;) 144 472 T
(void insert \050iterator position, size_type n, const bool& x\051;) 144 461 T
(template <class InputIterator>) 144 450 T
(void insert \050iterator position, InputIterator first, InputIterator last\051;) 144 439 T
(void pop_back\050\051;) 144 428 T
(void erase\050iterator position\051;) 144 417 T
(void erase\050iterator first, iterator last\051;) 144 406 T
(};) 108 395 T
(void swap\050vector<bool, allocator>::reference x,) 108 373 T
( vector<bool, allocator>::reference y\051;) 144 362 T
(bool operator==\050const vector<bool, allocator>& x,) 108 340 T
(const vector<bool, allocator>& y\051;) 180 329 T
(bool operator<\050const vector<bool, allocator>& x,) 108 307 T
(const vector<bool, allocator>& y\051;) 180 296 T
(reference) 72 277.33 T
2 10 Q
( is a class that simulates the behavior of references of a single bit in) 120.6 277.33 T
4 9 Q
(vector<bool>) 417.74 277.33 T
2 10 Q
(.) 482.54 277.33 T
0.49 (Every implementation is expected to provide specializations of) 72 258.33 P
4 9 Q
1.06 (vector<bool>) 356.39 258.33 P
2 10 Q
0.49 ( for all supported memory) 421.19 258.33 P
(models.) 72 246.33 T
9 F
(8.1.2 List) 72 109.71 T
4 9 Q
1.03 (list) 72 92.85 P
2 10 Q
0.48 ( is a kind of sequence that supports bidirectional iterators and allows constant time insert and erase) 93.6 92.85 P
2.64 (operations anywhere within the sequence, with storage management handled automatically. Unlike) 72 80.85 P
72 72 540 720 C
72 127 540 224 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99 139 513 216.62 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
108 139 504 207.62 R
7 X
V
2 10 Q
0 X
(At present, it is not possible to templatize a specialization. That is, we cannot write:) 108 200.96 T
4 9 Q
(template <template <class U> class Allocator = allocator>) 144 178.62 T
(class vector<bool, Allocator> { /* ... */ };) 144 167.62 T
2 10 Q
(Therefore, only) 108 148.96 T
4 9 Q
(vector<bool, allocator>) 178.26 148.96 T
2 10 Q
( is provided.) 302.46 148.96 T
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 27
%%Page: "26" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(26) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.4 (vectors and deques, fast random access to list elements is not supported, but many algorithms only need) 72 713.33 P
(sequential access anyway.) 72 701.33 T
4 9 Q
(template <class T, template <class U> class Allocator = allocator>) 108 679 T
(class list {) 108 668 T
(public:) 108 657 T
(// typedefs:) 108 635 T
(typedef iterator;) 144 613 T
(typedef const_iterator;) 144 602 T
(typedef Allocator<T>::pointer pointer;) 144 591 T
(typedef Allocator<T>::reference reference;) 144 580 T
(typedef Allocator<T>::const_reference const_reference;) 144 569 T
(typedef size_type;) 144 558 T
(typedef difference_type;) 144 547 T
(typedef T value_type;) 144 536 T
(typedef reverse_iterator;) 144 525 T
(typedef const_reverse_iterator;) 144 514 T
(// allocation/deallocation:) 108 492 T
(list\050\051;) 144 470 T
(list\050size_type n, const T& value = T\050\051\051;) 144 459 T
(template <class InputIterator>) 144 448 T
(list\050InputIterator first, InputIterator last\051;) 144 437 T
(list\050const list<T, Allocator>& x\051;) 144 426 T
(~list\050\051;) 144 415 T
(list<T, Allocator>& operator=\050const list<T, Allocator>& x\051;) 144 404 T
(void swap\050list<T, Allocator>& x\051;) 144 393 T
(// accessors:) 108 371 T
(iterator begin\050\051;) 144 349 T
(const_iterator begin\050\051 const;) 144 338 T
(iterator end\050\051;) 144 327 T
(const_iterator end\050\051 const;) 144 316 T
(reverse_iterator rbegin\050\051;) 144 305 T
(const_reverse_iterator rbegin\050\051;) 144 294 T
(reverse_iterator rend\050\051;) 144 283 T
(const_reverse_iterator rend\050\051;) 144 272 T
(bool empty\050\051 const;) 144 261 T
(size_type size\050\051 const;) 144 250 T
(size_type max_size\050\051 const;) 144 239 T
(reference front\050\051;) 144 228 T
(const_reference front\050\051 const;) 144 217 T
(reference back\050\051;) 144 206 T
(const_reference back\050\051 const;) 144 195 T
(// insert/erase:) 108 173 T
(void push_front\050const T& x\051;) 144 151 T
(void push_back\050const T& x\051;) 144 140 T
(iterator insert\050iterator position, const T& x = T\050\051\051;) 144 129 T
(void insert\050iterator position, size_type n, const T& x\051;) 144 118 T
(template <class InputIterator>) 144 107 T
(void insert\050iterator position, InputIterator first, InputIterator last\051;) 144 96 T
(void pop_front\050\051;) 144 85 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 28
%%Page: "27" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(27) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(void pop_back\050\051;) 144 714 T
(void erase\050iterator position\051;) 144 703 T
(void erase\050iterator first, iterator last\051;) 144 692 T
(// special mutative operations on list:) 108 670 T
(void splice\050iterator position, list<T, Allocator>& x\051;) 144 648 T
(void splice\050iterator position, list<T, Allocator>& x, iterator i\051;) 144 637 T
(void splice\050iterator position, list<T, Allocator>& x, iterator first,) 144 626 T
(iterator last\051;) 216 615 T
(void remove\050const T& value\051;) 144 604 T
(template <class Predicate> void remove_if\050Predicate pred\051;) 144 593 T
(void unique\050\051;) 144 582 T
-0.72 (template <class BinaryPredicate> void unique\050BinaryPredicate binary_pred\051;) 144 571 P
(void merge\050list<T, Allocator>& x\051;) 144 560 T
(template <class Compare> void merge\050list<T, Allocator>& x, Compare comp\051;) 144 549 T
(void reverse\050\051;) 144 538 T
(void sort\050\051;) 144 527 T
(template <class Compare> void sort\050Compare comp\051;) 144 516 T
(};) 108 505 T
(template <class T, class Allocator>) 108 483 T
(bool operator==\050const list<T, Allocator>& x, const list<T, Allocator>& y\051;) 108 472 T
(template <class T, class Allocator>) 108 450 T
(bool operator<\050const list<T, Allocator>& x, const list<T, Allocator>& y\051;) 108 439 T
4.97 (iterator) 72 420.33 P
2 10 Q
2.3 ( is a bidirectional iterator) 115.2 420.33 P
2.3 (referring to) 239.93 420.33 P
4 9 Q
4.97 (T) 297.3 420.33 P
2 10 Q
2.3 (. The exact type is implementation dependent and) 302.7 420.33 P
(determined by) 72 408.33 T
4 9 Q
(Allocator) 139.45 408.33 T
2 10 Q
(.) 188.05 408.33 T
4 9 Q
-0.42 (const_iterator) 72 389.33 P
2 10 Q
-0.19 ( is a constant bidirectional iterator referring to) 147.6 389.33 P
4 9 Q
-0.42 (const T) 351.84 389.33 P
2 10 Q
-0.19 (.) 389.22 389.33 P
-0.19 ( The exact type is implementation) 391.72 389.33 P
0.01 (dependent and determined by) 72 377.33 P
4 9 Q
0.03 (Allocator) 208.93 377.33 P
2 10 Q
0.01 (. It is guaranteed that there is a constructor for) 257.53 377.33 P
4 9 Q
0.03 (const_iterator) 464.4 377.33 P
2 10 Q
(out of) 72 365.33 T
4 9 Q
(iterator) 100.54 365.33 T
2 10 Q
(.) 143.74 365.33 T
4 9 Q
0.8 (size_type) 72 346.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 346.33 P
4 9 Q
(Allocator) 72 334.33 T
2 10 Q
(.) 120.6 334.33 T
4 9 Q
0.67 (difference_type) 72 315.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 315.33 P
(by) 72 303.33 T
4 9 Q
(Allocator) 85.59 303.33 T
2 10 Q
(.) 134.19 303.33 T
4 9 Q
-0.03 (insert) 72 284.33 P
2 10 Q
-0.01 ( does not affect the validity of iterators and references. Insertion of a single element into a list takes) 104.4 284.33 P
0.24 (constant time and exactly one call to the copy constructor of) 72 272.33 P
4 9 Q
0.52 (T) 341.77 272.33 P
2 10 Q
0.24 (. Insertion of multiple elements into a list is) 347.17 272.33 P
0.53 (linear in the number of elements inserted, and the number of calls to the copy constructor of) 72 260.33 P
4 9 Q
1.15 (T) 490.27 260.33 P
2 10 Q
0.53 ( is exactly) 495.67 260.33 P
(equal to the number of elements inserted.) 72 248.33 T
4 9 Q
1.97 (erase) 72 229.33 P
2 10 Q
0.91 ( invalidates only the iterators and references to the erased elements. Erasing a single element is a) 99 229.33 P
-0.18 (constant time operation with a single call to the destructor of) 72 217.33 P
4 9 Q
-0.4 (T) 340.93 217.33 P
2 10 Q
-0.18 (. Erasing a range in a list is linear time in the) 346.33 217.33 P
-0.11 (size of the range and the number of calls to the destructor of type) 72 205.33 P
4 9 Q
-0.24 (T) 360.69 205.33 P
2 10 Q
-0.11 ( is exactly equal to the size of the range.) 366.09 205.33 P
1.87 (Since lists allow fast insertion and erasing from the middle of a list, certain operations are provided) 72 186.33 P
(specifically for them:) 72 174.33 T
4 9 Q
(list) 72 155.33 T
2 10 Q
( provides three splice operations that destructively move elements from one list to another:) 93.6 155.33 T
4 9 Q
-0.14 (void splice\050iterator position, list<T, Allocator>& x\051) 72 136.33 P
2 10 Q
-0.06 ( inserts the contents of) 357.53 136.33 P
4 9 Q
-0.14 (x) 458.67 136.33 P
2 10 Q
-0.06 ( before) 464.08 136.33 P
4 9 Q
-0.14 (position) 496.8 136.33 P
2 10 Q
(and) 72 124.33 T
4 9 Q
(x) 91.43 124.33 T
2 10 Q
( becomes empty. It takes constant time. The result is undefined if) 96.83 124.33 T
4 9 Q
(&x == this) 385.95 124.33 T
2 10 Q
(.) 439.95 124.33 T
4 9 Q
-0.29 (void splice\050iterator position, list<T, Allocator>& x, iterator i\051) 72 105.33 P
2 10 Q
-0.14 ( inserts an element pointed) 420.96 105.33 P
0.79 (to by) 72 93.33 P
4 9 Q
1.71 (i) 98.39 93.33 P
2 10 Q
0.79 ( from list) 103.79 93.33 P
4 9 Q
1.71 (x) 148.55 93.33 P
2 10 Q
0.79 ( before) 153.95 93.33 P
4 9 Q
1.71 (position) 188.38 93.33 P
2 10 Q
0.79 ( and removes the element from) 231.58 93.33 P
4 9 Q
1.71 (x) 376.58 93.33 P
2 10 Q
0.79 (. It takes constant time.) 381.98 93.33 P
4 9 Q
1.71 (i) 490 93.33 P
2 10 Q
0.79 ( is a valid) 495.4 93.33 P
(dereferenceable iterator of) 72 81.33 T
4 9 Q
(x) 190.65 81.33 T
2 10 Q
(. The result is unchanged if) 196.05 81.33 T
4 9 Q
(position == i) 318.25 81.33 T
2 10 Q
( or) 388.45 81.33 T
4 9 Q
(position == ++i) 402.86 81.33 T
2 10 Q
(.) 483.86 81.33 T
52 78 54 88 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 29
%%Page: "28" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(28) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
1.6 (void splice\050iterator position, list<T, Allocator>& x, iterator first,) 72 713.33 P
1.6 (iterator last\051) 462.8 713.33 P
2 10 Q
0.35 (inserts elements in the range) 72 701.33 P
4 9 Q
0.75 ([first, last\051) 202.61 701.33 P
2 10 Q
0.35 ( before) 273.56 701.33 P
4 9 Q
0.75 (position) 307.11 701.33 P
2 10 Q
0.35 ( and removes the elements from) 350.31 701.33 P
4 9 Q
0.75 (x) 496.92 701.33 P
2 10 Q
0.35 (. It takes) 502.32 701.33 P
-0.24 (constant time if) 72 689.33 P
4 9 Q
-0.52 (&x == this) 142.1 689.33 P
2 10 Q
-0.24 (; otherwise, it takes linear time.) 195.06 689.33 P
4 9 Q
-0.52 ([first, last\051) 333.86 689.33 P
2 10 Q
-0.24 ( is a valid range in) 403.54 689.33 P
4 9 Q
-0.52 (x) 485.66 689.33 P
2 10 Q
-0.24 (. The result) 491.06 689.33 P
(is undefined if) 72 677.33 T
4 9 Q
(position) 138.6 677.33 T
2 10 Q
( is an iterator in the range) 181.8 677.33 T
4 9 Q
([first, last\051) 297.57 677.33 T
2 10 Q
(.) 367.77 677.33 T
4 9 Q
1.03 (remove) 72 658.33 P
2 10 Q
0.48 ( erases all the elements in the list referred by the list iterator) 104.4 658.33 P
4 9 Q
1.03 (i) 376.65 658.33 P
2 10 Q
0.48 ( for which the following conditions) 382.05 658.33 P
-0.1 (hold:) 72 646.33 P
4 9 Q
-0.22 (*i == value) 97.2 646.33 P
2 10 Q
-0.1 (,) 156.15 646.33 P
4 9 Q
-0.22 (pred\050*i\051 == true) 161.05 646.33 P
2 10 Q
-0.1 (.) 247.01 646.33 P
4 9 Q
-0.22 (remove) 251.9 646.33 P
2 10 Q
-0.1 ( is stable, that is, the relative order of the elements that are) 284.3 646.33 P
1.51 (not removed is the same as their relative order in the original list. Exactly) 72 634.33 P
4 9 Q
3.25 (size\050\051) 418.95 634.33 P
2 10 Q
1.51 ( applications of the) 451.35 634.33 P
(corresponding predicate are done.) 72 622.33 T
4 9 Q
0.65 (unique) 72 603.33 P
2 10 Q
0.3 ( erases all but the first element from every consecutive group of equal elements in the list. Exactly) 104.4 603.33 P
4 9 Q
(size\050\051 - 1) 72 591.33 T
2 10 Q
( applications of the corresponding binary predicate are done.) 126 591.33 T
4 9 Q
-0.55 (merge) 72 572.33 P
2 10 Q
-0.25 ( merges the argument list into the list \050both are assumed to be sorted\051. The merge is stable, that is, for) 99 572.33 P
0.12 (equal elements in the two lists, the elements from the list always precede the elements from the argument) 72 560.33 P
(list.) 72 548.33 T
4 9 Q
(x) 90.32 548.33 T
2 10 Q
( is empty after the merge. At most) 95.72 548.33 T
4 9 Q
(size\050\051 + x.size\050\051 - 1) 248.77 548.33 T
2 10 Q
( comparisons are done.) 362.17 548.33 T
4 9 Q
(reverse) 72 529.33 T
2 10 Q
( reverses the order of the elements in the list. It is linear time.) 109.8 529.33 T
4 9 Q
0.14 (sort) 72 510.33 P
2 10 Q
0.07 ( sorts the list according to the) 93.6 510.33 P
4 9 Q
0.14 (operator<) 226.19 510.33 P
2 10 Q
0.07 ( or a compare function object. It is stable, that is, the relative) 274.79 510.33 P
0.2 (order of the equal elements is preserved. Approximately) 72 498.33 P
4 9 Q
0.43 (NlogN) 325.83 498.33 P
2 10 Q
0.2 ( comparisons are done where) 352.83 498.33 P
4 9 Q
0.43 (N) 486.3 498.33 P
2 10 Q
0.2 ( is equal to) 491.7 498.33 P
4 9 Q
(size\050\051) 72 486.33 T
2 10 Q
(.) 104.4 486.33 T
9 F
(8.1.3 Deque) 72 465.71 T
4 9 Q
1.29 (deque) 72 448.85 P
2 10 Q
0.6 ( is a kind of sequence that, like a vector, supports random access iterators. In addition, it supports) 99 448.85 P
0.41 (constant time insert and erase operations at the beginning or the end; insert and erase in the middle take) 72 436.85 P
(linear time. As with vectors, storage management is handled automatically.) 72 424.85 T
4 9 Q
(template <class T, template <class U> class Allocator = allocator>) 108 402.52 T
(class deque {) 108 391.52 T
(public:) 108 380.52 T
(// typedefs:) 108 358.52 T
(typedef iterator;) 144 336.52 T
(typedef const_iterator;) 144 325.52 T
(typedef Allocator<T>::pointer pointer;) 144 314.52 T
(typedef Allocator<T>::reference reference;) 144 303.52 T
(typedef Allocator<T>::const_reference const_reference;) 144 292.52 T
(typedef size_type;) 144 281.52 T
(typedef difference_type;) 144 270.52 T
(typedef T value_type;) 144 259.52 T
(typedef reverse_iterator;) 144 248.52 T
(typedef const_reverse_iterator;) 144 237.52 T
(// allocation/deallocation:) 108 215.52 T
(deque\050\051;) 144 193.52 T
(deque\050size_type n, const T& value = T\050\051\051;) 144 182.52 T
(deque\050const deque<T, Allocator>& x\051;) 144 171.52 T
(template <class InputIterator>) 144 160.52 T
(deque\050InputIterator first, InputIterator last\051;) 144 149.52 T
(~deque\050\051;) 144 138.52 T
(deque<T, Allocator>& operator=\050const deque<T, Allocator>& x\051;) 144 127.52 T
(void swap\050deque<T, Allocator>& x\051;) 144 116.52 T
(// accessors:) 108 94.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 30
%%Page: "29" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(29) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(iterator begin\050\051;) 144 714 T
(const_iterator begin\050\051 const;) 144 703 T
(iterator end\050\051;) 144 692 T
(const_iterator end\050\051 const;) 144 681 T
(reverse_iterator rbegin\050\051;) 144 670 T
(const_reverse_iterator rbegin\050\051;) 144 659 T
(reverse_iterator rend\050\051;) 144 648 T
(const_reverse_iterator rend\050\051;) 144 637 T
(size_type size\050\051 const;) 144 626 T
(size_type max_size\050\051 const;) 144 615 T
(bool empty\050\051 const;) 144 604 T
(reference operator[]\050size_type n\051;) 144 593 T
(const_reference operator[]\050size_type n\051 const;) 144 582 T
(reference front\050\051;) 144 571 T
(const_reference front\050\051 const;) 144 560 T
(reference back\050\051;) 144 549 T
(const_reference back\050\051 const;) 144 538 T
(// insert/erase:) 108 516 T
(void push_front\050const T& x\051;) 144 494 T
(void push_back\050const T& x\051;) 144 483 T
(iterator insert\050iterator position, const T& x = T\050\051\051;) 144 472 T
(void insert \050iterator position, size_type n, const T& x\051;) 144 461 T
(template <class InputIterator>) 144 450 T
(void insert \050iterator position, InputIterator first, InputIterator last\051;) 144 439 T
(void pop_front\050\051;) 144 428 T
(void pop_back\050\051;) 144 417 T
(void erase\050iterator position\051;) 144 406 T
(void erase\050iterator first, iterator last\051;) 144 395 T
(};) 108 384 T
(template <class T, class Allocator>) 108 362 T
(bool operator==\050const deque<T, Allocator>& x, const deque<T, Allocator>& y\051;) 108 351 T
(template <class T, class Allocator>) 108 329 T
(bool operator<\050const deque<T, Allocator>& x, const deque<T, Allocator>& y\051;) 108 318 T
3.37 (iterator) 72 299.33 P
2 10 Q
1.56 ( is a random access iterator) 115.2 299.33 P
1.56 (referring to) 246.61 299.33 P
4 9 Q
3.37 (T) 302.49 299.33 P
2 10 Q
1.56 (. The exact type is implementation dependent and) 307.89 299.33 P
(determined by) 72 287.33 T
4 9 Q
(Allocator) 139.45 287.33 T
2 10 Q
(.) 188.05 287.33 T
4 9 Q
8.74 (const_iterator) 72 268.33 P
2 10 Q
4.05 ( is a constant random access iterator referring to) 147.6 268.33 P
4 9 Q
8.74 (const T) 398.62 268.33 P
2 10 Q
4.05 (.) 445.16 268.33 P
4.05 ( The exact type is) 447.66 268.33 P
0.37 (implementation dependent and determined by) 72 256.33 P
4 9 Q
0.8 (Allocator) 283.83 256.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 256.33 P
4 9 Q
(const_iterator) 72 244.33 T
2 10 Q
( out of) 147.6 244.33 T
4 9 Q
(iterator) 178.64 244.33 T
2 10 Q
(.) 221.84 244.33 T
4 9 Q
0.8 (size_type) 72 225.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 225.33 P
4 9 Q
(Allocator) 72 213.33 T
2 10 Q
(.) 120.6 213.33 T
4 9 Q
0.67 (difference_type) 72 194.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 194.33 P
(by) 72 182.33 T
4 9 Q
(Allocator) 85.59 182.33 T
2 10 Q
(.) 134.19 182.33 T
4 9 Q
-0.94 (insert) 72 163.33 P
2 10 Q
-0.43 ( and) 104.4 163.33 P
4 9 Q
-0.94 (push) 125.46 163.33 P
2 10 Q
-0.43 ( invalidate all the iterators and references to the deque. In the worst case, inserting a single) 147.06 163.33 P
1.3 (element into a deque takes time linear in the minimum of the distance from the insertion point to the) 72 151.33 P
-0.12 (beginning of the deque and the distance from the insertion point to the end of the deque. Inserting a single) 72 139.33 P
-0.13 (element either at the beginning or end of a deque always takes constant time and causes a single call to the) 72 127.33 P
0.79 (copy constructor of) 72 115.33 P
4 9 Q
1.71 (T) 162.45 115.33 P
2 10 Q
0.79 (. That is, a deque is especially optimized for pushing and popping elements at the) 167.85 115.33 P
(beginning and end.) 72 103.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 31
%%Page: "30" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(30) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.63 (erase) 72 713.33 P
2 10 Q
-0.29 ( and) 99 713.33 P
4 9 Q
-0.63 (pop) 120.34 713.33 P
2 10 Q
-0.29 ( invalidate all the iterators and references to the deque. The number of calls to the destructor) 136.54 713.33 P
-0.59 (is the same as the number of elements erased, but the number of the calls to the assignment operator is equal) 72 701.33 P
-0.2 (to the minimum of the number of elements before the erased elements and the number of element after the) 72 689.33 P
(erased elements.) 72 677.33 T
0 11 Q
(8.2 Associative containers) 72 653.98 T
2 10 Q
-0.01 (Associative containers provide an ability for fast retrieval of data based on keys. The library provides four) 72 636.9 P
(basic kinds of associative containers:) 72 624.9 T
4 9 Q
(set) 236.14 624.9 T
2 10 Q
(,) 252.34 624.9 T
4 9 Q
(multiset) 257.34 624.9 T
2 10 Q
(,) 300.54 624.9 T
4 9 Q
(map) 305.54 624.9 T
2 10 Q
( and) 321.74 624.9 T
4 9 Q
(multimap) 343.67 624.9 T
2 10 Q
(.) 386.87 624.9 T
0.6 (All of them are parameterized on) 72 605.9 P
4 9 Q
1.3 (Key) 225.1 605.9 P
2 10 Q
0.6 ( and an ordering relation) 241.3 605.9 P
4 9 Q
1.3 (Compare) 357.2 605.9 P
2 10 Q
0.6 ( that induces a total ordering on) 395 605.9 P
-0.54 (elements of) 72 593.9 P
4 9 Q
-1.16 (Key) 124.15 593.9 P
2 10 Q
-0.54 (. In addition,) 140.35 593.9 P
4 9 Q
-1.16 (map) 198.01 593.9 P
2 10 Q
-0.54 ( and) 214.21 593.9 P
4 9 Q
-1.16 (multimap) 235.07 593.9 P
2 10 Q
-0.54 ( associate an arbitrary type) 278.27 593.9 P
4 9 Q
-1.16 (T) 396.98 593.9 P
2 10 Q
-0.54 ( with the) 402.38 593.9 P
4 9 Q
-1.16 (Key) 442.47 593.9 P
2 10 Q
-0.54 (. The object of type) 458.67 593.9 P
4 9 Q
(Compare) 72 581.9 T
2 10 Q
( is called the) 109.8 581.9 T
5 F
( comparison object) 164.48 581.9 T
2 F
( of a container.) 238.91 581.9 T
1.33 (In this section when we talk about equality of keys we mean the equivalence relation imposed by the) 72 562.9 P
0.18 (comparison and) 72 550.91 P
5 F
0.18 (not) 146.4 550.91 P
2 F
0.18 ( the) 159.73 550.91 P
4 9 Q
0.38 (operator==) 178.95 550.91 P
2 10 Q
0.18 ( on keys. That is, two keys) 232.95 550.91 P
4 9 Q
0.38 (k1) 352.68 550.91 P
2 10 Q
0.18 ( and) 363.48 550.91 P
4 9 Q
0.38 (k2) 385.76 550.91 P
2 10 Q
0.18 ( are considered to be equal if for) 396.56 550.91 P
(the comparison object) 72 538.91 T
4 9 Q
(comp) 171.31 538.91 T
2 10 Q
(,) 192.91 538.91 T
4 9 Q
(comp\050k1, k2\051 == false && comp\050k2, k1\051 == false) 197.91 538.91 T
2 10 Q
(.) 446.31 538.91 T
-0.43 (An associative container supports) 72 519.91 P
5 F
-0.43 (unique keys) 222.43 519.91 P
2 F
-0.43 ( if it may contain at most one element for each key. Otherwise,) 269.69 519.91 P
(it supports) 72 507.91 T
5 F
(equal keys) 122.37 507.91 T
2 F
(.) 163.39 507.91 T
4 9 Q
(set) 168.39 507.91 T
2 10 Q
( and) 184.59 507.91 T
4 9 Q
(map) 206.52 507.91 T
2 10 Q
( support unique keys.) 222.72 507.91 T
4 9 Q
(multiset) 321.51 507.91 T
2 10 Q
( and) 364.71 507.91 T
4 9 Q
(multimap) 386.64 507.91 T
2 10 Q
( support equal keys.) 429.84 507.91 T
1.13 (For) 72 488.91 P
4 9 Q
2.43 (set) 90.6 488.91 P
2 10 Q
1.13 ( and) 106.8 488.91 P
4 9 Q
2.43 (multiset) 130.98 488.91 P
2 10 Q
1.13 ( the value type is the same as the key type. For) 174.18 488.91 P
4 9 Q
2.43 (map) 395.55 488.91 P
2 10 Q
1.13 ( and) 411.74 488.91 P
4 9 Q
2.43 (multimap) 435.93 488.91 P
2 10 Q
1.13 ( it is equal to) 479.13 488.91 P
4 9 Q
(pair<const Key, T>) 72 476.91 T
2 10 Q
(.) 169.2 476.91 T
4 9 Q
2 (iterator) 72 457.91 P
2 10 Q
0.93 ( of an associative container is of the bidirectional iterator category.) 115.2 457.91 P
4 9 Q
2 (insert) 420.74 457.91 P
2 10 Q
0.93 ( does not affect the) 453.14 457.91 P
-0.17 (validity of iterators and references to the container, and) 72 445.91 P
4 9 Q
-0.37 (erase) 318.17 445.91 P
2 10 Q
-0.17 ( invalidates only the iterators and references) 345.17 445.91 P
(to the erased elements.) 72 433.91 T
0.56 (In the following table,) 72 414.91 P
4 9 Q
1.2 (X) 173.97 414.91 P
2 10 Q
0.56 ( is an associative container class,) 179.37 414.91 P
4 9 Q
1.2 (a) 328.36 414.91 P
2 10 Q
0.56 ( is a value of) 333.76 414.91 P
4 9 Q
1.2 (X) 394.36 414.91 P
2 10 Q
0.56 (,) 399.76 414.91 P
4 9 Q
1.2 (a_uniq) 405.32 414.91 P
2 10 Q
0.56 ( is a value of) 437.72 414.91 P
4 9 Q
1.2 (X) 498.32 414.91 P
2 10 Q
0.56 ( when) 503.72 414.91 P
4 9 Q
1.2 (X) 534.6 414.91 P
2 10 Q
-0.34 (supports unique keys, and) 72 402.91 P
4 9 Q
-0.74 (a_eq) 190.59 402.91 P
2 10 Q
-0.34 ( is a value of) 212.19 402.91 P
4 9 Q
-0.74 (X) 268.31 402.91 P
2 10 Q
-0.34 ( when) 273.71 402.91 P
4 9 Q
-0.74 (X) 302.79 402.91 P
2 10 Q
-0.34 ( supports multiple keys,) 308.19 402.91 P
4 9 Q
-0.74 (i) 416.33 402.91 P
2 10 Q
-0.34 ( and) 421.73 402.91 P
4 9 Q
-0.74 (j) 442.97 402.91 P
2 10 Q
-0.34 ( satisfy input iterator) 448.37 402.91 P
0.23 (requirements and refer to elements of) 72 390.91 P
4 9 Q
0.5 (value_type) 242.01 390.91 P
2 10 Q
0.23 (,) 296.02 390.91 P
4 9 Q
0.5 ([i, j\051) 301.24 390.91 P
2 10 Q
0.23 ( is a valid range,) 334.14 390.91 P
4 9 Q
0.5 (p) 410.14 390.91 P
2 10 Q
0.23 ( is a valid iterator to) 415.54 390.91 P
4 9 Q
0.5 (a) 507.94 390.91 P
2 10 Q
0.23 (,) 513.34 390.91 P
4 9 Q
0.5 (q) 518.57 390.91 P
2 10 Q
0.23 (,) 523.97 390.91 P
4 9 Q
0.5 (q1) 529.2 390.91 P
2 10 Q
0.46 (and) 72 378.91 P
4 9 Q
0.99 (q2) 91.89 378.91 P
2 10 Q
0.46 ( are valid dereferenceable iterators to) 102.69 378.91 P
4 9 Q
0.99 (a) 272.08 378.91 P
2 10 Q
0.46 (,) 277.48 378.91 P
4 9 Q
0.99 ([q1, q2\051) 282.94 378.91 P
2 10 Q
0.46 ( is a valid range,) 327.14 378.91 P
4 9 Q
0.99 (t) 404.28 378.91 P
2 10 Q
0.46 ( is a value of) 409.68 378.91 P
4 9 Q
0.99 (X::value_type) 469.8 378.91 P
2 10 Q
(and) 72 366.91 T
4 9 Q
(k) 91.43 366.91 T
2 10 Q
( is a value of) 96.83 366.91 T
4 9 Q
(X::key_type) 154.65 366.91 T
2 10 Q
(.) 214.05 366.91 T
6 12 Q
(T) 125.11 324.57 T
(able 12: Associative container r) 132.01 324.57 T
(equir) 292.44 324.57 T
(ements \050in addition to container\051) 319.56 324.57 T
3 10 Q
(expression) 101.01 293.91 T
(return type) 197.8 293.91 T
(assertion/note) 328.62 299.91 T
(pre/post-condition) 319.73 287.91 T
(complexity) 470.7 293.91 T
4 9 Q
(X::key_type) 78 266.57 T
(Key) 178.8 266.57 T
3 10 Q
(compile time) 452.4 265.91 T
4 9 Q
(X::key_compare) 78 246.57 T
(Compare) 178.8 246.57 T
3 10 Q
(defaults to) 272.4 245.91 T
4 9 Q
(less<key_type>.) 316.84 245.91 T
3 10 Q
(compile time) 452.4 245.91 T
4 9 Q
(X::value_compare) 78 226.57 T
3 10 Q
(a binary predicate) 178.8 225.91 T
(type) 178.8 213.91 T
-0.18 (is the same as) 272.4 225.91 P
4 9 Q
-0.4 (key_compare) 329.43 225.91 P
3 10 Q
-0.18 ( for) 388.83 225.91 P
4 9 Q
-0.4 (set) 405.13 225.91 P
3 10 Q
-0.18 ( and) 421.33 225.91 P
4 9 Q
(multiset) 272.4 213.91 T
3 10 Q
(;) 315.6 213.91 T
-0.46 (is an ordering relation on pairs induced by) 272.4 201.91 P
-0.2 (the \336rst component \050i.e.) 272.4 189.91 P
4 9 Q
-0.43 (Key) 369.37 189.91 P
3 10 Q
-0.2 (\051 for) 385.57 189.91 P
4 9 Q
-0.43 (map) 405.16 189.91 P
3 10 Q
-0.2 ( and) 421.36 189.91 P
4 9 Q
(multimap.) 272.4 177.91 T
3 10 Q
(compile time) 452.4 225.91 T
4 9 Q
(X\050c\051) 78 158.57 T
(X a\050c\051;) 78 147.57 T
3 10 Q
(constructs an empty container;) 272.4 157.91 T
(uses) 272.4 145.91 T
4 9 Q
(c) 292.12 145.91 T
3 10 Q
( as a comparison object.) 297.52 145.91 T
(constant) 452.4 157.91 T
4 9 Q
(X\050\051) 78 126.57 T
(X a;) 78 115.57 T
3 10 Q
(constructs an empty container;) 272.4 125.91 T
(uses) 272.4 113.91 T
4 9 Q
(Compare\050\051) 292.12 113.91 T
3 10 Q
( as a comparison object.) 340.72 113.91 T
(constant) 452.4 125.91 T
72 314.32 72 106.82 2 L
V
0.5 H
0 Z
N
172.8 314.82 172.8 106.32 2 L
V
N
266.4 314.82 266.4 106.32 2 L
V
N
446.4 314.82 446.4 106.32 2 L
V
N
540 314.32 540 106.82 2 L
V
N
71.75 314.57 540.25 314.57 2 L
V
N
72.25 279.82 539.75 279.82 2 L
V
N
72.25 277.32 539.75 277.32 2 L
V
N
71.75 258.57 540.25 258.57 2 L
V
N
71.75 238.57 540.25 238.57 2 L
V
N
71.75 170.57 540.25 170.57 2 L
V
N
71.75 138.57 540.25 138.57 2 L
V
N
71.75 106.57 540.25 106.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 32
%%Page: "31" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(31) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(X\050i, j, c\051) 78 654 T
(X a\050i, j, c\051;) 78 643 T
3 10 Q
(constructs an empty container and inserts) 272.4 653.33 T
(elements from the range) 272.4 641.33 T
4 9 Q
([i, j\051) 371.82 641.33 T
3 10 Q
( into it;) 404.22 641.33 T
(uses) 272.4 629.33 T
4 9 Q
(c) 292.12 629.33 T
3 10 Q
( as a comparison object.) 297.52 629.33 T
4 9 Q
(NlogN) 452.4 653.33 T
3 10 Q
( in general) 479.4 653.33 T
(\050) 452.4 641.33 T
4 9 Q
(N) 455.73 641.33 T
3 10 Q
( is the distance) 461.13 641.33 T
(from) 452.4 629.33 T
4 9 Q
(i) 474.34 629.33 T
3 10 Q
( to) 479.74 629.33 T
4 9 Q
(j) 492.52 629.33 T
3 10 Q
(\051;) 497.92 629.33 T
(linear if) 452.4 617.33 T
4 9 Q
([i, j\051) 486.28 617.33 T
3 10 Q
( is) 518.68 617.33 T
(sorted with) 452.4 605.33 T
4 9 Q
(value_comp\050\051) 452.4 593.33 T
(X\050i, j\051) 78 574 T
(X a\050i, j\051;) 78 563 T
3 10 Q
(same as above, but uses) 272.4 573.33 T
4 9 Q
(Compare\050\051) 370.16 573.33 T
3 10 Q
( as a) 418.76 573.33 T
(comparison object.) 272.4 561.33 T
(same as above) 452.4 573.33 T
4 9 Q
(a.key_comp\050\051) 78 542 T
(X::key_compare) 178.8 542 T
3 10 Q
(returns the comparison object out of) 272.4 541.33 T
(which) 272.4 529.33 T
4 9 Q
(a) 299.34 529.33 T
3 10 Q
( was constructed.) 304.74 529.33 T
(constant) 452.4 541.33 T
4 9 Q
(a.value_comp\050\051) 78 510 T
(X::value_compar) 178.8 510 T
(e) 178.8 499 T
3 10 Q
(returns an object of) 272.4 509.33 T
4 9 Q
(value_compare) 352.38 509.33 T
3 10 Q
(constructed out of the comparison object.) 272.4 497.33 T
(constant) 452.4 509.33 T
4 9 Q
(a_uniq.insert\050t\051) 78 478 T
(pair<iterator,) 178.8 477.33 T
(bool>) 178.8 465.33 T
3 10 Q
-0.13 (inserts) 272.4 477.33 P
4 9 Q
-0.27 (t) 300.88 477.33 P
3 10 Q
-0.13 ( if and only if there is no element) 306.28 477.33 P
0 (in the container with key equal to the key) 272.4 465.33 P
-0.46 (of) 272.4 453.33 P
4 9 Q
-1 (t) 282.77 453.33 P
3 10 Q
-0.46 (. The) 288.17 453.33 P
4 9 Q
-1 (bool) 310.3 453.33 P
3 10 Q
-0.46 ( component of the returned) 331.9 453.33 P
(pair indicates whether the insertion takes) 272.4 441.33 T
(place and the) 272.4 429.33 T
4 9 Q
(iterator) 327.66 429.33 T
3 10 Q
( component of) 370.86 429.33 T
(the pair points to the element with key) 272.4 417.33 T
(equal to the key of) 272.4 405.33 T
4 9 Q
(t) 349.33 405.33 T
3 10 Q
(.) 354.73 405.33 T
(logarithmic) 452.4 477.33 T
4 9 Q
(a_eq.insert\050t\051) 78 386 T
(iterator) 178.8 385.33 T
3 10 Q
(inserts) 272.4 385.33 T
4 9 Q
(t) 301.01 385.33 T
3 10 Q
( and returns the iterator pointing) 306.41 385.33 T
(to the newly inserted element.) 272.4 373.33 T
(logarithmic) 452.4 385.33 T
4 9 Q
(a.insert\050p, t\051) 78 354 T
(iterator) 178.8 354 T
3 10 Q
-0.13 (inserts) 272.4 353.33 P
4 9 Q
-0.27 (t) 300.88 353.33 P
3 10 Q
-0.13 ( if and only if there is no element) 306.28 353.33 P
(with key equal to the key of) 272.4 341.33 T
4 9 Q
(t) 386.55 341.33 T
3 10 Q
( in contain-) 391.95 341.33 T
(ers with unique keys; always inserts) 272.4 329.33 T
4 9 Q
(t) 419.05 329.33 T
3 10 Q
( in) 424.45 329.33 T
(containers with equal keys.) 272.4 317.33 T
(always returns the iterator pointing to the) 272.4 305.33 T
(element with key equal to the key of) 272.4 293.33 T
4 9 Q
(t) 420.71 293.33 T
3 10 Q
(.) 426.11 293.33 T
(iterator) 272.4 281.33 T
4 9 Q
(p) 303.78 281.33 T
3 10 Q
( is a hint pointing to where the) 309.18 281.33 T
(insert should start to search.) 272.4 269.33 T
(logarithmic in gen-) 452.4 353.33 T
(eral, but amortized) 452.4 341.33 T
(constant if) 452.4 329.33 T
4 9 Q
(t) 496.84 329.33 T
3 10 Q
( is) 502.24 329.33 T
(inserted right after) 452.4 317.33 T
4 9 Q
(p) 452.4 305.33 T
3 10 Q
(.) 457.8 305.33 T
4 9 Q
(a.insert\050i, j\051) 78 250 T
3 10 Q
(result is not used) 178.8 249.33 T
(inserts the elements from the range) 272.4 249.33 T
4 9 Q
([i,) 415.15 249.33 T
(j\051) 272.4 237.33 T
3 10 Q
( into the container) 283.2 237.33 T
(.) 355.14 237.33 T
4 9 Q
(Nlog\050size\050\051+N\051) 452.4 249.33 T
3 10 Q
(\050) 452.4 237.33 T
4 9 Q
(N) 455.73 237.33 T
3 10 Q
( is the distance) 461.13 237.33 T
(from) 452.4 225.33 T
4 9 Q
(i) 474.34 225.33 T
3 10 Q
( to) 479.74 225.33 T
4 9 Q
(j) 492.52 225.33 T
3 10 Q
(\051 in gen-) 497.92 225.33 T
(eral; linear if) 452.4 213.33 T
4 9 Q
([i,) 506.55 213.33 T
(j\051) 452.4 201.33 T
3 10 Q
( is sorted accord-) 463.2 201.33 T
(ing to) 452.4 189.33 T
4 9 Q
(value_comp\050\051) 452.4 177.33 T
(a.erase\050k\051) 78 158 T
(size_type) 178.8 158 T
3 10 Q
(erases all the elements in the container) 272.4 157.33 T
(with key equal to) 272.4 145.33 T
4 9 Q
(k) 344.06 145.33 T
3 10 Q
(.) 349.46 145.33 T
(returns the number of erased elements.) 272.4 133.33 T
4 9 Q
(log\050size\050\051\051 +) 452.4 158 T
(count\050k\051) 452.4 147 T
(a.erase\050q\051) 78 114 T
3 10 Q
(result is not used) 178.8 114 T
(erases the element pointed to by) 272.4 113.33 T
4 9 Q
(q) 403.49 113.33 T
3 10 Q
(.) 408.89 113.33 T
(amortized constant) 452.4 113.33 T
6 12 Q
(T) 125.11 712 T
(able 12: Associative container r) 132.01 712 T
(equir) 292.44 712 T
(ements \050in addition to container\051) 319.56 712 T
3 10 Q
(expression) 101.01 681.33 T
(return type) 197.8 681.33 T
(assertion/note) 328.62 687.33 T
(pre/post-condition) 319.73 675.33 T
(complexity) 470.7 681.33 T
72 701.75 72 106.25 2 L
V
0.5 H
0 Z
N
172.8 702.25 172.8 105.75 2 L
V
N
266.4 702.25 266.4 105.75 2 L
V
N
446.4 702.25 446.4 105.75 2 L
V
N
540 701.75 540 106.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 586 540.25 586 2 L
V
N
71.75 554 540.25 554 2 L
V
N
71.75 522 540.25 522 2 L
V
N
71.75 490 540.25 490 2 L
V
N
71.75 398 540.25 398 2 L
V
N
71.75 366 540.25 366 2 L
V
N
71.75 262 540.25 262 2 L
V
N
71.75 170 540.25 170 2 L
V
N
71.75 126 540.25 126 2 L
V
N
71.75 106 540.25 106 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 33
%%Page: "32" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(32) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.36 (The fundamental property of iterators of associative containers is that they iterate through the containers) 72 365.33 P
-0.03 (in the non-descending order of keys where non-descending is defined by the comparison that was used to) 72 353.33 P
(construct them. For any two dereferenceable iterators) 72 341.33 T
4 9 Q
(i) 310.61 341.33 T
2 10 Q
( and) 316.01 341.33 T
4 9 Q
(j) 337.94 341.33 T
2 10 Q
( such that distance from) 343.34 341.33 T
4 9 Q
(i) 451.85 341.33 T
2 10 Q
( to) 457.25 341.33 T
4 9 Q
(j) 470.97 341.33 T
2 10 Q
( is positive,) 476.37 341.33 T
4 9 Q
(value_comp\050*j, *i\051 == false) 108 319 T
2 10 Q
(For associative containers with unique keys the stronger condition holds,) 72 300.33 T
4 9 Q
(value_comp\050*i, *j\051 == true.) 108 278 T
9 10 Q
(8.2.1 Set) 72 257.71 T
4 9 Q
1.13 (set) 72 240.85 P
2 10 Q
0.52 ( is a kind of associative container that supports unique keys \050contains at most one of each key value\051) 88.2 240.85 P
(and provides for fast retrieval of the keys themselves.) 72 228.85 T
4 9 Q
(template <class Key, class Compare = less<Key>,) 108 206.52 T
(template <class U> class Allocator = allocator>) 180 195.52 T
(class set {) 108 184.52 T
(public:) 108 173.52 T
(// typedefs:) 108 151.52 T
(typedef Key key_type;) 144 129.52 T
(typedef Key value_type;) 144 118.52 T
(typedef Allocator<Key>::pointer pointer;) 144 107.52 T
(typedef Allocator<Key>::reference reference;) 144 96.52 T
(typedef Allocator<Key>::const_reference const_reference;) 144 85.52 T
(a.erase\050q1, q2\051) 78 654 T
3 10 Q
(result is not used) 178.8 654 T
-0.1 (erases all the elements in the range) 272.4 653.33 P
4 9 Q
-0.22 ([q1,) 413.61 653.33 P
(q2\051) 272.4 641.33 T
3 10 Q
(.) 288.6 641.33 T
4 9 Q
(log\050size\050\051\051+ N) 452.4 653.33 T
3 10 Q
(where) 452.4 641.33 T
4 9 Q
(N) 479.33 641.33 T
3 10 Q
( is the dis-) 484.73 641.33 T
-0.2 (tance from) 452.4 629.33 P
4 9 Q
-0.44 (q1) 497.53 629.33 P
3 10 Q
-0.2 ( to) 508.33 629.33 P
4 9 Q
-0.44 (q2) 520.7 629.33 P
3 10 Q
-0.2 (.) 531.5 629.33 P
4 9 Q
(a.find\050k\051) 78 610 T
(iterator;) 178.8 610 T
(const_iterator) 178.8 598.33 T
3 10 Q
(for constant) 178.8 586.33 T
4 9 Q
(a) 228.79 586.33 T
3 10 Q
(returns an iterator pointing to an element) 272.4 609.33 T
(with the key equal to) 272.4 597.33 T
4 9 Q
(k) 358.78 597.33 T
3 10 Q
(, or) 364.18 597.33 T
4 9 Q
(a.end\050\051) 380.01 597.33 T
3 10 Q
( if) 417.81 597.33 T
(such an element is not found.) 272.4 585.33 T
(logarithmic) 452.4 609.33 T
4 9 Q
(a.count\050k\051) 78 566 T
(size_type) 178.8 566 T
3 10 Q
(returns the number of elements with key) 272.4 565.33 T
(equal to) 272.4 553.33 T
4 9 Q
(k) 306.84 553.33 T
3 10 Q
(.) 312.24 553.33 T
4 9 Q
(log\050size\050\051\051+) 452.4 566 T
(count\050k\051) 452.4 555 T
(a.lower_bound\050k\051) 78 534 T
(iterator;) 178.8 534 T
(const_iterator) 178.8 522.33 T
3 10 Q
(for constant) 178.8 510.33 T
4 9 Q
(a) 228.79 510.33 T
3 10 Q
(returns an iterator pointing to the \336rst ele-) 272.4 533.33 T
(ment with key not less than) 272.4 521.33 T
4 9 Q
(k) 384.62 521.33 T
3 10 Q
(.) 390.02 521.33 T
(logarithmic) 452.4 533.33 T
4 9 Q
(a.upper_bound\050k\051) 78 491 T
3 10 Q
(iterator;) 178.8 490.33 T
4 9 Q
(const_iterator) 178.8 478.33 T
3 10 Q
(for constant) 178.8 466.33 T
4 9 Q
(a) 228.79 466.33 T
3 10 Q
(returns an iterator pointing to the \336rst ele-) 272.4 490.33 T
(ment with key greater than) 272.4 478.33 T
4 9 Q
(k) 382.1 478.33 T
3 10 Q
(.) 387.5 478.33 T
(logarithmic) 452.4 490.33 T
4 9 Q
(a.equal_range\050k\051) 78 447 T
(pair<iterator,) 178.8 447 T
(iterator>;) 178.8 436 T
(pair<const_iter) 178.8 425 T
(ator,) 178.8 414 T
(const_iterator>) 178.8 403 T
3 10 Q
(for constant) 178.8 391.33 T
4 9 Q
(a) 228.79 391.33 T
3 10 Q
(equivalent to) 272.4 446.33 T
4 9 Q
(make_pair\050a.lower_bound\050k\051,) 272.4 434.33 T
(a.upper_bound\050k\051\051) 272.4 422.33 T
3 10 Q
(.) 364.2 422.33 T
(logarithmic) 452.4 446.33 T
6 12 Q
(T) 125.11 712 T
(able 12: Associative container r) 132.01 712 T
(equir) 292.44 712 T
(ements \050in addition to container\051) 319.56 712 T
3 10 Q
(expression) 101.01 681.33 T
(return type) 197.8 681.33 T
(assertion/note) 328.62 687.33 T
(pre/post-condition) 319.73 675.33 T
(complexity) 470.7 681.33 T
72 701.75 72 384.25 2 L
V
0.5 H
0 Z
N
172.8 702.25 172.8 383.75 2 L
V
N
266.4 702.25 266.4 383.75 2 L
V
N
446.4 702.25 446.4 383.75 2 L
V
N
540 701.75 540 384.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 622 540.25 622 2 L
V
N
71.75 578 540.25 578 2 L
V
N
71.75 546 540.25 546 2 L
V
N
71.75 503 540.25 503 2 L
V
N
71.75 459 540.25 459 2 L
V
N
71.75 384 540.25 384 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 34
%%Page: "33" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(33) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(typedef Compare key_compare;) 144 714 T
(typedef Compare value_compare;) 144 703 T
(typedef iterator;) 144 692 T
(typedef iterator const_iterator;) 144 681 T
(typedef size_type;) 144 670 T
(typedef difference_type;) 144 659 T
(typedef reverse_iterator;) 144 648 T
(typedef const_reverse_iterator;) 144 637 T
(// allocation/deallocation:) 108 615 T
(set\050const Compare& comp = Compare\050\051\051;) 144 593 T
(template <class InputIterator>) 144 582 T
(set\050InputIterator first, InputIterator last,) 144 571 T
(const Compare& comp = Compare\050\051\051;) 180 560 T
(set\050const set<Key, Compare, Allocator>& x\051;) 144 549 T
(~set\050\051;) 144 538 T
(set<Key, Compare, Allocator>& operator=\050const set<Key, Compare,) 144 527 T
(Allocator>& x\051;) 180 516 T
(void swap\050set<Key, Compare, Allocator>& x\051;) 144 505 T
(// accessors:) 108 483 T
(key_compare key_comp\050\051 const;) 144 461 T
(value_compare value_comp\050\051 const;) 144 450 T
(iterator begin\050\051 const;) 144 439 T
(iterator end\050\051 const;) 144 428 T
(reverse_iterator rbegin\050\051 const;) 144 417 T
(reverse_iterator rend\050\051 const;) 144 406 T
(bool empty\050\051 const;) 144 395 T
(size_type size\050\051 const;) 144 384 T
(size_type max_size\050\051 const;) 144 373 T
(// insert/erase:) 108 351 T
(pair<iterator, bool> insert\050const value_type& x\051;) 144 329 T
(iterator insert\050iterator position, const value_type& x\051;) 144 318 T
(template <class InputIterator>) 144 307 T
(void insert\050InputIterator first, InputIterator last\051;) 144 296 T
(void erase\050iterator position\051;) 144 285 T
(size_type erase\050const key_type& x\051;) 144 274 T
(void erase\050iterator first, iterator last\051;) 144 263 T
(// set operations:) 108 241 T
(iterator find\050const key_type& x\051 const;) 144 219 T
(size_type count\050const key_type& x\051 const;) 144 208 T
(iterator lower_bound\050const key_type& x\051 const;) 144 197 T
(iterator upper_bound\050const key_type& x\051 const;) 144 186 T
(pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 144 175 T
(};) 108 164 T
(template <class Key, class Compare, class Allocator>) 108 142 T
(bool operator==\050const set<Key, Compare, Allocator>& x,) 108 131 T
(const set<Key, Compare, Allocator>& y\051;) 180 120 T
(template <class Key, class Compare, class Allocator>) 108 98 T
(bool operator<\050const set<Key, Compare, Allocator>& x,) 108 87 T
(const set<Key, Compare, Allocator>& y\051;) 180 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 35
%%Page: "34" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(34) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
8.23 (iterator) 72 713.33 P
2 10 Q
3.81 ( is a constant bidirectional iterator referring to) 115.2 713.33 P
4 9 Q
8.23 (const value_type) 351.48 713.33 P
2 10 Q
3.81 (. The exact type is) 446.1 713.33 P
(implementation dependent and determined by) 72 701.33 T
4 9 Q
(Allocator.) 281.98 701.33 T
(const_iterator) 72 682.33 T
2 10 Q
( is the same type as) 147.6 682.33 T
4 9 Q
(iterator) 235.34 682.33 T
2 10 Q
(.) 278.54 682.33 T
4 9 Q
0.8 (size_type) 72 663.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 663.33 P
4 9 Q
(Allocator) 72 651.33 T
2 10 Q
(.) 120.6 651.33 T
4 9 Q
0.67 (difference_type) 72 632.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 632.33 P
(by) 72 620.33 T
4 9 Q
(Allocator) 85.59 620.33 T
2 10 Q
(.) 134.19 620.33 T
9 F
(8.2.2 Multiset) 72 599.71 T
4 9 Q
0.6 (multiset) 72 582.85 P
2 10 Q
0.28 ( is a kind of associative container that supports equal keys \050possibly contains multiple copies of) 115.2 582.85 P
(the same key value\051 and provides for fast retrieval of the keys themselves.) 72 570.85 T
4 9 Q
(template <class Key, class Compare = less<Key>,) 108 548.52 T
(template <class U> class Allocator = allocator>) 180 537.52 T
(class multiset {) 108 526.52 T
(public:) 108 515.52 T
(// typedefs:) 108 493.52 T
(typedef Key key_type;) 144 471.52 T
(typedef Key value_type;) 144 460.52 T
(typedef Allocator<Key>::pointer pointer;) 144 449.52 T
(typedef Allocator<Key>::reference reference;) 144 438.52 T
(typedef Allocator<Key>::const_reference const_reference;) 144 427.52 T
(typedef Compare key_compare;) 144 416.52 T
(typedef Compare value_compare;) 144 405.52 T
(typedef iterator;) 144 394.52 T
(typedef iterator const_iterator;) 144 383.52 T
(typedef size_type;) 144 372.52 T
(typedef difference_type;) 144 361.52 T
(typedef reverse_iterator;) 144 350.52 T
(typedef const_reverse_iterator;) 144 339.52 T
(// allocation/deallocation:) 108 317.52 T
(multiset\050const Compare& comp = Compare\050\051\051;) 144 295.52 T
(template <class InputIterator>) 144 284.52 T
(multiset\050InputIterator first, InputIterator last,) 144 273.52 T
(const Compare& comp = Compare\050\051\051;) 180 262.52 T
(multiset\050const multiset<Key, Compare, Allocator>& x\051;) 144 251.52 T
(~multiset\050\051;) 144 240.52 T
-0.6 (multiset<Key, Compare, Allocator>& operator=\050const multiset<Key, Compare,) 144 229.52 P
(Allocator>& x\051;) 180 218.52 T
(void swap\050multiset<Key, Compare, Allocator>& x\051;) 144 207.52 T
(// accessors:) 108 185.52 T
(key_compare key_comp\050\051 const;) 144 163.52 T
(value_compare value_comp\050\051 const;) 144 152.52 T
(iterator begin\050\051 const;) 144 141.52 T
(iterator end\050\051 const;) 144 130.52 T
(reverse_iterator rbegin\050\051;) 144 119.52 T
(reverse_iterator rend\050\051;) 144 108.52 T
(bool empty\050\051 const;) 144 97.52 T
(size_type size\050\051 const;) 144 86.52 T
(size_type max_size\050\051 const;) 144 75.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 36
%%Page: "35" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(35) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(// insert/erase:) 108 703 T
(iterator insert\050const value_type& x\051;) 144 681 T
(iterator insert\050iterator position, const value_type& x\051;) 144 670 T
(template <class InputIterator>) 144 659 T
(void insert\050InputIterator first, InputIterator last\051;) 144 648 T
(void erase\050iterator position\051;) 144 637 T
(size_type erase\050const key_type& x\051;) 144 626 T
(void erase\050iterator first, iterator last\051;) 144 615 T
(// multiset operations:) 108 593 T
(iterator find\050const key_type& x\051 const;) 144 571 T
(size_type count\050const key_type& x\051 const;) 144 560 T
(iterator lower_bound\050const key_type& x\051 const;) 144 549 T
(iterator upper_bound\050const key_type& x\051 const;) 144 538 T
(pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 144 527 T
(};) 108 516 T
(template <class Key, class Compare, class Allocator>) 108 494 T
(bool operator==\050const multiset<Key, Compare, Allocator>& x,) 108 483 T
(const multiset<Key, Compare, Allocator>& y\051;) 180 472 T
(template <class Key, class Compare, class Allocator>) 108 450 T
(bool operator<\050const multiset<Key, Compare, Allocator>& x,) 108 439 T
(const multiset<Key, Compare, Allocator>& y\051;) 180 428 T
8.23 (iterator) 72 409.33 P
2 10 Q
3.81 ( is a constant bidirectional iterator referring to) 115.2 409.33 P
4 9 Q
8.23 (const value_type) 351.48 409.33 P
2 10 Q
3.81 (. The exact type is) 446.1 409.33 P
(implementation dependent and determined by) 72 397.33 T
4 9 Q
(Allocator.) 281.98 397.33 T
(const_iterator) 72 378.33 T
2 10 Q
( is the same type as) 147.6 378.33 T
4 9 Q
(iterator) 235.34 378.33 T
2 10 Q
(.) 278.54 378.33 T
4 9 Q
0.8 (size_type) 72 359.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 359.33 P
4 9 Q
(Allocator) 72 347.33 T
2 10 Q
(.) 120.6 347.33 T
4 9 Q
0.67 (difference_type) 72 328.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 328.33 P
(by) 72 316.33 T
4 9 Q
(Allocator) 85.59 316.33 T
2 10 Q
(.) 134.19 316.33 T
9 F
(8.2.3 Map) 72 295.71 T
4 9 Q
1.13 (map) 72 278.85 P
2 10 Q
0.52 ( is a kind of associative container that supports unique keys \050contains at most one of each key value\051) 88.2 278.85 P
(and provides for fast retrieval of values of another type) 72 266.85 T
4 9 Q
(T) 318.75 266.85 T
2 10 Q
( based on the keys.) 324.15 266.85 T
4 9 Q
(template <class Key, class T, class Compare = less<Key>,) 108 244.52 T
(template <class U> class Allocator = allocator>) 180 233.52 T
(class map {) 108 222.52 T
(public:) 108 211.52 T
(// typedefs:) 108 189.52 T
(typedef Key key_type;) 144 167.52 T
(typedef pair<const Key, T> value_type;) 144 156.52 T
(typedef Compare key_compare;) 144 145.52 T
(class value_compare) 144 134.52 T
(: public binary_function<) 180 123.52 T
(value_type, value_type, bool> {) 315 123.52 T
(friend class map;) 144 112.52 T
(protected:) 144 101.52 T
(Compare comp;) 180 90.52 T
(value_compare\050Compare c\051 : comp\050c\051 {}) 180 79.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 37
%%Page: "36" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(36) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(public:) 144 714 T
(bool operator\050\051\050const value_type& x, const value_type& y\051 {) 180 703 T
(return comp\050x.first, y.first\051;) 216 692 T
(}) 180 681 T
(};) 144 670 T
(typedef iterator;) 144 659 T
(typedef const_iterator;) 144 648 T
(typedef Allocator<value_type>::pointer pointer;) 144 637 T
(typedef Allocator<value_type>::reference reference;) 144 626 T
(typedef Allocator<value_type>::const_reference const_reference;) 144 615 T
(typedef size_type;) 144 604 T
(typedef difference_type;) 144 593 T
(typedef reverse_iterator;) 144 582 T
(typedef const_reverse_iterator;) 144 571 T
(// allocation/deallocation:) 108 549 T
(map\050const Compare& comp = Compare\050\051\051;) 144 527 T
(template <class InputIterator>) 144 516 T
(map\050InputIterator first, InputIterator last,) 144 505 T
(const Compare& comp = Compare\050\051\051;) 180 494 T
(map\050const map<Key, T, Compare, Allocator>& x\051;) 144 483 T
(~map\050\051;) 144 472 T
(map<Key, T, Compare, Allocator>&) 144 461 T
(operator=\050const map<Key, T, Compare, Allocator>& x\051;) 180 450 T
(void swap\050map<Key, T, Compare, Allocator>& x\051;) 144 439 T
(// accessors:) 108 417 T
(key_compare key_comp\050\051 const;) 144 395 T
(value_compare value_comp\050\051 const;) 144 384 T
(iterator begin\050\051;) 144 373 T
(const_iterator begin\050\051 const;) 144 362 T
(iterator end\050\051;) 144 351 T
(const_iterator end\050\051 const;) 144 340 T
(reverse_iterator rbegin\050\051;) 144 329 T
(const_reverse_iterator rbegin\050\051;) 144 318 T
(reverse_iterator rend\050\051;) 144 307 T
(const_reverse_iterator rend\050\051;) 144 296 T
(bool empty\050\051 const;) 144 285 T
(size_type size\050\051 const;) 144 274 T
(size_type max_size\050\051 const;) 144 263 T
(Allocator<T>::reference operator[]\050const key_type& x\051;) 144 252 T
(// insert/erase:) 108 230 T
(pair<iterator, bool> insert\050const value_type& x\051;) 144 208 T
(iterator insert\050iterator position, const value_type& x\051;) 144 197 T
(template <class InputIterator>) 144 186 T
(void insert\050InputIterator first, InputIterator last\051;) 144 175 T
(void erase\050iterator position\051;) 144 164 T
(size_type erase\050const key_type& x\051;) 144 153 T
(void erase\050iterator first, iterator last\051;) 144 142 T
(// map operations:) 108 120 T
(iterator find\050const key_type& x\051;) 144 98 T
(const_iterator find\050const key_type& x\051 const;) 144 87 T
(size_type count\050const key_type& x\051 const;) 144 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 38
%%Page: "37" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(37) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(iterator lower_bound\050const key_type& x\051;) 144 714 T
(const_iterator lower_bound\050const key_type& x\051 const;) 144 703 T
(iterator upper_bound\050const key_type& x\051;) 144 692 T
(const_iterator upper_bound\050const key_type& x\051 const;) 144 681 T
(pair<iterator, iterator> equal_range\050const key_type& x\051;) 144 670 T
-0.72 (pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 144 659 P
(};) 108 648 T
(template <class Key, class T, class Compare, class Allocator>) 108 626 T
(bool operator==\050const map<Key, T, Compare, Allocator>& x,) 108 615 T
(const map<Key, T, Compare, Allocator>& y\051;) 180 604 T
(template <class Key, class T, class Compare, class Allocator>) 108 582 T
(bool operator<\050const map<Key, T, Compare, Allocator>& x,) 108 571 T
(const map<Key, T, Compare, Allocator>& y\051;) 180 560 T
0.5 (iterator) 72 541.33 P
2 10 Q
0.23 ( is a bidirectional iterator referring to) 115.2 541.33 P
4 9 Q
0.5 (value_type) 282.84 541.33 P
2 10 Q
0.23 (. The exact type is implementation dependent) 336.84 541.33 P
(and determined by) 72 529.33 T
4 9 Q
(Allocator.) 158.88 529.33 T
3.29 (const_iterator) 72 510.33 P
2 10 Q
1.52 ( is a constant bidirectional iterator referring to) 147.6 510.33 P
4 9 Q
3.29 (const value_type) 365.57 510.33 P
2 10 Q
1.52 (. The exact type is) 455.26 510.33 P
0.37 (implementation dependent and determined by) 72 498.33 P
4 9 Q
0.8 (Allocator) 283.83 498.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 498.33 P
4 9 Q
(const_iterator) 72 486.33 T
2 10 Q
( out of) 147.6 486.33 T
4 9 Q
(iterator) 178.64 486.33 T
2 10 Q
(.) 221.84 486.33 T
4 9 Q
0.8 (size_type) 72 467.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 467.33 P
4 9 Q
(Allocator) 72 455.33 T
2 10 Q
(.) 120.6 455.33 T
4 9 Q
0.67 (difference_type) 72 436.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 436.33 P
(by) 72 424.33 T
4 9 Q
(Allocator) 85.59 424.33 T
2 10 Q
(.) 134.19 424.33 T
5.18 (In addition to the standard set of member functions of associative containers,) 72 405.33 P
4 9 Q
11.19 (map) 477 405.33 P
2 10 Q
5.18 ( provides) 493.2 405.33 P
4 9 Q
-0.8 (Allocator<T>::reference operator[]\050const key_type&\051) 72 393.33 P
2 10 Q
-0.37 (. For a map) 345.81 393.33 P
4 9 Q
-0.8 (m) 396.65 393.33 P
2 10 Q
-0.37 ( and key) 402.05 393.33 P
4 9 Q
-0.8 (k) 441.28 393.33 P
2 10 Q
-0.37 (,) 446.68 393.33 P
4 9 Q
-0.8 (m[k]) 451.32 393.33 P
2 10 Q
-0.37 ( is semantically) 472.92 393.33 P
(equivalent to) 72 381.33 T
4 9 Q
(\050*\050\050m.insert\050make_pair\050k, T\050\051\051\051\051.first\051\051.second) 132.48 381.33 T
2 10 Q
(.) 386.28 381.33 T
9 F
(8.2.4 Multimap) 72 360.71 T
4 9 Q
0.6 (multimap) 72 343.85 P
2 10 Q
0.28 ( is a kind of associative container that supports equal keys \050possibly contains multiple copies of) 115.2 343.85 P
(the same key value\051 and provides for fast retrieval of values of another type) 72 331.85 T
4 9 Q
(T) 409.1 331.85 T
2 10 Q
( based on the keys.) 414.5 331.85 T
4 9 Q
(template <class Key, class T, class Compare = less<Key>,) 108 309.52 T
(template <class U> class Allocator = allocator>) 180 298.52 T
(class multimap {) 108 287.52 T
(public:) 108 276.52 T
(// typedefs:) 108 254.52 T
(typedef Key key_type;) 144 232.52 T
(typedef pair<const Key, T> value_type;) 144 221.52 T
(typedef Compare key_compare;) 144 210.52 T
(class value_compare) 144 199.52 T
(: public binary_function<) 180 188.52 T
(value_type, value_type, bool> {) 315 188.52 T
(friend class multimap;) 144 177.52 T
(protected:) 144 166.52 T
(Compare comp;) 180 155.52 T
(value_compare\050Compare c\051 : comp\050c\051 {}) 180 144.52 T
(public:) 144 133.52 T
(bool operator\050\051\050const value_type& x, const value_type& y\051 {) 180 122.52 T
(return comp\050x.first, y.first\051;) 216 111.52 T
(}) 180 100.52 T
(};) 144 89.52 T
(typedef iterator;) 144 78.52 T
52 390 54 400 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 39
%%Page: "38" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(38) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(typedef const_iterator;) 144 714 T
(typedef Allocator<value_type>::pointer pointer;) 144 703 T
(typedef Allocator<value_type>::reference reference;) 144 692 T
(typedef Allocator<value_type>::const_reference const_reference;) 144 681 T
(typedef size_type;) 144 670 T
(typedef difference_type;) 144 659 T
(typedef reverse_iterator;) 144 648 T
(typedef const_reverse_iterator;) 144 637 T
(// allocation/deallocation:) 108 615 T
(multimap\050const Compare& comp = Compare\050\051\051;) 144 593 T
(template <class InputIterator>) 144 582 T
(multimap\050InputIterator first, InputIterator last,) 144 571 T
(const Compare& comp = Compare\050\051\051;) 180 560 T
(multimap\050const multimap<Key, T, Compare, Allocator>& x\051;) 144 549 T
(~multimap\050\051;) 144 538 T
(multimap<Key, T, Compare, Allocator>&) 144 527 T
(operator=\050const multimap<Key, T, Compare, Allocator>& x\051;) 180 516 T
(void swap\050multimap<Key, T, Compare, Allocator>& x\051;) 144 505 T
(// accessors:) 108 483 T
(key_compare key_comp\050\051 const;) 144 461 T
(value_compare value_comp\050\051 const;) 144 450 T
(iterator begin\050\051;) 144 439 T
(const_iterator begin\050\051 const;) 144 428 T
(iterator end\050\051;) 144 417 T
(const_iterator end\050\051 const;) 144 406 T
(reverse_iterator rbegin\050\051;) 144 395 T
(const_reverse_iterator rbegin\050\051;) 144 384 T
(reverse_iterator rend\050\051;) 144 373 T
(const_reverse_iterator rend\050\051;) 144 362 T
(bool empty\050\051 const;) 144 351 T
(size_type size\050\051 const;) 144 340 T
(size_type max_size\050\051 const;) 144 329 T
(// insert/erase:) 108 307 T
(iterator insert\050const value_type& x\051;) 144 285 T
(iterator insert\050iterator position, const value_type& x\051;) 144 274 T
(template <class InputIterator>) 144 263 T
(void insert\050InputIterator first, InputIterator last\051;) 144 252 T
(void erase\050iterator position\051;) 144 241 T
(size_type erase\050const key_type& x\051;) 144 230 T
(void erase\050iterator first, iterator last\051;) 144 219 T
(// multimap operations:) 108 197 T
(iterator find\050const key_type& x\051;) 144 175 T
(const_iterator find\050const key_type& x\051 const;) 144 164 T
(size_type count\050const key_type& x\051 const;) 144 153 T
(iterator lower_bound\050const key_type& x\051;) 144 142 T
(const_iterator lower_bound\050const key_type& x\051 const;) 144 131 T
(iterator upper_bound\050const key_type& x\051;) 144 120 T
(const_iterator upper_bound\050const key_type& x\051 const;) 144 109 T
(pair<iterator, iterator> equal_range\050const key_type& x\051;) 144 98 T
-0.72 (pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 144 87 P
(};) 108 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 40
%%Page: "39" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(39) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class Key, class T, class Compare, class Allocator>) 108 703 T
(bool operator==\050const multimap<Key, T, Compare, Allocator>& x,) 108 692 T
(const multimap<Key, T, Compare, Allocator>& y\051;) 180 681 T
(template <class Key, class T, class Compare, class Allocator>) 108 659 T
(bool operator<\050const multimap<Key, T, Compare, Allocator>& x,) 108 648 T
(const multimap<Key, T, Compare, Allocator>& y\051;) 180 637 T
0.5 (iterator) 72 618.33 P
2 10 Q
0.23 ( is a bidirectional iterator referring to) 115.2 618.33 P
4 9 Q
0.5 (value_type) 282.84 618.33 P
2 10 Q
0.23 (. The exact type is implementation dependent) 336.84 618.33 P
(and determined by) 72 606.33 T
4 9 Q
(Allocator.) 158.88 606.33 T
0.74 (const_iterator) 72 587.33 P
2 10 Q
0.34 ( is the a constant bidirectional iterator referring to) 147.6 587.33 P
4 9 Q
0.74 (const value_type) 372.84 587.33 P
2 10 Q
0.34 (. The exact type is) 459.98 587.33 P
0.37 (implementation dependent and determined by) 72 575.33 P
4 9 Q
0.8 (Allocator) 283.83 575.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 575.33 P
4 9 Q
(const_iterator) 72 563.33 T
2 10 Q
( out of) 147.6 563.33 T
4 9 Q
(iterator) 178.64 563.33 T
2 10 Q
(.) 221.84 563.33 T
4 9 Q
0.8 (size_type) 72 544.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 544.33 P
4 9 Q
(Allocator) 72 532.33 T
2 10 Q
(.) 120.6 532.33 T
4 9 Q
0.67 (difference_type) 72 513.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 513.33 P
(by) 72 501.33 T
4 9 Q
(Allocator) 85.59 501.33 T
2 10 Q
(.) 134.19 501.33 T
0 12 Q
(9  Stream iterators) 72 471.25 T
2 10 Q
1.15 (To make it possible for algorithmic templates to work directly with input/output streams, appropriate) 72 452.96 P
(iterator-like template classes are provided. For example,) 72 440.96 T
4 9 Q
(partial_sum_copy\050istream_iterator<double>\050cin\051,) 108 418.62 T
(istream_iterator<double>\050\051,) 361.8 418.62 T
( ostream_iterator<double>\050cout, \323\134n\323\051\051;) 180 407.62 T
2 10 Q
(reads a file containing floating point numbers from) 72 388.96 T
4 9 Q
(cin) 300.5 388.96 T
2 10 Q
(, and prints the partial sums onto) 316.7 388.96 T
4 9 Q
(cout) 466.07 388.96 T
2 10 Q
(.) 487.67 388.96 T
0 11 Q
(9.1 Istream Iterator) 72 365.61 T
4 9 Q
0.92 (istream_iterator<T>) 72 348.53 P
2 10 Q
0.43 ( reads \050using) 174.6 348.53 P
4 9 Q
0.92 (operator>>) 235.36 348.53 P
2 10 Q
0.43 (\051 successive elements from the input stream for which it) 289.36 348.53 P
0.1 (was constructed. After it is constructed, and every time ++ is used, the iterator reads and stores a value of) 72 336.53 P
4 9 Q
0.9 (T) 72 324.53 P
2 10 Q
0.42 (. If the end of stream is reached \050) 77.4 324.53 P
4 9 Q
0.9 (operator void*\050\051) 224.76 324.53 P
2 10 Q
0.42 ( on the stream returns) 312.05 324.53 P
4 9 Q
0.9 (false) 413.89 324.53 P
2 10 Q
0.42 (\051, the iterator becomes) 440.89 324.53 P
0.14 (equal to the) 72 312.53 P
5 F
0.14 (end-of-stream) 126.84 312.53 P
2 F
0.14 ( iterator value. The constructor with no arguments) 182.39 312.53 P
4 9 Q
0.3 (istream_iterator\050\051) 409.11 312.53 P
2 10 Q
0.14 ( always) 506.31 312.53 P
-0.23 (constructs an end of stream input iterator object, which is the only legitimate iterator to be used for the end) 72 300.53 P
-0.15 (condition. The result of) 72 288.53 P
4 9 Q
-0.32 (operator*) 176.81 288.53 P
2 10 Q
-0.15 ( on an end of stream is not defined. For any other iterator value a) 225.41 288.53 P
4 9 Q
-0.32 (const) 513 288.53 P
1.81 (T&) 72 276.53 P
2 10 Q
0.84 ( is returned. It is impossible to store things into istream iterators. The main peculiarity of the istream) 82.8 276.53 P
0.23 (iterators is the fact that ++ operators are not equality preserving, that is,) 72 264.53 P
4 9 Q
0.51 (i == j) 394.5 264.53 P
2 10 Q
0.23 ( does not guarantee at all) 427.91 264.53 P
(that) 72 252.53 T
4 9 Q
(++i == ++j) 91.84 252.53 T
2 10 Q
(. Every time ++ is used a new value is read.) 145.84 252.53 T
0.83 (The practical consequence of this fact is that istream iterators can be used only for one-pass algorithms,) 72 233.53 P
-0.31 (which actually makes perfect sense, since for multi-pass algorithms it is always more appropriate to use in-) 72 221.53 P
0.87 (memory data structures. Two end-of-stream iterators are always equal. An end-of-stream iterator is not) 72 209.53 P
-0.58 (equal to a non-end-of-stream iterator. Two non-end-of-stream iterators are equal when they are constructed) 72 197.53 P
(from the same stream.) 72 185.53 T
4 9 Q
(template <class T, class Distance = ptrdiff_t>) 108 163.2 T
(class istream_iterator : public input_iterator<T, Distance> {) 108 152.2 T
(friend bool operator==\050const istream_iterator<T, Distance>& x,) 108 141.2 T
(                       const istream_iterator<T, Distance>& y\051;) 108 130.2 T
(public:) 108 119.2 T
(istream_iterator\050\051;) 144 108.2 T
(istream_iterator\050istream& s\051;) 144 97.2 T
(istream_iterator\050const istream_iterator<T, Distance>& x\051;) 144 86.2 T
(~istream_iterator\050\051;) 144 75.2 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 41
%%Page: "40" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(40) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(const T& operator*\050\051 const;) 144 714 T
(istream_iterator<T, Distance>& operator++\050\051;) 144 703 T
(istream_iterator<T, Distance> operator++\050int\051;) 144 692 T
(};) 108 681 T
(template <class T, class Distance>) 108 670 T
(bool operator==\050const istream_iterator<T, Distance>& x,) 108 659 T
(const istream_iterator<T, Distance>& y\051;) 180 648 T
0 11 Q
(9.2 Ostream iterator) 72 624.98 T
4 9 Q
-0.57 (ostream_iterator<T>) 72 607.9 P
2 10 Q
-0.26 ( writes \050using) 174.6 607.9 P
4 9 Q
-0.57 (operator<<) 236.69 607.9 P
2 10 Q
-0.26 (\051 successive elements onto the output stream from which) 290.69 607.9 P
-0.25 (it was constructed. If it was constructed with) 72 595.9 P
4 9 Q
-0.53 (char*) 270.67 595.9 P
2 10 Q
-0.25 ( as a constructor argument, this string, called a) 297.67 595.9 P
5 F
-0.25 (delimiter) 503.88 595.9 P
0.81 (string) 72 583.9 P
2 F
0.81 (, is written to the stream after every) 96.45 583.9 P
4 9 Q
1.75 (T) 262.66 583.9 P
2 10 Q
0.81 ( is written. It is not possible to get a value out of the output) 268.06 583.9 P
(iterator. Its only use is as an output iterator in situations like) 72 571.9 T
4 9 Q
(while \050first != last\051 *result++ = *first++;) 108 549.57 T
(ostream_iterator) 72 530.9 T
2 10 Q
( is defined as:) 158.4 530.9 T
4 9 Q
(template <class T>) 108 508.57 T
(class ostream_iterator : public output_iterator {) 108 497.57 T
(public:) 108 486.57 T
(ostream_iterator\050ostream& s\051;) 144 475.57 T
(ostream_iterator\050ostream& s, const char* delimiter\051;) 144 464.57 T
(ostream_iterator\050const ostream_iterator<T>& x\051;) 144 453.57 T
(~ostream_iterator\050\051;) 144 442.57 T
(ostream_iterator<T>& operator=\050const T& value\051;) 144 431.57 T
(ostream_iterator<T>& operator*\050\051;) 144 420.57 T
(ostream_iterator<T>& operator++\050\051;) 144 409.57 T
(ostream_iterator<T>& operator++\050int\051;) 144 398.57 T
(};) 108 387.57 T
0 12 Q
(10  Algorithms) 72 357.82 T
2 10 Q
2.51 (All of the algorithms are separated from the particular implementations of data structures and are) 72 339.53 P
0.28 (parameterized by iterator types. Because of this, they can work with user defined data structures, as long) 72 327.53 P
(as these data structures have iterator types satisfying the assumptions on the algorithms.) 72 315.53 T
-0.01 (Both in-place and copying versions are provided for certain algorithms. The decision whether to include a) 72 296.53 P
0.86 (copying version was usually based on complexity considerations. When the cost of doing the operation) 72 284.53 P
0.46 (dominates the cost of copy, the copying version is not included. For example,) 72 272.53 P
4 9 Q
1 (sort_copy) 421.7 272.53 P
2 10 Q
0.46 ( is not included) 470.3 272.53 P
-0.31 (since the cost of sorting is much more significant, and users might as well do) 72 260.53 P
4 9 Q
-0.66 (copy) 408.69 260.53 P
2 10 Q
-0.31 ( followed by) 430.29 260.53 P
4 9 Q
-0.66 (sort) 487.27 260.53 P
2 10 Q
-0.31 (. When) 508.88 260.53 P
0.41 (such a version is provided for) 72 248.53 P
8 9 Q
0.89 (algorithm) 208.7 248.53 P
2 10 Q
0.41 (it is called) 263.59 248.53 P
8 9 Q
0.89 (algorithm) 311.8 248.53 P
4 F
0.89 (_copy.) 360.4 248.53 P
2 10 Q
0.41 (Algorithms that take predicates) 399.1 248.53 P
(end with the suffix) 72 236.53 T
4 9 Q
(_if) 157.92 236.53 T
2 10 Q
( \050which follows the suffix) 174.12 236.53 T
4 9 Q
(_copy) 288.8 236.53 T
2 10 Q
(\051.) 315.8 236.53 T
1 (The) 72 217.53 P
4 9 Q
2.16 (Predicate) 92.24 217.53 P
2 10 Q
1 ( class is used whenever an algorithm expects a function object that when applied to the) 140.84 217.53 P
0.83 (result of dereferencing the corresponding iterator returns a value testable as) 72 205.53 P
4 9 Q
1.8 (true) 419.1 205.53 P
2 10 Q
0.83 (. In other words, if an) 440.7 205.53 P
1.61 (algorithm takes) 72 193.53 P
4 9 Q
3.48 (Predicate pred) 146.77 193.53 P
2 10 Q
1.61 ( as its argument and) 225.85 193.53 P
4 9 Q
3.48 (first) 326.21 193.53 P
2 10 Q
1.61 ( as its iterator argument, it should work) 353.21 193.53 P
-0.03 (correctly in the construct) 72 181.53 P
4 9 Q
-0.05 (if \050pred\050*first\051\051{..) 184.16 181.53 P
2 10 Q
-0.03 (.) 292.1 181.53 P
4 9 Q
-0.05 (}) 294.6 181.53 P
2 10 Q
-0.03 (. The function object) 300 181.53 P
4 9 Q
-0.05 (pred) 392.03 181.53 P
2 10 Q
-0.03 ( is assumed not to apply any) 413.63 181.53 P
(non-constant function through the dereferenced iterator.) 72 169.53 T
0 (The) 72 150.53 P
4 9 Q
0 (BinaryPredicate) 91.24 150.53 P
2 10 Q
0 ( class is used whenever an algorithm expects a function object that when applied to) 172.24 150.53 P
-0.21 (the result of dereferencing two corresponding iterators or to dereferencing an iterator and type) 72 138.53 P
4 9 Q
-0.46 (T) 490.42 138.53 P
2 10 Q
-0.21 ( when) 495.82 138.53 P
4 9 Q
-0.46 (T) 525.16 138.53 P
2 10 Q
-0.21 ( is) 530.56 138.53 P
4.4 (part of the signature returns a value testable as) 72 126.53 P
4 9 Q
9.5 (true) 320.95 126.53 P
2 10 Q
4.4 (. In other words, if an algorithm takes) 342.55 126.53 P
4 9 Q
3.4 (BinaryPredicate binary_pred) 72 114.53 P
2 10 Q
1.57 ( as its argument and) 221.2 114.53 P
4 9 Q
3.4 (first1) 321.38 114.53 P
2 10 Q
1.57 ( and) 353.78 114.53 P
4 9 Q
3.4 (first2) 378.86 114.53 P
2 10 Q
1.57 ( as its iterator arguments, it) 411.26 114.53 P
0.5 (should work correctly in the construct) 72 102.53 P
4 9 Q
1.08 (if \050binary_pred\050*first, *first2\051\051{...}) 246.14 102.53 P
2 10 Q
0.5 (.) 453.5 102.53 P
4 9 Q
1.08 (BinaryPredicate) 459 102.53 P
2 10 Q
0.36 (always takes the first iterator type as its first argument, that is, in those cases when) 72 90.53 P
4 9 Q
0.78 (T) 445.27 90.53 P
0.78 (value) 453.53 90.53 P
2 10 Q
0.36 ( is part of the) 480.53 90.53 P
52 395.57 54 404.57 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 42
%%Page: "41" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(41) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
1.52 (signature, it should work correctly in the context of) 72 713.33 P
4 9 Q
3.3 (if \050binary_pred\050*first, value\051\051{...}) 314.68 713.33 P
2 10 Q
1.52 (. It is) 515.67 713.33 P
(expected that) 72 701.33 T
4 9 Q
(binary_pred) 133.69 701.33 T
2 10 Q
( will not apply any non-constant function through the dereferenced iterators.) 193.09 701.33 T
-0.19 (In the description of the algorithms operators) 72 682.33 P
4 9 Q
-0.41 (+) 273.86 682.33 P
2 10 Q
-0.19 ( and) 279.26 682.33 P
4 9 Q
-0.41 (-) 300.81 682.33 P
2 10 Q
-0.19 ( are used for some of the iterator categories for which) 306.21 682.33 P
0.51 (they do not have to be defined. In these cases the semantics of) 72 670.33 P
4 9 Q
1.1 (a+n) 354.3 670.33 P
2 10 Q
0.51 ( is the same as that of) 370.5 670.33 P
4 9 Q
1.1 ({ X tmp = a;) 470.81 670.33 P
0.41 (advance\050tmp, n\051; return tmp; }) 72 658.33 P
2 10 Q
0.19 ( and that of) 235.65 658.33 P
4 9 Q
0.41 (a-b) 289.47 658.33 P
2 10 Q
0.19 ( is the same as that of) 305.67 658.33 P
4 9 Q
0.41 ({ Distance n; distance\050a,) 403.76 658.33 P
(b, n\051; return n; }) 72 646.33 T
2 10 Q
(.) 169.2 646.33 T
0 11 Q
(10.1 Non-mutating sequence operations) 72 622.98 T
9 10 Q
(10.1.1 For each) 72 604.28 T
4 9 Q
(template <class InputIterator, class Function>) 108 584.09 T
(Function for_each\050InputIterator first, InputIterator last, Function f\051;) 108 573.09 T
-0.26 (for_each) 72 554.43 P
2 10 Q
-0.12 ( applies) 115.2 554.43 P
4 9 Q
-0.26 (f) 151.83 554.43 P
2 10 Q
-0.12 ( to the result of dereferencing every iterator in the range) 157.23 554.43 P
4 9 Q
-0.26 ([first, last\051) 406.05 554.43 P
2 10 Q
-0.12 ( and returns) 475.99 554.43 P
4 9 Q
-0.26 (f) 532.1 554.43 P
2 10 Q
-0.12 (.) 537.5 554.43 P
4 9 Q
-0.49 (f) 72 542.43 P
2 10 Q
-0.23 ( is assumed not to apply any non-constant function through the dereferenced iterator.) 77.4 542.43 P
4 9 Q
-0.49 (f) 455.77 542.43 P
2 10 Q
-0.23 ( is applied exactly) 461.17 542.43 P
4 9 Q
(last - first) 72 530.42 T
2 10 Q
( times. If) 136.8 530.42 T
4 9 Q
(f) 177.53 530.42 T
2 10 Q
( returns a result, the result is ignored.) 182.93 530.42 T
9 F
(10.1.2 Find) 72 509.8 T
4 9 Q
(template <class InputIterator, class T>) 108 489.61 T
(InputIterator find\050InputIterator first, InputIterator last, const T& value\051;) 108 478.61 T
(template <class InputIterator, class Predicate>) 108 456.61 T
(InputIterator find_if\050InputIterator first, InputIterator last, Predicate pred\051;) 108 445.61 T
4.11 (find) 72 426.95 P
2 10 Q
1.9 ( returns the first iterator) 93.6 426.95 P
4 9 Q
4.11 (i) 211.79 426.95 P
2 10 Q
1.9 ( in the range) 217.19 426.95 P
4 9 Q
4.11 ([first, last\051) 282.52 426.95 P
2 10 Q
1.9 ( for which the following corresponding) 356.83 426.95 P
0.12 (conditions hold:) 72 414.95 P
4 9 Q
0.25 (*i == value) 146.47 414.95 P
2 10 Q
0.12 (,) 206.38 414.95 P
4 9 Q
0.25 ( pred\050*i\051 == true) 208.88 414.95 P
2 10 Q
0.12 (. If no such iterator is found,) 301.44 414.95 P
4 9 Q
0.25 (last) 429.76 414.95 P
2 10 Q
0.12 ( is returned. Exactly) 451.36 414.95 P
4 9 Q
(find\050first, last, value\051 - first) 72 402.95 T
2 10 Q
( applications of the corresponding predicate are done.) 244.8 402.95 T
9 F
(10.1.3 Adjacent find) 72 382.32 T
4 9 Q
(template <class InputIterator>) 108 362.13 T
(InputIterator adjacent_find\050InputIterator first, InputIterator last\051;) 108 351.13 T
(template <class InputIterator, class BinaryPredicate>) 108 329.13 T
(InputIterator adjacent_find\050InputIterator first, InputIterator last,) 108 318.13 T
(BinaryPredicate binary_pred\051;) 180 307.13 T
0.19 (adjacent_find) 72 288.47 P
2 10 Q
0.09 ( returns the first iterator) 142.2 288.47 P
4 9 Q
0.19 (i) 251.32 288.47 P
2 10 Q
0.09 ( such that both) 256.72 288.47 P
4 9 Q
0.19 (i) 325.01 288.47 P
2 10 Q
0.09 ( and) 330.4 288.47 P
4 9 Q
0.19 (i + 1) 352.51 288.47 P
2 10 Q
0.09 ( are in the range) 379.89 288.47 P
4 9 Q
0.19 ([first, last\051) 454.28 288.47 P
2 10 Q
0.09 ( for) 524.67 288.47 P
-0.09 (which the following corresponding conditions hold:) 72 276.47 P
4 9 Q
-0.19 (*i == *\050i + 1\051, binary_pred\050*i, *\050i + 1\051\051 ==) 304.12 276.47 P
-0.1 (true) 72 264.47 P
2 10 Q
-0.05 (. If no such iterator) 93.6 264.47 P
4 9 Q
-0.1 (i) 179.46 264.47 P
2 10 Q
-0.05 ( is found,) 184.86 264.47 P
4 9 Q
-0.1 (last) 228.62 264.47 P
2 10 Q
-0.05 ( is returned. At most) 250.22 264.47 P
4 9 Q
-0.1 (max\050\050last - first\051) 343.67 264.47 P
-0.1 (- 1, 0\051) 443.13 264.47 P
2 10 Q
-0.05 (applications) 486.03 264.47 P
(of the corresponding predicate are done.) 72 252.47 T
9 F
(10.1.4 Count) 72 231.84 T
4 9 Q
(template <class InputIterator, class T, class Size>) 108 211.65 T
(void count\050InputIterator first, InputIterator last, const T& value, Size& n\051;) 108 200.65 T
(template <class InputIterator, class Predicate, class Size>) 108 178.65 T
(void count_if\050InputIterator first, InputIterator last, Predicate pred, Size& n\051;) 108 167.65 T
6.07 (count) 72 148.99 P
2 10 Q
2.81 ( adds to) 99 148.99 P
4 9 Q
6.07 (n) 145.11 148.99 P
2 10 Q
2.81 ( the number of iterators) 150.51 148.99 P
4 9 Q
6.07 (i) 271.49 148.99 P
2 10 Q
2.81 ( in the range) 276.89 148.99 P
4 9 Q
6.07 ([first, last\051) 345.85 148.99 P
2 10 Q
2.81 ( for which the following) 422.12 148.99 P
0.17 (corresponding conditions hold:) 72 136.99 P
4 9 Q
0.36 (*i == value) 213.74 136.99 P
2 10 Q
0.17 (,) 273.86 136.99 P
4 9 Q
0.36 (pred\050*i\051 == true) 279.02 136.99 P
2 10 Q
0.17 (. Exactly) 366.13 136.99 P
4 9 Q
0.36 (last - first) 406.4 136.99 P
2 10 Q
0.17 ( applications of) 471.91 136.99 P
(the corresponding predicate are done.) 72 124.99 T
4 9 Q
0.22 (count) 72 105.99 P
2 10 Q
0.1 ( must store the result into a reference argument instead of returning the result because the size type) 99 105.99 P
(cannot be deduced from built-in iterator types such as) 72 93.99 T
4 9 Q
(int*) 313.48 93.99 T
2 10 Q
(.) 335.08 93.99 T
52 551.09 54 579.09 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 43
%%Page: "42" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(42) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
9 F
0 X
(10.1.5 Mismatch) 72 712.71 T
4 9 Q
(template <class InputIterator1, class InputIterator2>) 108 692.52 T
(pair<InputIterator1, InputIterator2> mismatch\050InputIterator1 first1,) 108 681.52 T
(InputIterator1 last1, InputIterator2 first2\051;) 180 670.52 T
(template <class InputIterator1, class InputIterator2, class BinaryPredicate>) 108 648.52 T
(pair<InputIterator1, InputIterator2> mismatch\050InputIterator1 first1,) 108 637.52 T
(InputIterator1 last1, InputIterator2 first2,) 180 626.52 T
(BinaryPredicate binary_pred\051;) 180 615.52 T
1.29 (mismatch) 72 596.85 P
2 10 Q
0.6 ( returns a pair of iterators) 115.2 596.85 P
4 9 Q
1.29 (i) 234.29 596.85 P
2 10 Q
0.6 ( and) 239.69 596.85 P
4 9 Q
1.29 (j) 262.81 596.85 P
2 10 Q
0.6 ( such that) 268.21 596.85 P
4 9 Q
1.29 (j == first2 + \050i - first1\051) 315.37 596.85 P
2 10 Q
0.6 ( and) 463.48 596.85 P
4 9 Q
1.29 (i) 486.6 596.85 P
2 10 Q
0.6 ( is the first) 492 596.85 P
0.52 (iterator in the range) 72 584.85 P
4 9 Q
1.13 ([first1, last1\051) 164.39 584.85 P
2 10 Q
0.52 ( for which the following corresponding conditions hold:) 246.51 584.85 P
4 9 Q
1.13 (!\050*i ==) 501.07 584.85 P
0.53 (*\050first2 + \050i - first1\051\051\051) 72 572.85 P
2 10 Q
0.24 (,) 209.11 572.85 P
4 9 Q
0.53 ( binary_pred\050*i, *\050first2 + \050i - first1\051\051\051 == false) 211.61 572.85 P
2 10 Q
0.24 (. If such an) 491.22 572.85 P
0.47 (iterator) 72 560.85 P
4 9 Q
1 (i) 107.54 560.85 P
2 10 Q
0.47 ( is not found, a pair of) 112.94 560.85 P
4 9 Q
1 (last1) 216.3 560.85 P
2 10 Q
0.47 ( and) 243.3 560.85 P
4 9 Q
1 (first2 + \050last1 - first1\051) 266.17 560.85 P
2 10 Q
0.47 ( is returned. At most) 405.19 560.85 P
4 9 Q
1 (last1 -) 501.19 560.85 P
(first1) 72 548.85 T
2 10 Q
(applications of the corresponding predicate are done.) 109.8 548.85 T
9 F
(10.1.6 Equal) 72 528.23 T
4 9 Q
(template <class InputIterator1, class InputIterator2>) 108 508.04 T
(bool equal\050InputIterator1 first1, InputIterator1 last1, InputIterator2 first2\051;) 108 497.04 T
(template <class InputIterator1, class InputIterator2, class BinaryPredicate>) 108 475.04 T
(bool equal\050InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,) 108 464.04 T
(BinaryPredicate binary_pred\051;) 180 453.04 T
2.79 (equal) 72 434.37 P
2 10 Q
1.29 ( returns) 99 434.37 P
4 9 Q
2.79 (true) 138.62 434.37 P
2 10 Q
1.29 ( if for every iterator) 160.22 434.37 P
4 9 Q
2.79 (i) 255.47 434.37 P
2 10 Q
1.29 ( in the range) 260.87 434.37 P
4 9 Q
2.79 ([first1, last1\051) 323.75 434.37 P
2 10 Q
1.29 ( the following corresponding) 407.54 434.37 P
0.2 (conditions hold:) 72 422.37 P
4 9 Q
0.43 (*i == *\050first2 + \050i - first1\051\051) 146.63 422.37 P
2 10 Q
0.2 (,) 311.23 422.37 P
4 9 Q
0.43 (binary_pred\050*i, *\050first2 + \050i - first1\051\051\051) 316.43 422.37 P
-1.34 (== true) 72 410.37 P
2 10 Q
-0.62 (. Otherwise, it returns) 108.46 410.37 P
4 9 Q
-1.34 (false) 205.14 410.37 P
2 10 Q
-0.62 (. At most) 232.14 410.37 P
4 9 Q
-1.34 (last1 - first1) 273.11 410.37 P
2 10 Q
-0.62 (applications of the corresponding predicate) 350.08 410.37 P
(are done.) 72 398.37 T
9 F
(10.1.7 Search) 72 377.75 T
4 9 Q
(template <class ForwardIterator1, class ForwardIterator2>) 108 357.56 T
(ForwardIterator1 search\050ForwardIterator1 first1, ForwardIterator1 last1,) 108 346.56 T
(ForwardIterator2 first2,) 180 335.56 T
(ForwardIterator2 last2\051;) 315 335.56 T
(template <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>) 108 313.56 T
(ForwardIterator1 search\050ForwardIterator1 first1, ForwardIterator1 last1,) 108 302.56 T
(ForwardIterator2 first2,) 180 291.56 T
(ForwardIterator2 last2, BinaryPredicate) 315 291.56 T
(binary_pred\051;) 180 280.56 T
0.81 (search) 72 261.89 P
2 10 Q
0.37 ( finds a subsequence of equal values in a sequence.) 104.4 261.89 P
4 9 Q
0.81 (search) 335.31 261.89 P
2 10 Q
0.37 ( returns the first iterator) 367.71 261.89 P
4 9 Q
0.81 (i) 478.26 261.89 P
2 10 Q
0.37 ( in the range) 483.66 261.89 P
4 9 Q
-1.2 ([first1, last1 - \050last2 - first2\051\051) 72 249.89 P
2 10 Q
-0.56 ( such that for any non-negative integer) 249.6 249.89 P
4 9 Q
-1.2 (n) 419.49 249.89 P
2 10 Q
-0.56 ( less than) 424.89 249.89 P
4 9 Q
-1.2 (last2 - first2) 466.8 249.89 P
2 10 Q
0.51 (the following corresponding conditions hold:) 72 237.89 P
4 9 Q
1.09 (*\050i + n\051 == *\050first2 + n\051) 277.35 237.89 P
2 10 Q
0.51 (,) 418.91 237.89 P
4 9 Q
1.09 (binary_pred\050*\050i + n\051,) 424.41 237.89 P
0.31 (*\050first2 + n\051\051 == true) 72 225.89 P
2 10 Q
0.14 (. If no such iterator is found,) 192.02 225.89 P
4 9 Q
0.31 (last1) 320.5 225.89 P
2 10 Q
0.14 ( is returned. At most) 347.5 225.89 P
4 9 Q
0.31 (\050last1 - first1\051 *) 441.88 225.89 P
-1.22 (\050last2 - first2\051) 72 213.89 P
2 10 Q
-0.57 ( applications of the corresponding predicate are done. The quadratic behavior, however,) 155.95 213.89 P
(is highly unlikely.) 72 201.89 T
0 11 Q
(10.2 Mutating sequence operations) 72 178.54 T
9 10 Q
(10.2.1 Copy) 72 159.84 T
4 9 Q
(template <class InputIterator, class OutputIterator>) 108 139.65 T
(OutputIterator copy\050InputIterator first, InputIterator last,) 108 128.65 T
(OutputIterator result\051;) 180 117.65 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 44
%%Page: "43" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(43) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.42 (copy) 72 713.33 P
2 10 Q
-0.19 ( copies elements. For each non-negative integer) 93.6 713.33 P
4 9 Q
-0.42 (n < \050last - first\051,) 303.84 713.33 P
-0.42 (*\050result + n\051 = *\050first +) 407.08 713.33 P
0.15 (n\051) 72 701.33 P
2 10 Q
0.07 ( is performed.) 82.8 701.33 P
4 9 Q
0.15 (copy) 147.38 701.33 P
2 10 Q
0.07 ( returns) 168.98 701.33 P
4 9 Q
0.15 (result + \050last - first\051) 206.17 701.33 P
2 10 Q
0.07 (. Exactly) 330.98 701.33 P
4 9 Q
0.15 (last - first) 371.07 701.33 P
2 10 Q
0.07 (assignments are done.) 441.73 701.33 P
(The result of) 72 689.33 T
4 9 Q
(copy) 130.21 689.33 T
2 10 Q
( is undefined if) 151.81 689.33 T
4 9 Q
(result) 220.91 689.33 T
2 10 Q
( is in the range) 253.31 689.33 T
4 9 Q
([first, last\051.) 320.68 689.33 T
(template <class BidirectionalIterator1, class BidirectionalIterator2>) 108 667 T
(BidirectionalIterator2 copy_backward\050BidirectionalIterator1 first,) 108 656 T
(BidirectionalIterator1 last, BidirectionalIterator2 result\051;) 180 645 T
-0.4 (copy_backward) 72 626.33 P
2 10 Q
-0.19 ( copies elements in the range) 142.2 626.33 P
4 9 Q
-0.4 ([first, last\051) 271.09 626.33 P
2 10 Q
-0.19 ( into the range) 340.89 626.33 P
4 9 Q
-0.4 ([result - \050last - first\051,) 406.6 626.33 P
-0.08 (result\051) 72 614.33 P
2 10 Q
-0.04 ( starting from) 109.8 614.33 P
4 9 Q
-0.08 (last - 1) 172.76 614.33 P
2 10 Q
-0.04 ( and proceeding to) 215.8 614.33 P
4 9 Q
-0.08 (first) 301.14 614.33 P
2 10 Q
-0.04 (. It should be used instead of) 328.14 614.33 P
4 9 Q
-0.08 (copy) 457.49 614.33 P
2 10 Q
-0.04 ( when) 479.09 614.33 P
4 9 Q
-0.08 (last) 508.79 614.33 P
2 10 Q
-0.04 ( is) 530.39 614.33 P
0.37 (in the range) 72 602.33 P
4 9 Q
0.81 ([result - \050last - first\051, result\051) 128.34 602.33 P
2 10 Q
0.37 (. For each positive integer) 310.57 602.33 P
4 9 Q
0.81 (n <= \050last - first\051,) 428.77 602.33 P
-1.05 (*\050result - n\051 = *\050last - n\051) 72 590.33 P
2 10 Q
-0.49 (is performed.) 215.87 590.33 P
4 9 Q
-1.05 (copy_backward) 276.77 590.33 P
2 10 Q
-0.49 ( returns) 346.97 590.33 P
4 9 Q
-1.05 (result - \050last - first\051) 383.04 590.33 P
2 10 Q
-0.49 (. Exactly) 503.05 590.33 P
4 9 Q
0.25 (last - first) 72 578.33 P
2 10 Q
0.12 (assignments are done. The result of) 142.96 578.33 P
4 9 Q
0.25 (copy_backward) 302.5 578.33 P
2 10 Q
0.12 ( is undefined if) 372.7 578.33 P
4 9 Q
0.25 (result) 442.26 578.33 P
2 10 Q
0.12 ( is in the range) 474.66 578.33 P
4 9 Q
([first, last\051.) 72 566.33 T
9 10 Q
(10.2.2 Swap) 72 545.71 T
4 9 Q
(template <class T>) 108 525.52 T
(void swap\050T& a, T& b\051;) 108 514.52 T
(swap) 72 495.85 T
2 10 Q
( exchanges values stored in two locations.) 93.6 495.85 T
4 9 Q
(template <class ForwardIterator1, class ForwardIterator2>) 108 473.52 T
(void iter_swap\050ForwardIterator1 a, ForwardIterator2 b\051;) 108 462.52 T
(iter_swap) 72 443.85 T
2 10 Q
( exchanges values pointed by the two iterators) 120.6 443.85 T
4 9 Q
(a) 328.04 443.85 T
2 10 Q
( and) 333.44 443.85 T
4 9 Q
(b) 355.37 443.85 T
2 10 Q
(.) 360.77 443.85 T
4 9 Q
(template <class ForwardIterator1, class ForwardIterator2>) 108 421.52 T
(ForwardIterator2 swap_ranges\050ForwardIterator1 first1, ForwardIterator1 last1,) 108 410.52 T
(ForwardIterator2 first2\051;) 180 399.52 T
2 10 Q
0.83 (For each non-negative integer) 72 380.85 P
4 9 Q
1.79 (n < \050last1 - first1\051) 209.63 380.85 P
2 10 Q
0.83 ( the) 324.81 380.85 P
4 9 Q
1.79 (swap) 345.35 380.85 P
2 10 Q
0.83 ( is performed:) 366.95 380.85 P
4 9 Q
1.79 (swap\050*\050first1 + n\051,) 433.81 380.85 P
0.63 (*\050first2 + n\051\051) 72 368.85 P
2 10 Q
0.29 (.) 148.87 368.85 P
4 9 Q
0.63 (swap_ranges) 154.16 368.85 P
2 10 Q
0.29 ( returns) 213.57 368.85 P
4 9 Q
0.63 (first2 + \050last1 - first1\051) 251.19 368.85 P
2 10 Q
0.29 (. Exactly) 388.73 368.85 P
4 9 Q
0.63 (last1 - first1) 429.26 368.85 P
2 10 Q
0.29 (swaps) 512.17 368.85 P
1.48 (are done. The result of) 72 356.85 P
4 9 Q
3.2 (swap_ranges) 181.04 356.85 P
2 10 Q
1.48 ( is undefined if the two ranges) 240.44 356.85 P
4 9 Q
3.2 ([first1, last1\051) 387.7 356.85 P
2 10 Q
1.48 ( and) 471.91 356.85 P
4 9 Q
3.2 ([first2,) 496.8 356.85 P
(first2 + \050last1 - first1\051\051) 72 344.85 T
2 10 Q
( overlap.) 212.4 344.85 T
9 F
(10.2.3 Transform) 72 324.23 T
4 9 Q
(template <class InputIterator, class OutputIterator, class UnaryOperation>) 108 304.04 T
(OutputIterator transform\050InputIterator first, InputIterator last,) 108 293.04 T
(OutputIterator result, UnaryOperation op\051;) 180 282.04 T
(template <class InputIterator1, class InputIterator2, class OutputIterator,) 108 260.04 T
(class BinaryOperation>) 180 249.04 T
(OutputIterator transform\050InputIterator1 first1, InputIterator1 last1,) 108 238.04 T
(InputIterator2 first2,) 180 227.04 T
( OutputIterator result,) 298.8 227.04 T
(BinaryOperation binary_op\051;) 180 216.04 T
-0.22 (transform) 72 197.37 P
2 10 Q
-0.1 ( assigns through every iterator) 120.6 197.37 P
4 9 Q
-0.22 (i) 257.83 197.37 P
2 10 Q
-0.1 ( in the range) 263.23 197.37 P
4 9 Q
-0.22 ( [result, result + \050last1 - first1\051\051) 318.15 197.37 P
2 10 Q
-0.1 ( a new) 511.25 197.37 P
-0.33 (corresponding value equal to) 72 185.37 P
4 9 Q
-0.72 (op\050*\050first1 + \050i - result\051\051) 202.62 185.37 P
2 10 Q
-0.33 ( or) 345.54 185.37 P
4 9 Q
-0.72 (binary_op\050*\050first1 + \050i - result\051,) 359.28 185.37 P
-0.66 (*\050first2 + \050i - result\051\051\051) 72 173.37 P
2 10 Q
-0.31 (.) 204.34 173.37 P
4 9 Q
-0.66 (transform) 209.04 173.37 P
2 10 Q
-0.31 ( returns) 257.64 173.37 P
4 9 Q
-0.66 (result + \050last1 - first1\051) 294.06 173.37 P
2 10 Q
-0.31 (. Exactly) 426.4 173.37 P
4 9 Q
-0.66 (last1 - first1) 465.73 173.37 P
2 10 Q
1.26 (applications of) 72 161.37 P
4 9 Q
2.73 (op) 142.29 161.37 P
2 10 Q
1.26 ( or) 153.09 161.37 P
4 9 Q
2.73 (binary_op) 170.03 161.37 P
2 10 Q
1.26 (are performed.) 226.76 161.37 P
4 9 Q
2.73 (op) 297.75 161.37 P
2 10 Q
1.26 ( and) 308.55 161.37 P
4 9 Q
2.73 (binary_op) 333.01 161.37 P
2 10 Q
1.26 ( are expected not to have any side) 381.61 161.37 P
-0.03 (effects.) 72 149.37 P
4 9 Q
-0.07 (result) 105.15 149.37 P
2 10 Q
-0.03 ( may be equal to) 137.55 149.37 P
4 9 Q
-0.07 (first) 212.65 149.37 P
2 10 Q
-0.03 ( in case of unary transform, or to) 239.65 149.37 P
4 9 Q
-0.07 (first1) 386.22 149.37 P
2 10 Q
-0.03 ( or) 418.62 149.37 P
4 9 Q
-0.07 (first2) 432.96 149.37 P
2 10 Q
-0.03 ( in case of binary) 465.36 149.37 P
(transform.) 72 137.37 T
9 F
(10.2.4 Replace) 72 116.75 T
4 9 Q
(template <class ForwardIterator, class T>) 108 96.56 T
(void replace\050ForwardIterator first, ForwardIterator last, const T& old_value,) 108 85.56 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 45
%%Page: "44" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(44) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(const T& new_value\051;) 180 714 T
(template <class ForwardIterator, class Predicate, class T>) 108 692 T
(void replace_if\050ForwardIterator first, ForwardIterator last, Predicate pred,) 108 681 T
(const T& new_value\051;) 180 670 T
-0.63 (replace) 72 651.33 P
2 10 Q
-0.29 ( substitutes elements referred by the iterator) 109.8 651.33 P
4 9 Q
-0.63 (i) 305.67 651.33 P
2 10 Q
-0.29 ( in the range) 311.07 651.33 P
4 9 Q
-0.63 ([first, last\051) 367.61 651.33 P
2 10 Q
-0.29 ( with) 437.18 651.33 P
4 9 Q
-0.63 (new_value) 461.92 651.33 P
2 10 Q
-0.29 (, when) 510.52 651.33 P
0.88 (the following corresponding conditions hold:) 72 639.33 P
4 9 Q
1.9 (*i == old_value) 279.21 639.33 P
2 10 Q
0.88 (,) 364.01 639.33 P
4 9 Q
1.9 ( pred\050*i\051 == true) 366.51 639.33 P
2 10 Q
0.88 (. Exactly) 464 639.33 P
4 9 Q
1.9 (last -) 505.7 639.33 P
(first) 72 627.33 T
2 10 Q
( applications of the corresponding predicate are done.) 99 627.33 T
4 9 Q
(template <class InputIterator, class OutputIterator, class T>) 108 605 T
(OutputIterator replace_copy\050InputIterator first, InputIterator last,) 108 594 T
(OutputIterator result,) 180 583 T
(const T& old_value, const T& new_value\051;) 304.2 583 T
(template <class Iterator, class OutputIterator, class Predicate, class T>) 108 561 T
(OutputIterator replace_copy_if\050Iterator first, Iterator last,) 108 550 T
(OutputIterator result,) 180 539 T
(Predicate pred, const T& new_value\051;) 304.2 539 T
2.01 (replace_copy) 72 520.33 P
2 10 Q
0.93 ( assigns to every iterator) 136.8 520.33 P
4 9 Q
2.01 (i) 252 520.33 P
2 10 Q
0.93 ( in the range) 257.4 520.33 P
4 9 Q
2.01 ([result, result + \050last - first\051\051) 318.83 520.33 P
2 10 Q
0.93 (either) 514.48 520.33 P
4 9 Q
-0.02 (new_value) 72 508.33 P
2 10 Q
-0.01 ( or) 120.6 508.33 P
4 9 Q
-0.02 (*\050first + \050i - result\051\051) 134.99 508.33 P
2 10 Q
-0.01 ( depending on whether the following corresponding conditions) 259.09 508.33 P
1.31 (hold:) 72 496.33 P
4 9 Q
2.83 (*\050first + \050i - result\051\051 == old_value) 98.61 496.33 P
2 10 Q
1.31 (,) 309.99 496.33 P
4 9 Q
2.83 ( pred\050*\050first + \050i - result\051\051\051 == true) 312.49 496.33 P
2 10 Q
1.31 (.) 537.5 496.33 P
4 9 Q
5.74 (replace_copy) 72 484.33 P
2 10 Q
2.66 ( returns) 136.8 484.33 P
4 9 Q
5.74 (result + \050last - first\051) 179.16 484.33 P
2 10 Q
2.66 (. Exactly) 326.34 484.33 P
4 9 Q
5.74 (last - first) 371.6 484.33 P
2 10 Q
2.66 ( applications of the) 447.89 484.33 P
(corresponding predicate are done.) 72 472.33 T
9 F
(10.2.5 Fill) 72 451.71 T
4 9 Q
(template <class ForwardIterator, class T>) 108 431.52 T
(void fill\050ForwardIterator first, ForwardIterator last, const T& value\051;) 108 420.52 T
(template <class OutputIterator, class Size, class T>) 108 398.52 T
(void fill_n\050OutputIterator first, Size n, const T& value\051;) 108 387.52 T
-0.2 (fill) 72 368.85 P
2 10 Q
-0.09 ( assigns) 93.6 368.85 P
4 9 Q
-0.2 (value) 130.43 368.85 P
2 10 Q
-0.09 ( through all the iterators in the range) 157.43 368.85 P
4 9 Q
-0.2 ([first, last\051) 321.82 368.85 P
2 10 Q
-0.09 ( or) 391.82 368.85 P
4 9 Q
-0.2 ([first, first + n\051) 406.05 368.85 P
2 10 Q
-0.09 (. Exactly) 502.65 368.85 P
4 9 Q
(last - first) 72 356.85 T
2 10 Q
( \050or) 136.8 356.85 T
4 9 Q
(n) 154.54 356.85 T
2 10 Q
(\051 assignments are done.) 159.94 356.85 T
9 F
(10.2.6 Generate) 72 336.23 T
4 9 Q
(template <class ForwardIterator, class Generator>) 108 316.04 T
(void generate\050ForwardIterator first, ForwardIterator last, Generator gen\051;) 108 305.04 T
(template <class OutputIterator, class Size, class Generator>) 108 283.04 T
(void generate_n\050OutputIterator first, Size n, Generator gen\051;) 108 272.04 T
-0.91 (generate) 72 253.37 P
2 10 Q
-0.42 ( invokes the function object) 115.2 253.37 P
4 9 Q
-0.91 (gen) 236.78 253.37 P
2 10 Q
-0.42 ( and assigns the return value of) 252.98 253.37 P
4 9 Q
-0.91 (gen) 391.32 253.37 P
2 10 Q
-0.42 ( through all the iterators in the) 407.52 253.37 P
0.71 (range) 72 241.37 P
4 9 Q
1.54 ([first, last\051) 100.33 241.37 P
2 10 Q
0.71 ( or) 172.07 241.37 P
4 9 Q
1.54 ([first, first + n\051) 187.9 241.37 P
2 10 Q
0.71 (.) 289.71 241.37 P
4 9 Q
1.54 (gen) 295.42 241.37 P
2 10 Q
0.71 ( takes no arguments. Exactly) 311.62 241.37 P
4 9 Q
1.54 (last - first) 444.23 241.37 P
2 10 Q
0.71 ( \050or) 512.11 241.37 P
4 9 Q
1.54 (n) 531.27 241.37 P
2 10 Q
0.71 (\051) 536.67 241.37 P
(invocations of) 72 229.37 T
4 9 Q
(gen) 136.76 229.37 T
2 10 Q
( and assignments are done.) 152.96 229.37 T
9 F
(10.2.7 Remove) 72 208.75 T
4 9 Q
(template <class ForwardIterator, class T>) 108 188.56 T
(ForwardIterator remove\050ForwardIterator first, ForwardIterator last,) 108 177.56 T
(const T& value\051;) 180 166.56 T
(template <class ForwardIterator, class Predicate>) 108 144.56 T
(ForwardIterator remove_if\050ForwardIterator first, ForwardIterator last,) 108 133.56 T
(Predicate pred\051;) 180 122.56 T
2.46 (remove) 72 103.89 P
2 10 Q
1.14 ( eliminates all the elements referred to by iterator) 104.4 103.89 P
4 9 Q
2.46 (i) 334.79 103.89 P
2 10 Q
1.14 ( in the range) 340.19 103.89 P
4 9 Q
2.46 ([first, last\051) 402.48 103.89 P
2 10 Q
1.14 ( for which the) 475.14 103.89 P
-0.23 (following corresponding conditions hold:) 72 91.89 P
4 9 Q
-0.49 (*i == value) 257.55 91.89 P
2 10 Q
-0.23 (,) 315.97 91.89 P
4 9 Q
-0.49 (pred\050*i\051 == true) 320.74 91.89 P
2 10 Q
-0.23 (.) 406.17 91.89 P
4 9 Q
-0.49 (remove) 410.94 91.89 P
2 10 Q
-0.23 ( returns the end of the) 443.34 91.89 P
-0.21 (resulting range.) 72 79.89 P
4 9 Q
-0.45 (remove) 143.68 79.89 P
2 10 Q
-0.21 ( is stable, that is, the relative order of the elements that are not removed is the same) 176.08 79.89 P
52 250.04 54 260.04 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(45) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
1.44 (as their relative order in the original range. Exactly) 72 713.33 P
4 9 Q
3.1 (last - first) 312.1 713.33 P
2 10 Q
1.44 ( applications of the corresponding) 383.1 713.33 P
(predicate are done.) 72 701.33 T
4 9 Q
(template <class InputIterator, class OutputIterator, class T>) 108 679 T
(OutputIterator remove_copy\050InputIterator first, InputIterator last,) 108 668 T
(OutputIterator result,) 180 657 T
(const T& value\051;) 304.2 657 T
(template <class InputIterator, class OutputIterator, class Predicate>) 108 635 T
(OutputIterator remove_copy_if\050InputIterator first, InputIterator last,) 108 624 T
(OutputIterator result,) 180 613 T
(Predicate pred\051;) 304.2 613 T
-0.57 (remove_copy) 72 594.33 P
2 10 Q
-0.26 ( copies all the elements referred to by the iterator) 131.4 594.33 P
4 9 Q
-0.57 (i) 347.65 594.33 P
2 10 Q
-0.26 ( in the range) 353.05 594.33 P
4 9 Q
-0.57 ([first, last\051) 409.72 594.33 P
2 10 Q
-0.26 ( for which the) 479.35 594.33 P
-0.12 (following corresponding conditions do not hold:) 72 582.33 P
4 9 Q
-0.25 (*i == value) 288.86 582.33 P
2 10 Q
-0.12 (,) 347.75 582.33 P
4 9 Q
-0.25 ( pred\050*i\051 == true) 350.25 582.33 P
2 10 Q
-0.12 (.) 441.29 582.33 P
4 9 Q
-0.25 (remove_copy) 446.18 582.33 P
2 10 Q
-0.12 ( returns) 505.58 582.33 P
1.38 (the end of the resulting range.) 72 570.33 P
4 9 Q
2.98 (remove_copy) 215.61 570.33 P
2 10 Q
1.38 ( is stable, that is, the relative order of the elements in the) 275.01 570.33 P
-0.07 (resulting range is the same as their relative order in the original range. Exactly) 72 558.33 P
4 9 Q
-0.16 (last - first) 419.12 558.33 P
2 10 Q
-0.07 ( applications) 483.6 558.33 P
(of the corresponding predicate are done.) 72 546.33 T
9 F
(10.2.8 Unique) 72 525.71 T
4 9 Q
(template <class ForwardIterator>) 108 505.52 T
(ForwardIterator unique\050ForwardIterator first, ForwardIterator last\051;) 108 494.52 T
(template <class ForwardIterator, class BinaryPredicate>) 108 472.52 T
(ForwardIterator unique\050ForwardIterator first, ForwardIterator last,) 108 461.52 T
(BinaryPredicate binary_pred\051;) 180 450.52 T
0.62 (unique) 72 431.85 P
2 10 Q
0.29 ( eliminates all but the first element from every consecutive group of equal elements referred to by) 104.4 431.85 P
0.32 (the iterator) 72 419.85 P
4 9 Q
0.69 (i) 124.09 419.85 P
2 10 Q
0.32 ( in the range) 129.49 419.85 P
4 9 Q
0.69 ([first, last\051) 188.48 419.85 P
2 10 Q
0.32 ( for which the following corresponding conditions hold:) 259.37 419.85 P
4 9 Q
0.69 (*i ==) 512.31 419.85 P
-0.42 (*\050i) 72 407.85 P
-0.42 (- 1\051) 90.51 407.85 P
2 10 Q
-0.19 (or) 111.69 407.85 P
4 9 Q
-0.42 (binary_pred\050*i, *\050i - 1\051\051 == true) 123.41 407.85 P
2 10 Q
-0.19 (.) 299.52 407.85 P
4 9 Q
-0.42 (unique) 304.33 407.85 P
2 10 Q
-0.19 ( returns the end of the resulting range. Exactly) 336.73 407.85 P
4 9 Q
(\050last - first\051 - 1) 72 395.85 T
2 10 Q
( applications of the corresponding predicate are done.) 169.2 395.85 T
4 9 Q
(template <class InputIterator, class OutputIterator>) 108 373.52 T
(OutputIterator unique_copy\050InputIterator first, InputIterator last,) 108 362.52 T
(OutputIterator result\051;) 180 351.52 T
(template <class InputIterator, class OutputIterator, class BinaryPredicate>) 108 329.52 T
(OutputIterator unique_copy\050InputIterator first, InputIterator last,) 108 318.52 T
(OutputIterator result,) 180 307.52 T
(BinaryPredicate binary_pred\051;) 304.2 307.52 T
0.52 (unique_copy) 72 288.85 P
2 10 Q
0.24 ( copies only the first element from every consecutive group of equal elements referred to by) 131.4 288.85 P
0.32 (the iterator) 72 276.85 P
4 9 Q
0.69 (i) 124.09 276.85 P
2 10 Q
0.32 ( in the range) 129.49 276.85 P
4 9 Q
0.69 ([first, last\051) 188.48 276.85 P
2 10 Q
0.32 ( for which the following corresponding conditions hold:) 259.37 276.85 P
4 9 Q
0.69 (*i ==) 512.31 276.85 P
0.31 (*\050i) 72 264.85 P
0.31 (- 1\051) 90.84 264.85 P
2 10 Q
0.14 (or) 112.75 264.85 P
4 9 Q
0.31 (binary_pred\050*i, *\050i - 1\051\051 == true) 124.81 264.85 P
2 10 Q
0.14 (.) 304.57 264.85 P
4 9 Q
0.31 (unique_copy) 309.71 264.85 P
2 10 Q
0.14 ( returns the end of the resulting range.) 369.11 264.85 P
(Exactly) 72 252.85 T
4 9 Q
(last - first) 106.94 252.85 T
2 10 Q
( applications of the corresponding predicate are done.) 171.74 252.85 T
9 F
(10.2.9 Reverse) 72 232.23 T
4 9 Q
(template <class BidirectionalIterator>) 108 212.04 T
(void reverse\050BidirectionalIterator first, BidirectionalIterator last\051;) 108 201.04 T
2 10 Q
0.66 (For each non-negative integer) 72 182.37 P
4 9 Q
1.42 (i <= \050last - first\051/2) 208.95 182.37 P
2 10 Q
0.66 (,) 328.04 182.37 P
4 9 Q
1.42 ( reverse) 330.54 182.37 P
2 10 Q
0.66 ( applies swap to all pairs of iterators) 375.17 182.37 P
4 9 Q
(first + i) 72 170.37 T
2 10 Q
(,) 120.6 170.37 T
4 9 Q
(\050last - i\051 - 1) 125.6 170.37 T
2 10 Q
(. Exactly) 201.2 170.37 T
4 9 Q
(\050last - first\051/2) 241.14 170.37 T
2 10 Q
(swaps are performed.) 332.94 170.37 T
4 9 Q
(template <class BidirectionalIterator, class OutputIterator>) 108 148.04 T
(OutputIterator reverse_copy\050BidirectionalIterator first,) 108 137.04 T
(BidirectionalIterator last,) 180 126.04 T
(OutputIterator result\051;) 331.2 126.04 T
-0.53 (reverse_copy) 72 107.37 P
2 10 Q
-0.25 ( copies the range) 136.8 107.37 P
4 9 Q
-0.53 ([first, last\051) 212.66 107.37 P
2 10 Q
-0.25 ( to the range) 282.33 107.37 P
4 9 Q
-0.53 ( [result, result + \050last - first\051\051) 336.8 107.37 P
2 10 Q
-0.25 ( such) 517.22 107.37 P
-0.21 (that for any non-negative integer) 72 95.37 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 95.37 P
2 10 Q
-0.21 ( the following assignment takes place:) 317.2 95.37 P
4 9 Q
-0.46 (*\050result +) 486.46 95.37 P
-0.41 (\050last - first\051 - i\051 = *\050first + i\051) 72 83.37 P
2 10 Q
-0.19 (.) 252.32 83.37 P
4 9 Q
-0.41 (reverse_copy) 257.13 83.37 P
2 10 Q
-0.19 ( returns) 321.93 83.37 P
4 9 Q
-0.41 (result + \050last - first\051) 358.59 83.37 P
2 10 Q
-0.19 (.Exactly) 481.15 83.37 P
4 9 Q
-0.41 (last) 518.4 83.37 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 47
%%Page: "46" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(46) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.05 (- first) 72 713.33 P
2 10 Q
-0.02 ( assignments are done. The result of) 109.75 713.33 P
4 9 Q
-0.05 (reverse_copy) 270.94 713.33 P
2 10 Q
-0.02 ( is undefined if) 335.74 713.33 P
4 9 Q
-0.05 ([first, last\051) 404.76 713.33 P
2 10 Q
-0.02 ( and) 474.91 713.33 P
4 9 Q
-0.05 ([result,) 496.8 713.33 P
(result + \050last - first\051\051) 72 701.33 T
2 10 Q
( overlap.) 201.6 701.33 T
9 F
(10.2.10 Rotate) 72 680.71 T
4 9 Q
(template <class ForwardIterator>) 108 660.52 T
-0.9 (void rotate\050ForwardIterator first, ForwardIterator middle, ForwardIterator last\051;) 108 649.52 P
2 10 Q
-0.18 (For each non-negative integer) 72 630.85 P
4 9 Q
-0.4 (i < \050last - first\051) 205.58 630.85 P
2 10 Q
-0.18 (,) 301.2 630.85 P
4 9 Q
-0.4 (rotate) 306.02 630.85 P
2 10 Q
-0.18 ( places the element from the position) 338.42 630.85 P
4 9 Q
-0.4 (first +) 502.6 630.85 P
0.15 (i) 72 618.85 P
2 10 Q
0.07 ( into position) 77.4 618.85 P
4 9 Q
0.15 (first + \050i + \050last - middle\051\051 % \050last - first\051) 138.63 618.85 P
2 10 Q
0.07 (.) 388.51 618.85 P
4 9 Q
0.15 ([first, middle\051) 393.58 618.85 P
2 10 Q
0.07 ( and) 474.73 618.85 P
4 9 Q
0.15 ([middle,) 496.8 618.85 P
(last\051) 72 606.85 T
2 10 Q
( are valid ranges. At most) 99 606.85 T
4 9 Q
(last - first) 215.01 606.85 T
2 10 Q
( swaps are done.) 279.81 606.85 T
4 9 Q
(template <class ForwardIterator, class OutputIterator>) 108 584.52 T
(OutputIterator rotate_copy\050ForwardIterator first, ForwardIterator middle,) 108 573.52 T
(ForwardIterator last, OutputIterator result\051;) 180 562.52 T
-0.03 (rotate_copy) 72 543.85 P
2 10 Q
-0.01 ( copies the range) 131.4 543.85 P
4 9 Q
-0.03 ([first, last\051) 208.19 543.85 P
2 10 Q
-0.01 ( to the range) 278.36 543.85 P
4 9 Q
-0.03 ( [result, result + \050last - first\051\051) 333.54 543.85 P
2 10 Q
-0.01 ( such) 516.98 543.85 P
0.11 (that for each non-negative integer) 72 531.85 P
4 9 Q
0.23 ( i < \050last - first\051) 221.85 531.85 P
2 10 Q
0.11 ( the following assignment takes place:) 325.61 531.85 P
4 9 Q
0.23 (*\050result) 496.8 531.85 P
-0.85 (+ \050i + \050last - middle\051\051 % \050last - first\051\051 = *\050first + i\051) 72 519.85 P
2 10 Q
-0.39 (.) 363.39 519.85 P
4 9 Q
-0.85 ( rotate_copy) 365.89 519.85 P
2 10 Q
-0.39 ( returns) 429.84 519.85 P
4 9 Q
-0.85 (result + \050last) 466.09 519.85 P
-0.84 (- first\051) 72 507.85 P
2 10 Q
-0.39 (. Exactly) 114.36 507.85 P
4 9 Q
-0.84 (last - first) 153.52 507.85 P
2 10 Q
-0.39 ( assignments are done. The result of) 216.64 507.85 P
4 9 Q
-0.84 (rotate_copy) 375.26 507.85 P
2 10 Q
-0.39 ( is undefined if) 434.66 507.85 P
4 9 Q
-0.84 ([first,) 502.2 507.85 P
(last\051) 72 495.85 T
2 10 Q
( and) 99 495.85 T
4 9 Q
([result, result + \050last - first\051\051) 120.93 495.85 T
2 10 Q
( overlap.) 299.13 495.85 T
9 F
(10.2.11 Random shuffle) 72 475.23 T
4 9 Q
(template <class RandomAccessIterator>) 108 455.04 T
(void random_shuffle\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 444.04 T
(template <class RandomAccessIterator, class RandomNumberGenerator>) 108 422.04 T
(void random_shuffle\050RandomAccessIterator first, RandomAccessIterator last,) 108 411.04 T
(RandomNumberGenerator& rand\051;) 180 400.04 T
2.46 (random_shuffle) 72 381.37 P
2 10 Q
1.14 ( shuffles the elements in the range) 147.6 381.37 P
4 9 Q
2.46 ([first, last\051) 308.79 381.37 P
2 10 Q
1.14 ( with uniform distribution. Exactly) 381.45 381.37 P
4 9 Q
-0.14 (\050last - first\051 - 1) 72 369.37 P
2 10 Q
-0.06 (swaps are done.) 173.89 369.37 P
4 9 Q
-0.14 (random_shuffle) 247.45 369.37 P
2 10 Q
-0.06 ( can take a particular random number generating) 323.05 369.37 P
5.81 (function object) 72 357.37 P
4 9 Q
12.55 (rand) 151.51 357.37 P
2 10 Q
5.81 ( such that) 173.11 357.37 P
4 9 Q
12.55 (rand) 235.92 357.37 P
2 10 Q
5.81 ( takes a positive argument) 257.52 357.37 P
4 9 Q
12.55 (n) 405.4 357.37 P
2 10 Q
5.81 ( of distance type of the) 410.8 357.37 P
4 9 Q
(RandomAccessIterator) 72 345.37 T
2 10 Q
( and returns a randomly chosen value between) 180 345.37 T
4 9 Q
(0) 389.88 345.37 T
2 10 Q
( and) 395.28 345.37 T
4 9 Q
(n-1) 417.21 345.37 T
2 10 Q
(.) 433.41 345.37 T
9 F
(10.2.12 Partitions) 72 324.75 T
4 9 Q
(template <class BidirectionalIterator, class Predicate>) 108 304.56 T
(BidirectionalIterator partition\050BidirectionalIterator first,) 108 293.56 T
(BidirectionalIterator last,) 180 282.56 T
(Predicate pred\051;) 331.2 282.56 T
-0.81 (partition) 72 263.89 P
2 10 Q
-0.38 ( places all the elements in the range) 120.6 263.89 P
4 9 Q
-0.81 ([first, last\051) 276.83 263.89 P
2 10 Q
-0.38 ( that satisfy) 346.21 263.89 P
4 9 Q
-0.81 (pred) 398.47 263.89 P
2 10 Q
-0.38 ( before all the elements that) 420.07 263.89 P
-0.07 (do not satisfy it. It returns an iterator) 72 251.89 P
4 9 Q
-0.16 (i) 236.81 251.89 P
2 10 Q
-0.07 ( such that for any iterator) 242.21 251.89 P
4 9 Q
-0.16 (j) 356.34 251.89 P
2 10 Q
-0.07 ( in the range) 361.74 251.89 P
4 9 Q
-0.16 ([first, i\051) 419.17 251.89 P
2 10 Q
-0.07 (,) 473.01 251.89 P
4 9 Q
-0.16 ( pred\050*j\051 ==) 475.51 251.89 P
-0.76 (true) 72 239.89 P
2 10 Q
-0.35 (, and for any iterator) 93.6 239.89 P
4 9 Q
-0.76 (k) 185.48 239.89 P
2 10 Q
-0.35 ( in the range) 190.88 239.89 P
4 9 Q
-0.76 ([i, last\051) 247.2 239.89 P
2 10 Q
-0.35 (,) 295.04 239.89 P
4 9 Q
-0.76 (pred\050*j\051 == false) 299.69 239.89 P
2 10 Q
-0.35 (. It does at most) 389.98 239.89 P
4 9 Q
-0.76 (\050last - first\051/) 460.51 239.89 P
(2) 72 227.89 T
2 10 Q
(swaps. Exactly) 82.8 227.89 T
4 9 Q
(last - first) 150.57 227.89 T
2 10 Q
( applications of the predicate is done.) 215.37 227.89 T
4 9 Q
(template <class BidirectionalIterator, class Predicate>) 108 205.56 T
(BidirectionalIterator stable_partition\050BidirectionalIterator first,) 108 194.56 T
(Bidirectional) 180 183.56 T
(Iterator last,) 250.2 183.56 T
(Predicate pred\051;) 331.2 183.56 T
2.29 (stable_partition) 72 164.89 P
2 10 Q
1.06 ( places all the elements in the range) 158.4 164.89 P
4 9 Q
2.29 ([first, last\051) 326.12 164.89 P
2 10 Q
1.06 ( that satisfy) 398.61 164.89 P
4 9 Q
2.29 (pred) 455.18 164.89 P
2 10 Q
1.06 ( before all the) 476.78 164.89 P
0.06 (elements that do not satisfy it. It returns an iterator) 72 152.89 P
4 9 Q
0.12 (i) 299.72 152.89 P
2 10 Q
0.06 ( such that for any iterator) 305.12 152.89 P
4 9 Q
0.12 (j) 420.03 152.89 P
2 10 Q
0.06 ( in the range) 425.43 152.89 P
4 9 Q
0.12 ([first, i\051) 483.38 152.89 P
2 10 Q
0.06 (,) 537.5 152.89 P
4 9 Q
-0.44 (pred\050*j\051 == true) 72 140.89 P
2 10 Q
-0.2 (, and for any iterator) 157.53 140.89 P
4 9 Q
-0.44 (k) 250.15 140.89 P
2 10 Q
-0.2 ( in the range) 255.55 140.89 P
4 9 Q
-0.44 ([i, last\051) 312.46 140.89 P
2 10 Q
-0.2 (,) 360.62 140.89 P
4 9 Q
-0.44 (pred\050*j\051 == false) 365.42 140.89 P
2 10 Q
-0.2 (. The relative order) 456.35 140.89 P
-0.45 (of the elements in both groups is preserved. It does at most) 72 128.89 P
4 9 Q
-0.98 (\050last - first\051 * log\050last - first\051) 329.9 128.89 P
2 10 Q
-0.45 ( swaps,) 507.62 128.89 P
0.38 (but only linear number of swaps if there is enough extra memory. Exactly) 72 116.89 P
4 9 Q
0.83 (last - first) 405.01 116.89 P
2 10 Q
0.38 ( applications of) 471.47 116.89 P
(the predicate are done.) 72 104.89 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 48
%%Page: "47" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(47) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(10.3 Sorting and related operations) 72 711.98 T
2 10 Q
0.24 (All the operations in this section have two versions: one that takes a function object of type) 72 694.9 P
4 9 Q
0.53 (Compare) 479.34 694.9 P
2 10 Q
0.24 (and) 523.07 694.9 P
(one that uses an) 72 682.9 T
4 9 Q
(operator<) 145.53 682.9 T
2 10 Q
(.) 194.13 682.9 T
4 9 Q
0.89 (Compare) 72 663.9 P
2 10 Q
0.41 ( is used as a function object which returns) 109.8 663.9 P
4 9 Q
0.89 (true) 300.84 663.9 P
2 10 Q
0.41 ( if the first argument is less than the second, and) 322.44 663.9 P
4 9 Q
2.86 (false) 72 651.9 P
2 10 Q
1.32 ( otherwise.) 99 651.9 P
4 9 Q
2.86 (Compare) 152.7 651.9 P
2.86 (comp) 194.33 651.9 P
2 10 Q
1.32 ( is used throughout for algorithms assuming an ordering relation. It is) 215.93 651.9 P
1.3 (assumed that) 72 639.9 P
4 9 Q
2.81 (comp) 136.19 639.9 P
2 10 Q
1.3 ( will not apply any non-constant function through the dereferenced iterator. For all) 157.79 639.9 P
0.41 (algorithms that take) 72 627.9 P
4 9 Q
0.9 (Compare,) 164.63 627.9 P
2 10 Q
0.41 ( there is a version that uses) 207.83 627.9 P
4 9 Q
0.9 (operator<) 332.46 627.9 P
2 10 Q
0.41 ( instead. That is,) 381.06 627.9 P
4 9 Q
0.9 (comp\050*i, *j\051 ==) 457.21 627.9 P
-1.12 (true) 72 615.9 P
2 10 Q
-0.52 (defaults to) 97.88 615.9 P
4 9 Q
-1.12 (*i < *j == true) 146.23 615.9 P
2 10 Q
-0.52 (. For the algorithms to work correctly,) 222.75 615.9 P
4 9 Q
-1.12 (comp) 389.19 615.9 P
2 10 Q
-0.52 ( has to induce a total ordering) 410.79 615.9 P
(on the values.) 72 603.9 T
0.4 (A sequence is sorted with respect to a comparator) 72 584.9 P
4 9 Q
0.87 (comp) 298.26 584.9 P
2 10 Q
0.4 ( if for any iterator) 319.86 584.9 P
4 9 Q
0.87 (i) 402.31 584.9 P
2 10 Q
0.4 ( pointing to the sequence and) 407.71 584.9 P
1.13 (any non-negative integer) 72 572.9 P
4 9 Q
2.44 (n) 188.56 572.9 P
2 10 Q
1.13 ( such that) 193.96 572.9 P
4 9 Q
2.44 (i + n) 242.73 572.9 P
2 10 Q
1.13 ( is a valid iterator pointing to an element of the sequence,) 274.61 572.9 P
4 9 Q
(comp\050*\050i + n\051, *i\051 == false) 72 560.91 T
2 10 Q
(.) 217.8 560.91 T
1.11 (In the descriptions of the functions that deal with ordering relationships we frequently use a notion of) 72 541.91 P
2.26 (equality to describe concepts such as stability. The equality to which we refer is not necessarily an) 72 529.91 P
4 9 Q
3.49 (operator==) 72 517.91 P
2 10 Q
1.62 (, but an equality relation induced by the total ordering. That is, two element) 126 517.91 P
4 9 Q
3.49 (a) 486.17 517.91 P
2 10 Q
1.62 ( and) 491.58 517.91 P
4 9 Q
3.49 (b) 516.74 517.91 P
2 10 Q
1.62 ( are) 522.14 517.91 P
(considered equal if and only if) 72 505.91 T
4 9 Q
(!\050a < b\051 && !\050b < a\051) 209.11 505.91 T
2 10 Q
(.) 317.11 505.91 T
9 F
(10.3.1 Sort) 72 485.28 T
4 9 Q
(template <class RandomAccessIterator>) 108 465.09 T
(void sort\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 454.09 T
(template <class RandomAccessIterator, class Compare>) 108 432.09 T
(void sort\050RandomAccessIterator first, RandomAccessIterator last, Compare comp\051;) 108 421.09 T
-0.66 (sort) 72 402.43 P
2 10 Q
-0.3 ( sorts the elements in the range) 93.6 402.43 P
4 9 Q
-0.66 ([first, last\051.) 231.14 402.43 P
2 10 Q
-0.3 ( It does approximately) 306.09 402.43 P
4 9 Q
-0.66 (NlogN) 406.95 402.43 P
2 10 Q
-0.3 ( \050where) 433.95 402.43 P
4 9 Q
-0.66 (N) 469.12 402.43 P
2 10 Q
-0.3 ( equals to) 474.52 402.43 P
4 9 Q
-0.66 (last) 518.4 402.43 P
7.38 (- first) 72 390.43 P
2 10 Q
3.41 (\051 comparisons on the average. If the worst case behavior is important) 117.18 390.43 P
4 9 Q
7.38 (stable_sort) 465.27 390.43 P
2 10 Q
3.41 ( or) 524.67 390.43 P
4 9 Q
(partial_sort) 72 378.43 T
2 10 Q
( should be used.) 136.8 378.43 T
4 9 Q
(template <class RandomAccessIterator>) 108 356.09 T
(void stable_sort\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 345.09 T
(template <class RandomAccessIterator, class Compare>) 108 323.09 T
(void stable_sort\050RandomAccessIterator first, RandomAccessIterator last,) 108 312.09 T
(Compare comp\051;) 180 301.09 T
0.92 (stable_sort) 72 282.43 P
2 10 Q
0.43 ( sorts the elements in the range) 131.4 282.43 P
4 9 Q
0.92 ([first, last\051) 274.06 282.43 P
2 10 Q
0.43 (. It is stable, that is, the relative order of the) 345.18 282.43 P
0.35 (equal elements is preserved. It does at most) 72 270.43 P
4 9 Q
0.76 (N\050logN\051) 269.78 270.43 P
4 7.2 Q
0.61 (2) 307.58 274.03 P
2 10 Q
0.35 ( \050where) 311.9 270.43 P
4 9 Q
0.76 (N) 348.31 270.43 P
2 10 Q
0.35 ( equals to) 353.71 270.43 P
4 9 Q
0.76 (last - first) 399.55 270.43 P
2 10 Q
0.35 (\051 comparisons; if) 465.87 270.43 P
(enough extra memory is available, it is) 72 258.43 T
4 9 Q
(NlogN) 245.23 258.43 T
0 8 Q
(.) 272.23 258.43 T
4 9 Q
(template <class RandomAccessIterator>) 108 236.09 T
(void partial_sort\050RandomAccessIterator first, RandomAccessIterator middle,) 108 225.09 T
(RandomAccessIterator last\051;) 180 214.09 T
(template <class RandomAccessIterator, class Compare>) 108 192.09 T
(void partial_sort\050RandomAccessIterator first, RandomAccessIterator middle,) 108 181.09 T
(RandomAccessIterator last,) 180 170.09 T
(Compare comp\051;) 325.8 170.09 T
1.09 (partial_sort) 72 151.43 P
2 10 Q
0.5 ( places the first) 136.8 151.43 P
4 9 Q
1.09 (middle - first) 207.77 151.43 P
2 10 Q
0.5 ( sorted elements from the range) 285.55 151.43 P
4 9 Q
1.09 ([first, last\051) 431.38 151.43 P
2 10 Q
0.5 ( into the) 502.67 151.43 P
-0.25 (range) 72 139.43 P
4 9 Q
-0.53 ([first, middle\051) 99.37 139.43 P
2 10 Q
-0.25 (. The rest of the elements in the range) 179.84 139.43 P
4 9 Q
-0.53 ([middle, last\051) 345.41 139.43 P
2 10 Q
-0.25 ( are placed in an undefined) 420.47 139.43 P
(order. It takes approximately) 72 127.43 T
4 9 Q
(\050last - first\051 * log\050middle - first\051) 203.09 127.43 T
2 10 Q
(comparisons.) 402.89 127.43 T
4 9 Q
(template <class InputIterator, class RandomAccessIterator>) 108 105.09 T
(RandomAccessIterator partial_sort_copy\050InputIterator first, InputIterator last,) 108 94.09 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 49
%%Page: "48" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(48) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(RandomAccessIterator result_first, RandomAccessIterator) 180 714 T
(result_last\051;) 180 703 T
(template <class InputIterator, class RandomAccessIterator, class Compare>) 108 681 T
(RandomAccessIterator partial_sort_copy\050InputIterator first, InputIterator last,) 108 670 T
(RandomAccessIterator result_first, RandomAccessIterator) 180 659 T
(result_last,) 180 648 T
(Compare comp\051;) 250.2 648 T
-1.03 (partial_sort_copy) 72 629.33 P
2 10 Q
-0.48 ( places the first) 163.8 629.33 P
4 9 Q
-1.03 (min\050last - first, result_last - result_first\051) 230.85 629.33 P
2 10 Q
-0.48 ( sorted elements) 468.71 629.33 P
-0.44 (into the range) 72 617.33 P
4 9 Q
-0.94 ([result_first, result_first + min\050last - first, result_last - result_first\051\051) 134.63 617.33 P
2 10 Q
-0.44 (.) 537.5 617.33 P
1.88 (It returns either) 72 605.33 P
4 9 Q
4.07 (result_last) 149.34 605.33 P
2 10 Q
1.88 ( or) 208.74 605.33 P
4 9 Q
4.07 (result_first + \050last - first\051) 226.92 605.33 P
2 10 Q
1.88 ( whichever is smaller. It takes) 399.81 605.33 P
1.66 (approximately) 72 593.33 P
4 9 Q
3.6 ( \050last - first\051 * log\050min\050last - first, result_last - result_first\051\051) 136.85 593.33 P
2 10 Q
(comparisons.) 72 581.33 T
9 F
(10.3.2 Nth element) 72 560.71 T
4 9 Q
(template <class RandomAccessIterator>) 108 540.52 T
(void nth_element\050RandomAccessIterator first,) 108 529.52 T
(RandomAccessIterator nth,) 351 529.52 T
(RandomAccessIterator last\051;) 180 518.52 T
(template <class RandomAccessIterator, class Compare>) 108 496.52 T
(void nth_element\050RandomAccessIterator first, RandomAccessIterator nth,) 108 485.52 T
(RandomAccessIterator last, Compare comp\051;) 180 474.52 T
2 10 Q
1.31 (After) 72 455.85 P
4 9 Q
2.83 (nth_element) 98.92 455.85 P
2 10 Q
1.31 ( the element in the position pointed to by) 158.32 455.85 P
4 9 Q
2.83 (nth) 354.52 455.85 P
2 10 Q
1.31 ( is the element that would be in that) 370.72 455.85 P
-0.18 (position if the whole range were sorted. Also for any iterator) 72 443.85 P
4 9 Q
-0.4 (i) 340.37 443.85 P
2 10 Q
-0.18 ( in the range) 345.77 443.85 P
4 9 Q
-0.4 ([first, nth\051) 402.76 443.85 P
2 10 Q
-0.18 ( and any iterator) 467.16 443.85 P
4 9 Q
-1.31 (j) 72 431.85 P
2 10 Q
-0.61 ( in the range) 77.4 431.85 P
4 9 Q
-1.31 ([nth, last\051) 132.7 431.85 P
2 10 Q
-0.61 ( it holds that) 190.79 431.85 P
4 9 Q
-1.31 (!\050*i > *j\051) 246.42 431.85 P
2 10 Q
-0.61 (or) 301.9 431.85 P
4 9 Q
-1.31 (comp\050*i, *j\051 == false) 313.21 431.85 P
2 10 Q
-0.61 (. It is linear on the average.) 422.68 431.85 P
9 F
(10.3.3 Binary search) 72 411.23 T
2 F
-0.6 (All of the algorithms in this section are versions of binary search. They work on non-random access iterators) 72 394.37 P
1.68 (minimizing the number of comparisons, which will be logarithmic for all types of iterators. They are) 72 382.37 P
-0.3 (especially appropriate for random access iterators, since these algorithms do a logarithmic number of steps) 72 370.37 P
(through the data structure. For non-random access iterators they execute a linear number of steps.) 72 358.37 T
4 9 Q
(template <class ForwardIterator, class T>) 108 336.04 T
(ForwardIterator lower_bound\050ForwardIterator first, ForwardIterator last,) 108 325.04 T
(const T& value\051;) 180 314.04 T
(template <class ForwardIterator, class T, class Compare>) 108 292.04 T
(ForwardIterator lower_bound\050ForwardIterator first, ForwardIterator last,) 108 281.04 T
(const T& value, Compare comp\051;) 180 270.04 T
3.22 (lower_bound) 72 251.37 P
2 10 Q
1.49 ( finds the first position into which) 131.4 251.37 P
4 9 Q
3.22 (value) 294.14 251.37 P
2 10 Q
1.49 ( can be inserted without violating the ordering.) 321.14 251.37 P
4 9 Q
0.02 (lower_bound) 72 239.37 P
2 10 Q
0.01 ( returns the furthermost iterator) 131.4 239.37 P
4 9 Q
0.02 (i) 275.36 239.37 P
2 10 Q
0.01 ( in the range) 280.76 239.37 P
4 9 Q
0.02 ([first, last\051) 338.51 239.37 P
2 10 Q
0.01 ( such that for any iterator) 408.73 239.37 P
4 9 Q
0.02 (j) 523.36 239.37 P
2 10 Q
0.01 ( in) 528.76 239.37 P
-0.04 (the range) 72 227.37 P
4 9 Q
-0.1 ([first, i\051) 115.9 227.37 P
2 10 Q
-0.04 ( the following corresponding conditions hold:) 169.81 227.37 P
4 9 Q
-0.1 (*j < value) 374.86 227.37 P
2 10 Q
-0.04 ( or) 428.67 227.37 P
4 9 Q
-0.1 (comp\050*j, value\051 ==) 442.99 227.37 P
(true) 72 215.37 T
2 10 Q
(. At most) 93.6 215.37 T
4 9 Q
(log\050last - first\051 + 1) 136.43 215.37 T
2 10 Q
( comparisons are done.) 249.83 215.37 T
4 9 Q
(template <class ForwardIterator, class T>) 108 193.04 T
(ForwardIterator upper_bound\050ForwardIterator first, ForwardIterator last,) 108 182.04 T
(const T& value\051;) 180 171.04 T
(template <class ForwardIterator, class T, class Compare>) 108 149.04 T
(ForwardIterator upper_bound\050ForwardIterator first, ForwardIterator last,) 108 138.04 T
(const T& value,) 180 127.04 T
(Compare comp\051;) 266.4 127.04 T
4.85 (upper_bound) 72 108.37 P
2 10 Q
2.24 ( finds the furthermost position into which) 131.4 108.37 P
4 9 Q
4.85 (value) 334.66 108.37 P
2 10 Q
2.24 ( can be inserted without violating the) 361.66 108.37 P
0.46 (ordering.) 72 96.37 P
4 9 Q
0.99 ( upper_bound) 113.05 96.37 P
2 10 Q
0.46 ( returns the furthermost iterator) 178.84 96.37 P
4 9 Q
0.99 (i) 325.04 96.37 P
2 10 Q
0.46 ( in the range) 330.44 96.37 P
4 9 Q
0.99 ([first, last\051) 389.99 96.37 P
2 10 Q
0.46 ( such that for any) 461.18 96.37 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 50
%%Page: "49" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(49) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
1.53 (iterator) 72 713.33 P
4 9 Q
3.32 (j) 108.61 713.33 P
2 10 Q
1.53 ( in the range) 114.01 713.33 P
4 9 Q
3.32 ([first, i\051) 177.88 713.33 P
2 10 Q
1.53 ( the following corresponding conditions hold:) 235.19 713.33 P
4 9 Q
3.32 (!\050value < *j\051) 449.72 713.33 P
2 10 Q
1.53 ( or) 526.55 713.33 P
4 9 Q
(comp\050value, *j\051 == false) 72 701.33 T
2 10 Q
(. At most) 201.6 701.33 T
4 9 Q
(log\050last - first\051 + 1) 244.43 701.33 T
2 10 Q
( comparisons are done.) 357.83 701.33 T
4 9 Q
(template <class ForwardIterator, class T>) 108 679 T
(pair<ForwardIterator, ForwardIterator> equal_range\050ForwardIterator first,) 108 668 T
(ForwardIterator last,) 180 657 T
(const T& value\051;) 298.8 657 T
(template <class ForwardIterator, class T, class Compare>) 108 635 T
(pair<ForwardIterator, ForwardIterator> equal_range\050ForwardIterator first,) 108 624 T
(ForwardIterator last, const T& value, Compare comp\051;) 180 613 T
0.09 (equal_range) 72 594.33 P
2 10 Q
0.04 ( finds the largest subrange) 131.4 594.33 P
4 9 Q
0.09 ( [i, j\051) 248.47 594.33 P
2 10 Q
0.04 ( such that the value can be inserted at any iterator) 286.44 594.33 P
4 9 Q
0.09 ( k) 506.63 594.33 P
2 10 Q
0.04 ( in it.) 517.52 594.33 P
4 9 Q
0.96 (k) 72 582.33 P
2 10 Q
0.45 ( satisfies the corresponding conditions:) 77.4 582.33 P
4 9 Q
0.96 (!\050*k < value\051 && !\050value < *k\051) 254.37 582.33 P
2 10 Q
0.45 (or) 428.52 582.33 P
4 9 Q
0.96 (comp\050*k, value\051 ==) 440.87 582.33 P
(false && comp\050value, *k\051 == false) 72 570.33 T
2 10 Q
(. At most) 250.2 570.33 T
4 9 Q
(2 * log\050last - first\051 + 1) 293.03 570.33 T
2 10 Q
( comparisons are done.) 428.03 570.33 T
4 9 Q
(template <class ForwardIterator, class T>) 108 548 T
(bool binary_search\050ForwardIterator first, ForwardIterator last, const T& value\051;) 108 537 T
(template <class ForwardIterator, class T, class Compare>) 108 515 T
(bool binary_search\050ForwardIterator first, ForwardIterator last,) 108 504 T
(const T& value,) 453.6 504 T
(Compare comp\051;) 180 493 T
4.75 (binary_search) 72 474.33 P
2 10 Q
2.2 ( returns) 142.2 474.33 P
4 9 Q
4.75 (true) 183.64 474.33 P
2 10 Q
2.2 ( if there is an iterator) 205.24 474.33 P
4 9 Q
4.75 (i) 312.84 474.33 P
2 10 Q
2.2 ( in the range) 318.24 474.33 P
4 9 Q
4.75 ( [first last\051) 380.06 474.33 P
2 10 Q
2.2 ( that satisfies the) 459.77 474.33 P
0.91 (corresponding conditions:) 72 462.33 P
4 9 Q
1.97 (!\050*i < value\051 && !\050value < *i\051) 192.28 462.33 P
2 10 Q
0.91 (or) 373.48 462.33 P
4 9 Q
1.97 (comp\050*i, value\051 == false &&) 386.31 462.33 P
(comp\050value, *i\051 == false) 72 450.33 T
2 10 Q
(. At most) 201.6 450.33 T
4 9 Q
(log\050last - first\051) 244.43 450.33 T
(+ 2) 338.73 450.33 T
2 10 Q
( comparisons are done.) 354.93 450.33 T
9 F
(10.3.4 Merge) 72 429.71 T
4 9 Q
(template <class InputIterator1, class InputIterator2, class OutputIterator>) 108 409.52 T
(OutputIterator merge\050InputIterator1 first1, InputIterator1 last1,) 108 398.52 T
(InputIterator2 first2,) 180 387.52 T
(InputIterator2 last2,) 304.2 387.52 T
(OutputIterator result\051;) 180 376.52 T
(template <class InputIterator1, class InputIterator2, class OutputIterator,) 108 354.52 T
(class Compare>) 144 343.52 T
(OutputIterator merge\050InputIterator1 first1, InputIterator1 last1,) 108 332.52 T
(InputIterator2 first2,) 180 321.52 T
(InputIterator2 last2,) 304.2 321.52 T
(OutputIterator result, Compare comp\051;) 180 310.52 T
-1.14 (merge) 72 291.85 P
2 10 Q
-0.53 ( merges two sorted ranges) 99 291.85 P
4 9 Q
-1.14 ([first1, last1\051) 215.24 291.85 P
2 10 Q
-0.53 ( and) 295.1 291.85 P
4 9 Q
-1.14 ([first2, last2\051) 315.97 291.85 P
2 10 Q
-0.53 ( into the range) 395.82 291.85 P
4 9 Q
-1.14 ([result, result) 460.14 291.85 P
0.79 (+ \050last1 - first1\051 + \050last2 - first2\051\051) 72 279.85 P
2 10 Q
0.36 (. The merge is) 282.71 279.85 P
5 F
0.36 (stable) 348.48 279.85 P
2 F
0.36 (, that is, for equal elements in the two) 371.43 279.85 P
1.34 (ranges, the elements from the first range always precede the elements from the second.) 72 267.85 P
4 9 Q
2.88 (merge) 477.12 267.85 P
2 10 Q
1.34 ( returns) 504.12 267.85 P
4 9 Q
-0.09 (result + \050last1 - first1\051 + \050last2 - first2\051) 72 255.85 P
2 10 Q
-0.04 (. At most) 308.86 255.85 P
4 9 Q
-0.09 (\050last1 - first1\051 + \050last2 - first2\051) 351.56 255.85 P
-0.85 (- 1) 72 243.85 P
2 10 Q
-0.39 ( comparisons are performed. The result of) 87.35 243.85 P
4 9 Q
-0.85 (merge) 272.62 243.85 P
2 10 Q
-0.39 ( is undefined if the resulting range overlaps with either) 299.62 243.85 P
(of the original ranges.) 72 231.85 T
4 9 Q
(template <class BidirectionalIterator>) 108 209.52 T
(void inplace_merge\050BidirectionalIterator first, BidirectionalIterator middle,) 108 198.52 T
(BidirectionalIterator last\051;) 180 187.52 T
(template <class BidirectionalIterator, class Compare>) 108 165.52 T
(void inplace_merge\050BidirectionalIterator first, BidirectionalIterator middle,) 108 154.52 T
(BidirectionalIterator last, Compare comp\051;) 180 143.52 T
-0.86 (inplace_merge) 72 124.85 P
2 10 Q
-0.4 ( merges two sorted consecutive ranges) 142.2 124.85 P
4 9 Q
-0.86 ([first, middle\051) 313.04 124.85 P
2 10 Q
-0.4 ( and) 393.19 124.85 P
4 9 Q
-0.86 ([middle, last\051) 414.33 124.85 P
2 10 Q
-0.4 ( putting the) 489.07 124.85 P
-0.23 (result of the merge into the range) 72 112.85 P
4 9 Q
-0.49 ([first, last\051) 220.1 112.85 P
2 10 Q
-0.23 (. The merge is) 289.81 112.85 P
5 F
-0.23 (stable,) 353.21 112.85 P
2 F
-0.23 (that is, for equal elements in the two) 380.94 112.85 P
1.28 (ranges, the elements from the first range always precede the elements from the second. When enough) 72 100.85 P
-0.23 (additional memory is available, at most) 72 88.85 P
4 9 Q
-0.5 (\050last - first\051 - 1) 247.91 88.85 P
2 10 Q
-0.23 ( comparisons are performed. If no additional) 343.11 88.85 P
(memory is available, an algorithm with) 72 76.85 T
4 9 Q
(O\050NlogN\051) 248.62 76.85 T
2 10 Q
( complexity may be used.) 291.82 76.85 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 51
%%Page: "50" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(50) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
9 F
0 X
(10.3.5 Set operations on sorted structures) 72 712.71 T
2 F
1.95 (This section defines all the basic set operations on sorted structures. They even work with multisets) 72 695.85 P
-0.48 (containing multiple copies of equal elements. The semantics of the set operations is generalized to multisets) 72 683.85 P
0.83 (in a standard way by defining union to contain the maximum number of occurrences of every element,) 72 671.85 P
(intersection to contain the minimum, and so on.) 72 659.85 T
4 9 Q
(template <class InputIterator1, class InputIterator2>) 108 637.52 T
(bool includes\050InputIterator1 first1, InputIterator1 last1,) 108 626.52 T
(InputIterator2 first2,) 180 615.52 T
(InputIterator2 last2\051;) 304.2 615.52 T
(template <class InputIterator1, class InputIterator2, class Compare>) 108 593.52 T
(bool includes\050InputIterator1 first1, InputIterator1 last1,) 108 582.52 T
(InputIterator2 first2,) 180 571.52 T
(InputIterator2 last2,) 304.2 571.52 T
(Compare comp\051;) 423 571.52 T
-0.69 (includes) 72 552.85 P
2 10 Q
-0.32 ( returns) 115.2 552.85 P
4 9 Q
-0.69 (true) 151.61 552.85 P
2 10 Q
-0.32 ( if every element in the range) 173.21 552.85 P
4 9 Q
-0.69 ( [first2, last2\051) 300.19 552.85 P
2 10 Q
-0.32 ( is contained in the range) 385.22 552.85 P
4 9 Q
-0.69 ([first1,) 496.8 552.85 P
2.12 (last1\051) 72 540.85 P
2 10 Q
0.98 (. It returns) 104.4 540.85 P
4 9 Q
2.12 (false) 156.01 540.85 P
2 10 Q
0.98 ( otherwise. At most) 183.01 540.85 P
4 9 Q
2.12 (\050\050last1 - first1\051 + \050last2 - first2\051\051 * 2 - 1) 275.82 540.85 P
2 10 Q
(comparisons are performed.) 72 528.85 T
4 9 Q
(template <class InputIterator1, class InputIterator2, class OutputIterator>) 108 506.52 T
(OutputIterator set_union\050InputIterator1 first1, InputIterator1 last1,) 108 495.52 T
(InputIterator2 first2,) 180 484.52 T
(InputIterator2 last2,) 304.2 484.52 T
(OutputIterator result\051;) 180 473.52 T
-1.35 (template <class InputIterator1, class InputIterator2, class OutputIterator, class) 108 451.52 P
(Compare>) 180 440.52 T
(OutputIterator set_union\050InputIterator1 first1, InputIterator1 last1,) 108 429.52 T
(InputIterator2 first2,) 180 418.52 T
(InputIterator2 last2,) 304.2 418.52 T
(OutputIterator result, Compare comp\051;) 180 407.52 T
4.39 (set_union) 72 388.85 P
2 10 Q
2.03 ( constructs a sorted union of the elements from the two ranges. It returns the end of the) 120.6 388.85 P
-0.31 (constructed range.) 72 376.85 P
4 9 Q
-0.67 (set_union) 155.8 376.85 P
2 10 Q
-0.31 ( is stable, that is, if an element is present in both ranges, the one from the first) 204.4 376.85 P
-0.41 (range is copied. At most) 72 364.85 P
4 9 Q
-0.89 (\050\050last1 - first1\051 + \050last2 - first2\051\051 * 2 - 1) 179.77 364.85 P
2 10 Q
-0.41 ( comparisons are performed.) 413.91 364.85 P
(The result of) 72 352.85 T
4 9 Q
(set_union) 130.21 352.85 T
2 10 Q
( is undefined if the resulting range overlaps with either of the original ranges.) 178.81 352.85 T
4 9 Q
(template <class InputIterator1, class InputIterator2, class OutputIterator>) 108 330.52 T
(OutputIterator set_intersection\050InputIterator1 first1, InputIterator1 last1,) 108 319.52 T
(InputIterator2 first2,) 180 308.52 T
(InputIterator2 last2,) 304.2 308.52 T
(OutputIterator result\051;) 180 297.52 T
(template <class InputIterator1, class InputIterator2, class OutputIterator,) 108 275.52 T
(class Compare>) 144 264.52 T
(OutputIterator set_intersection\050InputIterator1 first1, InputIterator1 last1,) 108 253.52 T
(InputIterator2 first2,) 180 242.52 T
(InputIterator2 last2,) 304.2 242.52 T
-3.6 (OutputIterator result,) 423 242.52 P
(Compare comp\051;) 180 231.52 T
-0.17 (set_intersection) 72 212.85 P
2 10 Q
-0.08 ( constructs a sorted intersection of the elements from the two ranges. It returns the end) 158.4 212.85 P
0.25 (of the constructed range.) 72 200.85 P
4 9 Q
0.55 (set_intersection) 185.09 200.85 P
2 10 Q
0.25 ( is guaranteed to be stable, that is, if an element is present in) 271.49 200.85 P
-0.18 (both ranges, the one from the first range is copied. At most) 72 188.85 P
4 9 Q
-0.39 (\050\050last1 - first1\051 + \050last2 - first2\051\051 *) 332.14 188.85 P
1.75 (2 - 1) 72 176.85 P
2 10 Q
0.81 ( comparisons are performed. The result of) 102.49 176.85 P
4 9 Q
1.75 (set_intersection) 296.19 176.85 P
2 10 Q
0.81 ( is undefined if the resulting range) 382.59 176.85 P
(overlaps with either of the original ranges.) 72 164.85 T
4 9 Q
(template <class InputIterator1, class InputIterator2, class OutputIterator>) 108 142.52 T
(OutputIterator set_difference\050InputIterator1 first1, InputIterator1 last1,) 108 131.52 T
(InputIterator2 first2,) 180 120.52 T
(InputIterator2 last2,) 304.2 120.52 T
(OutputIterator result\051;) 180 109.52 T
(template <class InputIterator1, class InputIterator2, class OutputIterator,) 108 87.52 T
(class Compare>) 144 76.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 52
%%Page: "51" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(51) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(OutputIterator set_difference\050InputIterator1 first1, InputIterator1 last1,) 108 714 T
(InputIterator2 first2,) 180 703 T
(InputIterator2 last2,) 304.2 703 T
(OutputIterator result,) 180 692 T
(Compare comp\051;) 304.2 692 T
0.77 (set_difference) 72 673.33 P
2 10 Q
0.36 ( constructs a sorted difference of the elements from the two ranges. It returns the end of) 147.6 673.33 P
0.39 (the constructed range. At most) 72 661.33 P
4 9 Q
0.85 (\050\050last1 - first1\051 + \050last2 - first2\051\051 * 2 - 1) 212.59 661.33 P
2 10 Q
0.39 ( comparisons are) 464.11 661.33 P
0.69 (performed. The result of) 72 649.33 P
4 9 Q
1.5 (set_difference) 185.2 649.33 P
2 10 Q
0.69 ( is undefined if the resulting range overlaps with either of the) 260.8 649.33 P
(original ranges.) 72 637.33 T
4 9 Q
(template <class InputIterator1, class InputIterator2, class OutputIterator>) 108 615 T
(OutputIterator set_symmetric_difference\050InputIterator1 first1, InputIterator1) 108 604 T
(last1,) 180 593 T
(InputIterator2 first2,) 217.8 593 T
(InputIterator2 last2,) 342 593 T
(OutputIterator result\051;) 180 582 T
(template <class InputIterator1, class InputIterator2, class OutputIterator,) 108 560 T
(class Compare>) 144 549 T
(OutputIterator set_symmetric_difference\050InputIterator1 first1, InputIterator1) 108 538 T
(last1,) 180 527 T
(InputIterator2 first2,) 217.8 527 T
(InputIterator2 last2,) 342 527 T
(OutputIterator result,) 180 516 T
(Compare comp\051;) 304.2 516 T
-1.27 (set_symmetric_difference) 72 497.33 P
2 10 Q
-0.59 ( constructs a sorted symmetric difference of the elements from the two ranges.) 201.6 497.33 P
-0.13 (It returns the end of the constructed range. At most) 72 485.33 P
4 9 Q
-0.28 (\050\050last1 - first1\051 + \050last2 - first2\051\051 * 2 - 1) 299.85 485.33 P
2 10 Q
0.03 (comparisons are performed. The result of) 72 473.33 P
4 9 Q
0.06 (set_symmetric_difference) 257.68 473.33 P
2 10 Q
0.03 ( is undefined if the resulting range) 387.29 473.33 P
(overlaps with either of the original ranges.) 72 461.33 T
9 F
(10.3.6 Heap operations) 72 440.71 T
2 F
-0.1 (A heap is a particular organization of elements in a range between two random access iterators) 72 423.85 P
4 9 Q
-0.23 ([a, b\051) 492.06 423.85 P
2 10 Q
-0.1 (. Its) 524.23 423.85 P
0.09 (two key properties are: \0501\051) 72 411.85 P
4 9 Q
0.2 (*a) 191.2 411.85 P
2 10 Q
0.09 ( is the largest element in the range and \0502\051) 202 411.85 P
4 9 Q
0.2 (*a) 390.16 411.85 P
2 10 Q
0.09 ( may be removed by) 400.96 411.85 P
4 9 Q
0.2 (pop_heap) 494.3 411.85 P
2 10 Q
0.09 (,) 537.5 411.85 P
0.64 (or a new element added by) 72 399.85 P
4 9 Q
1.38 (push_heap) 198.6 399.85 P
2 10 Q
0.64 (, in O\050) 247.2 399.85 P
4 9 Q
1.38 (logN) 275.9 399.85 P
2 10 Q
0.64 (\051 time. These properties make heaps useful as priority) 297.5 399.85 P
(queues.) 72 387.85 T
4 9 Q
(make_heap) 108.48 387.85 T
2 10 Q
( converts a range into a heap and) 157.08 387.85 T
4 9 Q
(sort_heap) 305.81 387.85 T
2 10 Q
( turns a heap into a sorted sequence.) 354.41 387.85 T
4 9 Q
(template <class RandomAccessIterator>) 108 365.52 T
(void push_heap\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 354.52 T
(template <class RandomAccessIterator, class Compare>) 108 332.52 T
(void push_heap\050RandomAccessIterator first, RandomAccessIterator last,) 108 321.52 T
(Compare comp\051;) 180 310.52 T
1.37 (push_heap) 72 291.85 P
2 10 Q
0.63 ( assumes the range) 120.6 291.85 P
4 9 Q
1.37 ([first, last - 1\051) 209.49 291.85 P
2 10 Q
0.63 ( is a valid heap and properly places the value in the) 305.39 291.85 P
0.1 (location) 72 279.85 P
4 9 Q
0.22 (last - 1) 109.86 279.85 P
2 10 Q
0.1 ( into the resulting heap) 153.5 279.85 P
4 9 Q
0.22 ([first, last\051) 258.91 279.85 P
2 10 Q
0.1 (. At most) 329.33 279.85 P
4 9 Q
0.22 (log\050last - first\051) 372.46 279.85 P
2 10 Q
0.1 ( comparisons are) 464.7 279.85 P
(performed.) 72 267.85 T
4 9 Q
(template <class RandomAccessIterator>) 108 245.52 T
(void pop_heap\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 234.52 T
(template <class RandomAccessIterator, class Compare>) 108 212.52 T
(void pop_heap\050RandomAccessIterator first, RandomAccessIterator last,) 108 201.52 T
(Compare comp\051;) 180 190.52 T
1.04 (pop_heap) 72 171.85 P
2 10 Q
0.48 ( assumes the range) 115.2 171.85 P
4 9 Q
1.04 ([first, last\051) 203.49 171.85 P
2 10 Q
0.48 ( is a valid heap, then swaps the value in the location) 274.73 171.85 P
4 9 Q
1.04 (first) 513 171.85 P
2 10 Q
-0.35 (with the value in the location) 72 159.85 P
4 9 Q
-0.75 (last - 1) 201.35 159.85 P
2 10 Q
-0.35 ( and makes) 243.05 159.85 P
4 9 Q
-0.75 ([first, last - 1\051) 294.85 159.85 P
2 10 Q
-0.35 ( into a heap. At most) 384.39 159.85 P
4 9 Q
-0.75 (2 * log\050last) 476.7 159.85 P
(- first\051) 72 147.85 T
2 10 Q
( comparisons are performed.) 115.2 147.85 T
4 9 Q
(template <class RandomAccessIterator>) 108 125.52 T
(void make_heap\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 114.52 T
(template <class RandomAccessIterator, class Compare>) 108 92.52 T
(void make_heap\050RandomAccessIterator first, RandomAccessIterator last,) 108 81.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 53
%%Page: "52" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(52) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(Compare comp\051;) 180 714 T
0.8 (make_heap) 72 695.33 P
2 10 Q
0.37 ( constructs a heap out of the range) 120.6 695.33 P
4 9 Q
0.8 ([first, last\051) 277.84 695.33 P
2 10 Q
0.37 (. At most) 348.84 695.33 P
4 9 Q
0.8 (3*\050last - first\051) 392.78 695.33 P
2 10 Q
0.37 ( comparisons) 480.77 695.33 P
(are performed.) 72 683.33 T
4 9 Q
(template <class RandomAccessIterator>) 108 661 T
(void sort_heap\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 650 T
(template <class RandomAccessIterator, class Compare>) 108 628 T
(void sort_heap\050RandomAccessIterator first, RandomAccessIterator last,) 108 617 T
(Compare comp\051;) 180 606 T
-0.45 (sort_heap) 72 587.33 P
2 10 Q
-0.21 ( sorts elements in the heap) 120.6 587.33 P
4 9 Q
-0.45 ([first, last\051) 239.16 587.33 P
2 10 Q
-0.21 (. At most) 308.91 587.33 P
4 9 Q
-0.45 (NlogN) 351.12 587.33 P
2 10 Q
-0.21 ( comparisons are performed where) 378.12 587.33 P
4 9 Q
-0.45 (N) 534.6 587.33 P
2 10 Q
(is equal to) 72 575.33 T
4 9 Q
(last - first) 119.7 575.33 T
2 10 Q
(.) 184.5 575.33 T
4 9 Q
(sort_heap) 189.5 575.33 T
2 10 Q
( is not stable.) 238.1 575.33 T
9 F
(10.3.7 Minimum and maximum) 72 554.71 T
4 9 Q
(template <class T>) 108 534.52 T
(const T& min\050const T& a, const T& b\051;) 108 523.52 T
(template <class T, class Compare>) 108 501.52 T
(const T& min\050const T& a, const T& b, Compare comp\051;) 108 490.52 T
(template <class T>) 108 468.52 T
(const T& max\050const T& a, const T& b\051;) 108 457.52 T
(template <class T, class Compare>) 108 435.52 T
(const T& max\050const T& a, const T& b, Compare comp\051;) 108 424.52 T
-0.73 (min) 72 405.85 P
2 10 Q
-0.34 ( returns the smaller and) 88.2 405.85 P
4 9 Q
-0.73 (max) 194.49 405.85 P
2 10 Q
-0.34 ( the larger.) 210.69 405.85 P
4 9 Q
-0.73 (min) 259.71 405.85 P
2 10 Q
-0.34 ( and) 275.91 405.85 P
4 9 Q
-0.73 (max) 297.17 405.85 P
2 10 Q
-0.34 ( return the first argument when their arguments are) 313.37 405.85 P
(equal.) 72 393.85 T
4 9 Q
(template <class InputIterator>) 108 371.52 T
(InputIterator max_element\050InputIterator first, InputIterator last\051;) 108 360.52 T
(template <class InputIterator, class Compare>) 108 338.52 T
-0.9 (InputIterator max_element\050InputIterator first, InputIterator last, Compare comp\051;) 108 327.52 P
-1.16 (max_element) 72 308.85 P
2 10 Q
-0.54 ( returns the first iterator) 131.4 308.85 P
4 9 Q
-1.16 (i) 237.38 308.85 P
2 10 Q
-0.54 ( in the range) 242.79 308.85 P
4 9 Q
-1.16 ([first, last\051) 298.35 308.85 P
2 10 Q
-0.54 ( such that for any iterator) 367.39 308.85 P
4 9 Q
-1.16 ( j) 476.76 308.85 P
2 10 Q
-0.54 ( in the range) 486.4 308.85 P
4 9 Q
0.22 ([first, last\051) 72 296.85 P
2 10 Q
0.1 ( the following corresponding conditions hold:) 142.42 296.85 P
4 9 Q
0.22 ( !\050*i < *j\051) 345.75 296.85 P
2 10 Q
0.1 (or) 411.43 296.85 P
4 9 Q
0.22 (comp\050*i, *j\051 == false) 423.44 296.85 P
2 10 Q
0.1 (.) 537.5 296.85 P
(Exactly) 72 284.85 T
4 9 Q
(max\050\050last - first\051 - 1, 0\051) 106.94 284.85 T
2 10 Q
( applications of the corresponding comparisons are done.) 247.34 284.85 T
4 9 Q
(template <class InputIterator>) 108 262.52 T
(InputIterator min_element\050InputIterator first, InputIterator last\051;) 108 251.52 T
(template <class InputIterator, class Compare>) 108 229.52 T
-0.9 (InputIterator min_element\050InputIterator first, InputIterator last, Compare comp\051;) 108 218.52 P
-1.16 (min_element) 72 199.85 P
2 10 Q
-0.54 ( returns the first iterator) 131.4 199.85 P
4 9 Q
-1.16 (i) 237.38 199.85 P
2 10 Q
-0.54 ( in the range) 242.79 199.85 P
4 9 Q
-1.16 ([first, last\051) 298.35 199.85 P
2 10 Q
-0.54 ( such that for any iterator) 367.39 199.85 P
4 9 Q
-1.16 ( j) 476.76 199.85 P
2 10 Q
-0.54 ( in the range) 486.4 199.85 P
4 9 Q
0.22 ([first, last\051) 72 187.85 P
2 10 Q
0.1 ( the following corresponding conditions hold:) 142.42 187.85 P
4 9 Q
0.22 ( !\050*j < *i\051) 345.75 187.85 P
2 10 Q
0.1 (or) 411.43 187.85 P
4 9 Q
0.22 (comp\050*j, *i\051 == false) 423.44 187.85 P
2 10 Q
0.1 (.) 537.5 187.85 P
(Exactly) 72 175.85 T
4 9 Q
(max\050\050last - first\051 - 1, 0\051) 106.94 175.85 T
2 10 Q
(applications of the corresponding comparisons are done.) 247.34 175.85 T
9 F
(10.3.8 Lexicographical comparison) 72 155.23 T
4 9 Q
(template <class InputIterator1, class InputIterator2>) 108 135.04 T
(bool lexicographical_compare\050InputIterator1 first1, InputIterator1 last1,) 108 124.04 T
(InputIterator2 first2,) 180 113.04 T
(InputIterator2 last2\051;) 304.2 113.04 T
(template <class InputIterator1, class InputIterator2, class Compare>) 108 91.04 T
(bool lexicographical_compare\050InputIterator1 first1, InputIterator1 last1,) 108 80.04 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 54
%%Page: "53" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(53) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(InputIterator2 first2,) 180 714 T
( InputIterator2 last2, Compare comp\051;) 298.8 714 T
3.49 (lexicographical_compare) 72 695.33 P
2 10 Q
1.62 ( returns) 196.2 695.33 P
4 9 Q
3.49 ( true) 232.36 695.33 P
2 10 Q
1.62 ( if the sequence of elements defined by the range) 262.85 695.33 P
4 9 Q
3.49 ([first1,) 496.8 695.33 P
0.26 (last1\051) 72 683.33 P
2 10 Q
0.12 (is lexicographically less than the sequence of elements defined by the range) 110.06 683.33 P
4 9 Q
0.26 ([first2, last2\051) 446.99 683.33 P
2 10 Q
0.12 (. It) 528.25 683.33 P
1.22 (returns) 72 671.33 P
4 9 Q
2.62 (false) 107.75 671.33 P
2 10 Q
1.22 ( otherwise. At most) 134.76 671.33 P
4 9 Q
2.62 (min\050\050last1 - first1\051, \050last2 - first2\051\051) 228.5 671.33 P
2 10 Q
1.22 ( applications of the) 452.23 671.33 P
(corresponding comparison are done.) 72 659.33 T
9 F
(10.3.9 Permutation generators) 72 638.71 T
4 9 Q
(template <class BidirectionalIterator>) 108 618.52 T
(bool next_permutation\050BidirectionalIterator first, BidirectionalIterator last\051;) 108 607.52 T
(template <class BidirectionalIterator, class Compare>) 108 585.52 T
(bool next_permutation\050BidirectionalIterator first, BidirectionalIterator last,) 108 574.52 T
(Compare comp\051;) 180 563.52 T
0.51 (next_permutation) 72 544.85 P
2 10 Q
0.24 ( takes a sequence defined by the range) 158.4 544.85 P
4 9 Q
0.51 ([first, last\051) 332.59 544.85 P
2 10 Q
0.24 ( and transforms it into the) 403.3 544.85 P
5 F
0.24 (next) 522.22 544.85 P
2 F
4.76 (permutation. The next permutation is found by assuming that the set of all permutations is) 72 532.85 P
0.49 (lexicographically sorted with respect to) 72 520.85 P
4 9 Q
1.06 (operator<) 251.03 520.85 P
2 10 Q
0.49 ( or) 299.63 520.85 P
4 9 Q
1.06 (comp) 315.02 520.85 P
2 10 Q
0.49 (. If such a permutation exists, it returns) 336.62 520.85 P
4 9 Q
1.06 (true) 515.9 520.85 P
2 10 Q
0.49 (.) 537.5 520.85 P
-0.62 (Otherwise, it transforms the sequence into the smallest permutation, that is, the ascendingly sorted one, and) 72 508.85 P
(returns) 72 496.85 T
4 9 Q
(false) 106.54 496.85 T
2 10 Q
(. At most) 133.54 496.85 T
4 9 Q
(\050last - first) 176.37 496.85 T
2 10 Q
(\051/) 246.57 496.85 T
4 9 Q
(2) 255.96 496.85 T
2 10 Q
( swaps are performed.) 261.36 496.85 T
4 9 Q
(template <class BidirectionalIterator>) 108 474.52 T
(bool prev_permutation\050BidirectionalIterator first, BidirectionalIterator last\051;) 108 463.52 T
(template <class BidirectionalIterator, class Compare>) 108 441.52 T
(bool prev_permutation\050BidirectionalIterator first, BidirectionalIterator last,) 108 430.52 T
(Compare comp\051;) 180 419.52 T
3.43 (prev_permutation) 72 400.85 P
2 10 Q
1.59 ( takes a sequence defined by the range) 158.4 400.85 P
4 9 Q
3.43 ([first, last\051) 343.41 400.85 P
2 10 Q
1.59 ( and transforms it into the) 417.05 400.85 P
5 F
0.65 (previous) 72 388.85 P
2 F
0.65 ( permutation. The previous permutation is found by assuming that the set of all permutations is) 106.45 388.85 P
0.49 (lexicographically sorted with respect to) 72 376.85 P
4 9 Q
1.06 (operator<) 251.03 376.85 P
2 10 Q
0.49 ( or) 299.63 376.85 P
4 9 Q
1.06 (comp) 315.02 376.85 P
2 10 Q
0.49 (. If such a permutation exists, it returns) 336.62 376.85 P
4 9 Q
1.06 (true) 515.9 376.85 P
2 10 Q
0.49 (.) 537.5 376.85 P
-0.58 (Otherwise, it transforms the sequence into the largest permutation, that is, the descendingly sorted one, and) 72 364.85 P
(returns) 72 352.85 T
4 9 Q
(false) 106.54 352.85 T
2 10 Q
(. At most) 133.54 352.85 T
4 9 Q
(\050last - first) 176.37 352.85 T
2 10 Q
(\051/) 246.57 352.85 T
4 9 Q
(2) 255.96 352.85 T
2 10 Q
( swaps are performed.) 261.36 352.85 T
0 11 Q
(10.4 Generalized numeric operations) 72 329.5 T
9 10 Q
(10.4.1 Accumulate) 72 310.8 T
4 9 Q
(template <class InputIterator, class T>) 108 290.61 T
(T accumulate\050InputIterator first, InputIterator last, T init\051;) 108 279.61 T
(template <class InputIterator, class T, class BinaryOperation>) 108 257.61 T
(T accumulate\050InputIterator first, InputIterator last, T init,) 108 246.61 T
(BinaryOperation binary_op\051;) 180 235.61 T
1.27 (accumulate) 72 216.95 P
2 10 Q
0.59 ( is similar to the APL) 126 216.95 P
5 F
0.59 (reduction) 224.94 216.95 P
2 F
0.59 ( operator and Common Lisp) 263.46 216.95 P
5 F
0.59 (reduce) 394.46 216.95 P
2 F
0.59 ( function, but it avoids the) 420.77 216.95 P
0.78 (difficulty of defining the result of reduction on an empty sequence by always requiring an initial value.) 72 204.95 P
-0.24 (Accumulation is done) 72 192.95 P
-0.24 (by initializing the accumulator) 171.02 192.95 P
4 9 Q
-0.52 (acc) 308.29 192.95 P
2 10 Q
-0.24 ( with the initial value) 324.48 192.95 P
4 9 Q
-0.52 (init) 420.08 192.95 P
2 10 Q
-0.24 ( and then modifying it) 441.68 192.95 P
-0.06 (with) 72 180.95 P
4 9 Q
-0.14 (acc = acc + *i) 94.77 180.95 P
2 10 Q
-0.06 ( or) 169.81 180.95 P
4 9 Q
-0.14 (acc = binary_op\050acc, *i\051) 184.09 180.95 P
2 10 Q
-0.06 ( for every iterator) 313.28 180.95 P
4 9 Q
-0.14 (i) 393.08 180.95 P
2 10 Q
-0.06 ( in the range) 398.48 180.95 P
4 9 Q
-0.14 ( [first, last\051) 453.51 180.95 P
2 10 Q
-0.06 ( in) 528.83 180.95 P
(order.) 72 168.95 T
4 9 Q
(binary_op) 101.26 168.95 T
2 10 Q
( is assumed not to cause side effects.) 149.86 168.95 T
9 F
(10.4.2 Inner product) 72 148.32 T
4 9 Q
(template <class InputIterator1, class InputIterator2, class T>) 108 128.13 T
(T inner_product\050InputIterator1 first1, InputIterator1 last1,) 108 117.13 T
(InputIterator2 first2,) 180 106.13 T
(T init\051;) 304.2 106.13 T
(template <class InputIterator1, class InputIterator2, class T,) 108 84.13 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 55
%%Page: "54" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(54) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(class BinaryOperation1,) 180 714 T
(class BinaryOperation2>) 309.6 714 T
(T inner_product\050InputIterator1 first1, InputIterator1 last1,) 108 703 T
(InputIterator2) 180 692 T
(first2,) 261 692 T
(T init,) 304.2 692 T
(BinaryOperation1 binary_op1, BinaryOperation2 binary_op2\051;) 180 681 T
-0.76 (inner_product) 72 662.33 P
2 10 Q
-0.35 ( computes its result by initializing the accumulator) 142.2 662.33 P
4 9 Q
-0.76 (acc) 366.25 662.33 P
2 10 Q
-0.35 ( with the initial value) 382.45 662.33 P
4 9 Q
-0.76 (init) 477.49 662.33 P
2 10 Q
-0.35 ( and then) 499.09 662.33 P
0.22 (modifying it with) 72 650.33 P
4 9 Q
0.48 (acc = acc + \050*i1\051 * \050*i2\051) 153.15 650.33 P
2 10 Q
0.22 ( or) 291.03 650.33 P
4 9 Q
0.48 (acc = binary_op1\050acc, binary_op2\050*i1, *i2\051\051) 305.88 650.33 P
2 10 Q
-0.15 (for every iterator) 72 638.33 P
4 9 Q
-0.33 (i1) 149.1 638.33 P
2 10 Q
-0.15 (in the range) 164.97 638.33 P
4 9 Q
-0.33 ( [first, last\051) 217.39 638.33 P
2 10 Q
-0.15 ( and iterator) 292.33 638.33 P
4 9 Q
-0.33 (i2) 348.88 638.33 P
2 10 Q
-0.15 ( in the range) 359.68 638.33 P
4 9 Q
-0.33 ([first2, first2 + \050last) 416.79 638.33 P
(- first\051\051) 72 626.33 T
2 10 Q
( in order.) 120.6 626.33 T
4 9 Q
(binary_op1) 163.59 626.33 T
2 10 Q
(and) 222.99 626.33 T
4 9 Q
(binary_op2) 242.42 626.33 T
2 10 Q
(are assumed not to cause side effects.) 301.82 626.33 T
9 F
(10.4.3 Partial sum) 72 605.71 T
4 9 Q
(template <class InputIterator, class OutputIterator>) 108 585.52 T
(OutputIterator partial_sum\050InputIterator first, InputIterator last,) 108 574.52 T
(OutputIterator result\051;) 180 563.52 T
(template <class InputIterator, class OutputIterator, class BinaryOperation>) 108 541.52 T
(OutputIterator partial_sum\050InputIterator first, InputIterator last,) 108 530.52 T
(OutputIterator result,) 180 519.52 T
(BinaryOperation binary_op\051;) 304.2 519.52 T
2.21 (partial_sum) 72 500.85 P
2 10 Q
1.02 ( assigns to every iterator) 131.4 500.85 P
4 9 Q
2.21 (i) 247.08 500.85 P
2 10 Q
1.02 ( in the range) 252.48 500.85 P
4 9 Q
2.21 ([result, result + \050last - first\051\051) 314.3 500.85 P
2 10 Q
1.02 ( a value) 503.57 500.85 P
0.37 (correspondingly equal to) 72 488.85 P
4 9 Q
0.8 (\050\050...\050*first + *\050first + 1\051\051 + ... \051+ *\050first) 186.65 488.85 P
0.8 (+ \050i - result\051\051\051) 438.92 488.85 P
2 10 Q
0.37 ( or) 527.72 488.85 P
4 9 Q
-0.48 (binary_op\050binary_op\050..., binary_op\050*first, *\050first + 1\051\051,...\051, *\050first + \050i - result\051\051\051) 72 476.85 P
2 10 Q
-0.22 (.) 537.5 476.85 P
4 9 Q
-0.77 (partial_sum) 72 464.85 P
2 10 Q
-0.36 ( returns) 131.4 464.85 P
4 9 Q
-0.77 (result + \050last - first\051) 167.73 464.85 P
2 10 Q
-0.36 (. Exactly) 288.85 464.85 P
4 9 Q
-0.77 (\050last - first\051) 328.08 464.85 P
-0.77 (- 1) 404.29 464.85 P
2 10 Q
-0.36 (applications of) 424.35 464.85 P
4 9 Q
-0.77 (binary_op) 491.4 464.85 P
2 10 Q
(are performed.) 72 452.85 T
4 9 Q
(binary_op) 140.46 452.85 T
2 10 Q
(is expected not to have any side effects.) 194.46 452.85 T
4 9 Q
(result) 370.59 452.85 T
2 10 Q
( may be equal to) 402.99 452.85 T
4 9 Q
(first) 478.25 452.85 T
2 10 Q
(.) 505.25 452.85 T
9 F
(10.4.4 Adjacent difference) 72 432.23 T
4 9 Q
(template <class InputIterator, class OutputIterator>) 108 412.04 T
(OutputIterator adjacent_difference\050InputIterator first, InputIterator last,) 108 401.04 T
(OutputIterator result\051;) 180 390.04 T
(template <class InputIterator, class OutputIterator, class BinaryOperation>) 108 368.04 T
(OutputIterator adjacent_difference\050InputIterator first, InputIterator last,) 108 357.04 T
(OutputIterator result,) 180 346.04 T
(BinaryOperation binary_op\051;) 304.2 346.04 T
-1.28 (adjacent_difference) 72 327.37 P
2 10 Q
-0.59 ( assigns to every element referred to by iterator) 174.6 327.37 P
4 9 Q
-1.28 (i) 380.48 327.37 P
2 10 Q
-0.59 ( in the range) 385.88 327.37 P
4 9 Q
-1.28 ([result + 1, result) 441.23 327.37 P
0.66 (+ \050last - first\051\051) 72 315.37 P
2 10 Q
0.31 ( a value correspondingly equal to) 165.79 315.37 P
4 9 Q
0.66 (*\050first + \050i - result\051\051 - *\050first + \050i -) 318.04 315.37 P
-0.46 (result\051 - 1\051) 72 303.37 P
2 10 Q
-0.21 (or) 135.87 303.37 P
4 9 Q
-0.46 (binary_op\050*\050first + \050i - result\051\051, *\050first + \050i - result\051 - 1\051\051) 147.57 303.37 P
2 10 Q
-0.21 (.) 482.68 303.37 P
4 9 Q
-0.46 (result) 487.46 303.37 P
2 10 Q
-0.21 ( gets) 519.86 303.37 P
-0.28 (the value of) 72 291.37 P
4 9 Q
-0.61 ( *first) 123.48 291.37 P
2 10 Q
-0.28 (.) 160.67 291.37 P
4 9 Q
-0.61 (adjacent_difference) 165.39 291.37 P
2 10 Q
-0.28 ( returns) 267.99 291.37 P
4 9 Q
-0.61 (result + \050last - first\051) 304.47 291.37 P
2 10 Q
-0.28 (. Exactly) 426.24 291.37 P
4 9 Q
-0.61 (\050last - first\051) 465.61 291.37 P
-0.67 (- 1) 72 279.37 P
2 10 Q
-0.31 (applications of) 92.27 279.37 P
4 9 Q
-0.67 (binary_op) 159.41 279.37 P
2 10 Q
-0.31 (are performed.) 212.75 279.37 P
4 9 Q
-0.67 (binary_op) 280.6 279.37 P
2 10 Q
-0.31 (is expected not to have any side effects.) 333.93 279.37 P
4 9 Q
-0.67 (result) 507.6 279.37 P
2 10 Q
(may be equal to) 72 267.37 T
4 9 Q
(first) 144.76 267.37 T
2 10 Q
(.) 171.76 267.37 T
0 12 Q
(11  Adaptors) 72 237.29 T
2 10 Q
-0.31 (Adaptors are template classes that provide interface mappings. For example,) 72 219 P
4 9 Q
-0.67 (insert_iterator) 410.5 219 P
2 10 Q
-0.31 ( provides a) 491.5 219 P
(container with an output iterator interface.) 72 207 T
0 11 Q
(11.1 Container adaptors) 72 183.65 T
2 10 Q
1.53 (It is often useful to provide restricted interfaces to containers. The library provides) 72 166.57 P
4 9 Q
3.3 (stack) 458.52 166.57 P
2 10 Q
1.53 (,) 485.52 166.57 P
4 9 Q
3.3 (queue) 492.04 166.57 P
2 10 Q
1.53 ( and) 519.04 166.57 P
4 9 Q
(priority_queue) 72 154.57 T
2 10 Q
( through the adaptors that can work with different sequence types.) 147.6 154.57 T
9 F
(11.1.1 Stack) 72 133.95 T
2 F
0.28 (Any sequence supporting operations) 72 117.09 P
4 9 Q
0.61 (back) 238.93 117.09 P
2 10 Q
0.28 (,) 260.53 117.09 P
4 9 Q
0.61 (push_back) 265.81 117.09 P
2 10 Q
0.28 ( and) 314.41 117.09 P
4 9 Q
0.61 (pop_back) 336.9 117.09 P
2 10 Q
0.28 ( can be used to instantiate) 380.11 117.09 P
4 9 Q
0.61 (stack) 498.53 117.09 P
2 10 Q
0.28 (. In) 525.53 117.09 P
(particular,) 72 105.09 T
4 9 Q
(vector) 120.46 105.09 T
2 10 Q
(,) 152.86 105.09 T
4 9 Q
(list) 157.86 105.09 T
2 10 Q
( and) 179.46 105.09 T
4 9 Q
(deque) 201.39 105.09 T
2 10 Q
( can be used.) 228.39 105.09 T
4 9 Q
(template <class Container>) 108 82.76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 56
%%Page: "55" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(55) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(class stack {) 108 714 T
(friend bool operator==\050const stack<Container>& x, const stack<Container>& y\051;) 108 703 T
(friend bool operator<\050const stack<Container>& x, const stack<Container>& y\051;) 108 692 T
(public:) 108 681 T
(typedef Container::value_type value_type;) 144 670 T
(typedef Container::size_type size_type;) 144 659 T
(protected:) 108 648 T
(Container c;) 144 637 T
(public:) 108 626 T
(bool empty\050\051 const { return c.empty\050\051; }) 144 615 T
(size_type size\050\051 const { return c.size\050\051; }) 144 604 T
(value_type& top\050\051 { return c.back\050\051; }) 144 593 T
(const value_type& top\050\051 const { return c.back\050\051; }) 144 582 T
(void push\050const value_type& x\051 { c.push_back\050x\051; }) 144 571 T
(void pop\050\051 { c.pop_back\050\051; }) 144 560 T
(};) 108 549 T
(template <class Container>) 108 527 T
(bool operator==\050const stack<Container>& x, const stack<Container>& y\051 {) 108 516 T
(return x.c == y.c;) 144 505 T
(}) 108 494 T
(template <class Container>) 108 472 T
(bool operator<\050const stack<Container>& x, const stack<Container>& y\051 {) 108 461 T
(return x.c < y.c;) 144 450 T
(}) 108 439 T
2 10 Q
-0.2 (For example,) 72 420.33 P
4 9 Q
-0.43 (stack<vector<int> >) 131.56 420.33 P
2 10 Q
-0.2 ( is an integer stack made out of) 233.73 420.33 P
4 9 Q
-0.43 (vector) 371.95 420.33 P
2 10 Q
-0.2 (, and) 404.35 420.33 P
4 9 Q
-0.43 (stack<deque<char> >) 428.38 420.33 P
2 10 Q
-0.2 ( is) 530.55 420.33 P
(a character stack made out of) 72 408.33 T
4 9 Q
(deque) 203.42 408.33 T
2 10 Q
(.) 230.42 408.33 T
9 F
(11.1.2 Queue) 72 387.71 T
2 F
0.79 (Any sequence supporting operations) 72 370.85 P
4 9 Q
1.7 (front) 240.95 370.85 P
2 10 Q
0.79 (,) 267.95 370.85 P
4 9 Q
1.7 (back) 273.74 370.85 P
2 10 Q
0.79 (,) 295.34 370.85 P
4 9 Q
1.7 (push_back) 301.13 370.85 P
2 10 Q
0.79 ( and) 349.73 370.85 P
4 9 Q
1.7 (pop_front) 373.23 370.85 P
2 10 Q
0.79 ( can be used to instantiate) 421.83 370.85 P
4 9 Q
(queue) 72 358.85 T
2 10 Q
(. In particular,) 99 358.85 T
4 9 Q
(list) 164.15 358.85 T
2 10 Q
( and) 185.75 358.85 T
4 9 Q
(deque) 207.68 358.85 T
2 10 Q
( can be used.) 234.68 358.85 T
4 9 Q
(template <class Container>) 108 336.52 T
(class queue {) 108 325.52 T
(friend bool operator==\050const queue<Container>& x, const queue<Container>& y\051;) 108 314.52 T
(friend bool operator<\050const queue<Container>& x, const queue<Container>& y\051;) 108 303.52 T
(public:) 108 292.52 T
(typedef Container::value_type value_type;) 144 281.52 T
(typedef Container::size_type size_type;) 144 270.52 T
(protected:) 108 259.52 T
(Container c;) 144 248.52 T
(public:) 108 237.52 T
(bool empty\050\051 const { return c.empty\050\051; }) 144 226.52 T
(size_type size\050\051 const { return c.size\050\051; }) 144 215.52 T
(value_type& front\050\051 { return c.front\050\051; }) 144 204.52 T
(const value_type& front\050\051 const { return c.front\050\051; }) 144 193.52 T
(value_type& back\050\051 { return c.back\050\051; }) 144 182.52 T
(const value_type& back\050\051 const { return c.back\050\051; }) 144 171.52 T
(void push\050const value_type& x\051 { c.push_back\050x\051; }) 144 160.52 T
(void pop\050\051 { c.pop_front\050\051; }) 144 149.52 T
(};) 108 138.52 T
(template <class Container>) 108 116.52 T
(bool operator==\050const queue<Container>& x, const queue<Container>& y\051 {) 108 105.52 T
(return x.c == y.c;) 144 94.52 T
(}) 108 83.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 57
%%Page: "56" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(56) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class Container>) 108 703 T
(bool operator<\050const queue<Container>& x, const queue<Container>& y\051 {) 108 692 T
(return x.c < y.c;) 144 681 T
(}) 108 670 T
9 10 Q
(11.1.3 Priority queue) 72 649.71 T
2 F
-0.46 (Any sequence with random access iterator and supporting operations) 72 632.85 P
4 9 Q
-0.99 (front) 378.34 632.85 P
2 10 Q
-0.46 (,) 405.34 632.85 P
4 9 Q
-0.99 (push_back) 409.89 632.85 P
2 10 Q
-0.46 ( and) 458.48 632.85 P
4 9 Q
-0.99 (pop_back) 479.5 632.85 P
2 10 Q
-0.46 ( can) 522.7 632.85 P
(be used to instantiate) 72 620.85 T
4 9 Q
(priority_queue) 168.48 620.85 T
2 10 Q
(. In particular,) 244.08 620.85 T
4 9 Q
(vector) 309.23 620.85 T
2 10 Q
( and) 341.63 620.85 T
4 9 Q
(deque) 363.56 620.85 T
2 10 Q
( can be used.) 390.56 620.85 T
4 9 Q
(template <class Container, class Compare = less<Container::value_type> >) 108 598.52 T
(class priority_queue {) 108 587.52 T
(public:) 108 576.52 T
(typedef Container::value_type value_type;) 144 565.52 T
(typedef Container::size_type size_type;) 144 554.52 T
(protected:) 108 543.52 T
(Container c;) 144 532.52 T
(Compare comp;) 144 521.52 T
(public:) 108 510.52 T
(priority_queue\050const Compare& x = Compare\050\051\051 : c\050\051, comp\050x\051 {}) 144 499.52 T
(template <class InputIterator>) 144 488.52 T
(priority_queue\050InputIterator first, InputIterator last,) 144 477.52 T
(const Compare& x = Compare\050\051\051 : c\050first, last\051, comp\050x\051 {) 216 466.52 T
(make_heap\050c.begin\050\051, c.end\050\051, comp\051;) 180 455.52 T
(}) 144 444.52 T
(bool empty\050\051 const { return c.empty\050\051; }) 144 433.52 T
(size_type size\050\051 const { return c.size\050\051; }) 144 422.52 T
(const value_type& top\050\051 const { return c.front\050\051; }) 144 411.52 T
(void push\050const value_type& x\051 {) 144 400.52 T
(c.push_back\050x\051;) 180 389.52 T
(push_heap\050c.begin\050\051, c.end\050\051, comp\051;) 180 378.52 T
(}) 144 367.52 T
(void pop\050\051 {) 144 356.52 T
(pop_heap\050c.begin\050\051, c.end\050\051, comp\051;) 180 345.52 T
(c.pop_back\050\051;) 180 334.52 T
(}) 144 323.52 T
(};) 108 312.52 T
(// no equality is provided) 108 290.52 T
0 11 Q
(11.2 Iterator adaptors) 72 267.5 T
9 10 Q
(11.2.1 Reverse iterators) 72 248.8 T
2 F
-0.45 (Bidirectional and random access iterators have corresponding reverse iterator adaptors that iterate through) 72 231.95 P
0.09 (the data structure in the opposite direction. They have the same signatures as the corresponding iterators.) 72 219.95 P
0.28 (The fundamental relation between a reverse iterator and its corresponding iterator) 72 207.95 P
4 9 Q
0.6 (i) 441.78 207.95 P
2 10 Q
0.28 ( is established by the) 447.18 207.95 P
(identity) 72 195.95 T
4 9 Q
(&*\050reverse_iterator\050i\051\051 == &*\050i - 1\051.) 108 184.61 T
2 10 Q
-0.55 (This mapping is dictated by the fact that while there is always a pointer past the end of an array, there might) 72 165.95 P
(not be a valid pointer before the beginning of an array.) 72 153.95 T
4 9 Q
(template <class BidirectionalIterator, class T, class Reference = T&,) 108 131.61 T
(class Distance = ptrdiff_t>) 144 120.61 T
(class reverse_bidirectional_iterator) 108 109.61 T
(: public bidirectional_iterator<T, Distance> {) 144 98.61 T
(typedef reverse_bidirectional_iterator<BidirectionalIterator, T,) 144 87.61 T
(Reference,) 360 76.61 T
(Distance> self;) 419.4 76.61 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 58
%%Page: "57" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(57) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(friend bool operator==\050const self& x, const self& y\051;) 144 714 T
(protected:) 108 703 T
(BidirectionalIterator current;) 144 692 T
(public:) 108 681 T
(reverse_bidirectional_iterator\050\051 {}) 144 670 T
(reverse_bidirectional_iterator\050BidirectionalIterator x\051 : current\050x\051 {}) 144 659 T
(BidirectionalIterator base\050\051 { return current; }) 144 648 T
(Reference operator*\050\051 const {) 144 637 T
(BidirectionalIterator tmp = current;) 180 626 T
(return *--tmp;) 180 615 T
(}) 144 604 T
(self& operator++\050\051 {) 144 593 T
(--current;) 180 582 T
(return *this;) 180 571 T
(}) 144 560 T
(self operator++\050int\051 {) 144 549 T
(self tmp = *this;) 180 538 T
(--current;) 180 527 T
(return tmp;) 180 516 T
(}) 144 505 T
(self& operator--\050\051 {) 144 494 T
(++current;) 180 483 T
(return *this;) 180 472 T
(}) 144 461 T
(self operator--\050int\051 {) 144 450 T
(self tmp = *this;) 180 439 T
(++current;) 180 428 T
(return tmp;) 180 417 T
(}) 144 406 T
(};) 108 395 T
(template <class BidirectionalIterator, class T, class Reference, class Distance>) 108 373 T
(inline bool operator==\050) 108 362 T
(const reverse_bidirectional_iterator<BidirectionalIterator, T,) 180 351 T
(Reference, Distance>& x,) 396 340 T
(const reverse_bidirectional_iterator<BidirectionalIterator, T,) 180 329 T
(Reference, Distance>& y\051 {) 396 318 T
(return x.current == y.current;) 144 307 T
(}) 108 296 T
(template <class RandomAccessIterator, class T, class Reference = T&,) 108 274 T
(class Distance = ptrdiff_t>) 144 263 T
(class reverse_iterator : public random_access_iterator<T, Distance> {) 108 252 T
(typedef reverse_iterator<RandomAccessIterator, T, Reference, Distance>) 144 241 T
(self;) 180 230 T
(friend bool operator==\050const self& x, const self& y\051;) 144 219 T
(friend bool operator<\050const self& x, const self& y\051;) 144 208 T
(friend Distance operator-\050const self& x, const self& y\051;) 144 197 T
(friend self operator+\050Distance n, const self& x\051;) 144 186 T
(protected:) 108 175 T
(RandomAccessIterator current;) 144 164 T
(public:) 108 153 T
(reverse_iterator\050\051 {}) 144 142 T
(reverse_iterator\050RandomAccessIterator x\051 : current\050x\051 {}) 144 131 T
(RandomAccessIterator base\050\051 { return current; }) 144 120 T
(Reference operator*\050\051 const {) 144 109 T
(RandomAccessIterator tmp = current;) 180 98 T
(return *--tmp;) 180 87 T
(}) 144 76 T
52 634 54 654 R
V
52 106 54 126 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 59
%%Page: "58" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(58) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(self& operator++\050\051 {) 144 714 T
(--current;) 180 703 T
(return *this;) 180 692 T
(}) 144 681 T
(self operator++\050int\051 {) 144 670 T
(self tmp = *this;) 180 659 T
(--current;) 180 648 T
(return tmp;) 180 637 T
(}) 144 626 T
(self& operator--\050\051 {) 144 615 T
(++current;) 180 604 T
(return *this;) 180 593 T
(}) 144 582 T
(self operator--\050int\051 {) 144 571 T
(self tmp = *this;) 180 560 T
(++current;) 180 549 T
(return tmp;) 180 538 T
(}) 144 527 T
(self operator+\050Distance n\051) 144 516 T
(const {) 289.8 516 T
(return self\050current - n\051;) 180 505 T
(}) 144 494 T
(self&) 144 483 T
(operator+=\050Distance n\051 {) 180 483 T
(current -= n;) 180 472 T
(return *this;) 180 461 T
(}) 144 450 T
(self operator-\050Distance n\051 const {) 144 439 T
(return self\050current + n\051;) 180 428 T
(}) 144 417 T
(self& operator-=\050Distance n\051 {) 144 406 T
(current += n;) 180 395 T
(return *this;) 180 384 T
(}) 144 373 T
(Reference operator[]\050Distance n\051 { return *\050*this + n\051; }) 144 362 T
(};) 108 351 T
(template <class RandomAccessIterator, class T, class Reference, class Distance>) 108 329 T
(inline bool operator==\050) 108 318 T
(const reverse_iterator<RandomAccessIterator,) 144 307 T
(T, Reference, Distance>& x,) 387 307 T
-0.6 (const reverse_iterator<RandomAccessIterator, T, Reference, Distance>& y\051 {) 144 296 P
(return x.current == y.current;) 144 285 T
(}) 108 274 T
(template <class RandomAccessIterator, class T, class Reference, class Distance>) 108 252 T
(inline bool operator<\050) 108 241 T
(const reverse_iterator<RandomAccessIterator, T, Reference, Distance>& x,) 144 230 T
-0.6 (const reverse_iterator<RandomAccessIterator, T, Reference, Distance>& y\051 {) 144 219 P
(return y.current < x.current;) 144 208 T
(}) 108 197 T
(template <class RandomAccessIterator, class T, class Reference, class Distance>) 108 175 T
(inline Distance operator-\050) 108 164 T
(const reverse_iterator<RandomAccessIterator, T, Reference, Distance>& x,) 144 153 T
-0.6 (const reverse_iterator<RandomAccessIterator, T, Reference, Distance>& y\051 {) 144 142 P
(return y.current - x.current;) 144 131 T
(}) 108 120 T
(template <class RandomAccessIterator, class T, class Reference, class Distance>) 108 98 T
(inline reverse_iterator<RandomAccessIterator, T, Reference, Distance> operator+\050) 108 87 T
(Distance n,) 144 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 60
%%Page: "59" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(59) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.6 (const reverse_iterator<RandomAccessIterator, T, Reference, Distance>& x\051 {) 144 714 P
(return reverse_iterator<RandomAccessIterator, T, Reference,) 144 703 T
(Distance>) 468 703 T
(\050x.current - n\051;) 180 692 T
(}) 108 681 T
9 10 Q
(11.2.2 Insert iterators) 72 660.71 T
2 F
-0.34 (To make it possible to deal with insertion in the same way as writing into an array, a special kind of iterator) 72 643.85 P
(adaptors, called) 72 631.85 T
5 F
(insert iterators) 144.69 631.85 T
2 F
(, are provided in the library. With regular iterator classes,) 204.41 631.85 T
4 9 Q
(while \050first != last\051 *result++ = *first++;) 108 609.52 T
2 10 Q
-0.12 (causes a range) 72 590.85 P
4 9 Q
-0.25 ([first, last\051) 138.01 590.85 P
2 10 Q
-0.12 ( to be copied into a range starting with) 207.95 590.85 P
4 9 Q
-0.25 (result) 380.06 590.85 P
2 10 Q
-0.12 (. The same code with) 412.46 590.85 P
4 9 Q
-0.25 (result) 507.6 590.85 P
2 10 Q
0.23 (being an insert iterator will insert corresponding elements into the container. This device allows all of the) 72 578.85 P
(copying algorithms in the library to work in the) 72 566.85 T
5 F
(insert mod) 285.24 566.85 T
2 F
(e instead of the regular overwrite mode.) 328.3 566.85 T
1.87 (An insert iterator is constructed from a container and possibly one of its iterators pointing to where) 72 547.85 P
0.32 (insertion takes place if it is neither at the beginning nor at the end of the container. Insert iterators satisfy) 72 535.85 P
3.65 (the requirements of output iterators.) 72 523.85 P
4 9 Q
7.88 (operator*) 253.74 523.85 P
2 10 Q
3.65 ( returns the insert iterator itself. The assignment) 302.34 523.85 P
4 9 Q
0.46 (operator=\050const T& x\051) 72 511.85 P
2 10 Q
0.22 ( is defined on insert iterators to allow writing into them, it inserts) 186.33 511.85 P
4 9 Q
0.46 (x) 479.82 511.85 P
2 10 Q
0.22 ( right before) 485.22 511.85 P
1.09 (where the insert iterator is pointing. In other words, an insert iterator is like a cursor pointing into the) 72 499.85 P
2.73 (container where the insertion takes place.) 72 487.85 P
4 9 Q
5.91 (back_insert_iterator) 274.08 487.85 P
2 10 Q
2.73 ( inserts elements at the end of a) 382.08 487.85 P
7.55 (container,) 72 475.85 P
4 9 Q
16.31 (front_insert_iterator) 126 475.85 P
2 10 Q
7.55 ( inserts elements at the beginning of a container, and) 239.4 475.85 P
4 9 Q
9.8 (insert_iterator) 72 463.85 P
2 10 Q
4.54 ( inserts elements where the iterator points to in a container.) 153 463.85 P
4 9 Q
9.8 (back_inserter) 467.3 463.85 P
2 10 Q
4.54 (,) 537.5 463.85 P
4 9 Q
(front_inserter) 72 451.85 T
2 10 Q
(, and) 147.6 451.85 T
4 9 Q
(inserter) 172.03 451.85 T
2 10 Q
( are three functions making the insert iterators out of a container.) 215.23 451.85 T
4 9 Q
(template <class Container>) 108 429.52 T
(class back_insert_iterator : public output_iterator {) 108 418.52 T
(protected:) 108 407.52 T
(Container& container;) 144 396.52 T
(public:) 108 385.52 T
(back_insert_iterator\050Container& x\051 : container\050x\051 {}) 144 374.52 T
(back_insert_iterator<Container>&) 144 363.52 T
(operator=\050) 144 352.52 T
(const Container::value_type& value\051 {) 198 352.52 T
(container.push_back\050value\051;) 180 341.52 T
(return *this;) 180 330.52 T
(}) 144 319.52 T
(back_insert_iterator<Container>& operator*\050\051 { return *this; }) 144 308.52 T
(back_insert_iterator<Container>& operator++\050\051 { return *this; }) 144 297.52 T
(back_insert_iterator<Container>& operator++\050int\051 { return *this; }) 144 286.52 T
(};) 108 275.52 T
(template <class Container>) 108 253.52 T
(back_insert_iterator<Container> back_inserter\050Container& x\051 {) 108 242.52 T
(return back_insert_iterator<Container>\050x\051;) 144 231.52 T
(}) 108 220.52 T
(template <class Container>) 108 198.52 T
(class front_insert_iterator : public output_iterator {) 108 187.52 T
(protected:) 108 176.52 T
(Container& container;) 144 165.52 T
(public:) 108 154.52 T
(front_insert_iterator\050Container& x\051 : container\050x\051 {}) 144 143.52 T
(front_insert_iterator<Container>&) 144 132.52 T
(operator=\050const Container::value_type& value\051 {) 144 121.52 T
(container.push_front\050value\051;) 180 110.52 T
(return *this;) 180 99.52 T
(}) 144 88.52 T
(front_insert_iterator<Container>& operator*\050\051 { return *this; }) 144 77.52 T
52 283.52 54 292.52 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 61
%%Page: "60" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(60) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(front_insert_iterator<Container>& operator++\050\051 { return *this; }) 144 714 T
(front_insert_iterator<Container>& operator++\050int\051 { return *this; }) 144 703 T
(};) 108 692 T
(template <class Container>) 108 670 T
(front_insert_iterator<Container> front_inserter\050Container& x\051 {) 108 659 T
(return front_insert_iterator<Container>\050x\051;) 144 648 T
(}) 108 637 T
(template <class Container>) 108 615 T
(class insert_iterator : public output_iterator {) 108 604 T
(protected:) 108 593 T
(Container& container;) 144 582 T
(Container::iterator iter;) 144 571 T
(public:) 108 560 T
(insert_iterator\050Container& x, Container::iterator i\051) 144 549 T
(: container\050x\051, iter\050i\051 {}) 180 538 T
(insert_iterator<Container>&) 144 527 T
-3 (operator=\050const Container::value_type& value\051 {) 295.2 527 P
(iter = container.insert\050iter, value\051;) 180 516 T
(++iter;) 180 505 T
(return *this;) 180 494 T
(}) 144 483 T
(insert_iterator<Container>& operator*\050\051 { return *this; }) 144 472 T
(insert_iterator<Container>& operator++\050\051 { return *this; }) 144 461 T
(insert_iterator<Container>& operator++\050int\051 { return *this; }) 144 450 T
(};) 108 439 T
(template <class Container, class Iterator>) 108 417 T
(insert_iterator<Container> inserter\050Container& x, Iterator i\051 {) 108 406 T
(return insert_iterator<Container>\050x, Container::iterator\050i\051\051;) 144 395 T
(}) 108 384 T
9 10 Q
(11.2.3 Raw storage iterator) 72 363.71 T
4 9 Q
1.6 (raw_storage_iterator) 72 346.85 P
2 10 Q
0.74 ( is provided to enable algorithms to store the results into uninitialized memory.) 180 346.85 P
-0.31 (The formal template parameter) 72 334.85 P
4 9 Q
-0.66 (OutputIterator) 211.43 334.85 P
2 10 Q
-0.31 ( is required to have) 287.03 334.85 P
4 9 Q
-0.66 (construct\050OutputIterator, const) 373.26 334.85 P
(T&\051) 72 322.85 T
2 10 Q
( defined.) 88.2 322.85 T
4 9 Q
(template <class OutputIterator, class T>) 108 300.52 T
(class raw_storage_iterator : public output_iterator {) 108 289.52 T
(protected:) 108 278.52 T
(OutputIterator iter;) 144 267.52 T
(public:) 108 256.52 T
(raw_storage_iterator\050OutputIterator x\051 : iter\050x\051 {}) 144 245.52 T
(raw_storage_iterator<OutputIterator, T>& operator*\050\051 { return *this; }) 144 234.52 T
(raw_storage_iterator<OutputIterator, T>& operator=\050const T& element\051 {) 144 223.52 T
(construct\050iter, element\051;) 180 212.52 T
(return *this;) 180 201.52 T
(}) 144 190.52 T
(raw_storage_iterator<OutputIterator, T>& operator++\050\051 {) 144 179.52 T
(++iter;) 180 168.52 T
(return *this;) 180 157.52 T
(}) 144 146.52 T
(raw_storage_iterator<OutputIterator, T> operator++\050int\051 {) 144 135.52 T
(raw_storage_iterator<OutputIterator, T> tmp = *this;) 180 124.52 T
(++iter;) 180 113.52 T
(return tmp;) 180 102.52 T
(}) 144 91.52 T
(};) 108 80.52 T
52 700 54 709 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 62
%%Page: "61" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(61) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(11.3 Function adaptors) 72 711.98 T
2 10 Q
(Function adaptors work only with function object classes with argument types and result type defined.) 72 694.9 T
9 F
(11.3.1 Negators) 72 674.28 T
2 F
3.71 (Negators) 72 657.43 P
4 9 Q
8.01 (not1) 118.78 657.43 P
2 10 Q
3.71 ( and) 140.38 657.43 P
4 9 Q
8.01 (not2) 169.73 657.43 P
2 10 Q
3.71 ( take a unary and a binary predicate correspondingly and return their) 191.33 657.43 P
(complements.) 72 645.43 T
4 9 Q
(template <class Predicate>) 108 623.09 T
(class unary_negate : public unary_function<Predicate::argument_type, bool> {) 108 612.09 T
(protected:) 108 601.09 T
(Predicate pred;) 144 590.09 T
(public:) 108 579.09 T
(unary_negate\050const Predicate& x\051 : pred\050x\051 {}) 144 568.09 T
(bool operator\050\051\050const argument_type& x\051 const { return !pred\050x\051; }) 144 557.09 T
(};) 108 546.09 T
(template <class Predicate>) 108 524.09 T
(unary_negate<Predicate> not1\050const Predicate& pred\051 {) 108 513.09 T
(return unary_negate<Predicate>\050pred\051;) 144 502.09 T
(}) 108 491.09 T
(template <class Predicate>) 108 469.09 T
(class binary_negate : public binary_function<Predicate::first_argument_type,) 108 458.09 T
(Predicate::second_argument_type, bool> {) 324 447.09 T
(protected:) 108 436.09 T
(Predicate pred;) 144 425.09 T
(public:) 108 414.09 T
(binary_negate\050const Predicate& x\051 : pred\050x\051 {}) 144 403.09 T
(bool operator\050\051\050const first_argument_type& x,) 144 392.09 T
( const second_argument_type& y\051 const {) 216 381.09 T
(return !pred\050x, y\051;) 180 370.09 T
(}) 144 359.09 T
(};) 108 348.09 T
(template <class Predicate>) 108 326.09 T
(binary_negate<Predicate> not2\050const Predicate& pred\051 {) 108 315.09 T
(return binary_negate<Predicate>\050pred\051;) 144 304.09 T
(}) 108 293.09 T
9 10 Q
(11.3.2 Binders) 72 272.8 T
2 F
-0.51 (Binders) 72 255.95 P
4 9 Q
-1.1 (bind1st) 107.92 255.95 P
2 10 Q
-0.51 ( and) 145.72 255.95 P
4 9 Q
-1.1 (bind2nd) 166.63 255.95 P
2 10 Q
-0.51 ( take a function object) 204.43 255.95 P
4 9 Q
-1.1 (f) 300.88 255.95 P
2 10 Q
-0.51 ( of two arguments and a value) 306.27 255.95 P
4 9 Q
-1.1 (x) 439.84 255.95 P
2 10 Q
-0.51 ( and return a function) 445.24 255.95 P
-0.18 (object of one argument constructed out of) 72 243.95 P
4 9 Q
-0.4 (f) 257.48 243.95 P
2 10 Q
-0.18 ( with the first or second argument correspondingly bound to) 262.88 243.95 P
4 9 Q
-0.4 (x) 532.1 243.95 P
2 10 Q
-0.18 (.) 537.5 243.95 P
4 9 Q
(template <class Operation>) 108 221.61 T
(class binder1st : public unary_function<) 108 210.61 T
(Operation::second_argument_type,) 324 210.61 T
(Operation::result_type> {) 324 199.61 T
(protected:) 108 188.61 T
(Operation op;) 144 177.61 T
(Operation::first_argument_type value;) 144 166.61 T
(public:) 108 155.61 T
(binder1st\050const Operation& x, const Operation::first_argument_type& y\051) 144 144.61 T
(: op\050x\051, value\050y\051 {}) 180 133.61 T
(result_type operator\050\051\050const argument_type& x\051 const {) 144 122.61 T
(return op\050value, x\051;) 180 111.61 T
(}) 144 100.61 T
(};) 108 89.61 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 63
%%Page: "62" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(62) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class Operation, class T>) 108 714 T
(binder1st<Operation> bind1st\050const Operation& op,) 108 703 T
(const T& x\051 {) 378 703 T
(return binder1st<Operation>\050op, Operation::first_argument_type\050x\051\051;) 144 692 T
(}) 108 681 T
(template <class Operation>) 108 659 T
(class binder2nd : public unary_function<Operation::first_argument_type,) 108 648 T
(Operation::result_type> {) 324 637 T
(protected:) 108 626 T
(Operation op;) 144 615 T
(Operation::second_argument_type value;) 144 604 T
(public:) 108 593 T
(binder2nd\050const Operation& x, const Operation::second_argument_type& y\051) 144 582 T
(: op\050x\051, value\050y\051 {}) 180 571 T
(result_type operator\050\051\050const argument_type& x\051 const {) 144 560 T
(return op\050x, value\051;) 180 549 T
(}) 144 538 T
(};) 108 527 T
(template <class Operation, class T>) 108 505 T
(binder2nd<Operation> bind2nd\050const Operation& op,) 108 494 T
(const T& x\051 {) 378 494 T
(return binder2nd<Operation>\050op, Operation::second_argument_type\050x\051\051;) 144 483 T
(}) 108 472 T
2 10 Q
0.35 (For example,) 72 453.33 P
4 9 Q
0.76 (find_if\050v.begin\050\051, v.end\050\051, bind2nd\050greater<int>\050\051, 5\051\051) 132.67 453.33 P
2 10 Q
0.35 ( finds the first integer in) 431.95 453.33 P
0.37 (vector) 72 441.33 P
4 9 Q
0.8 (v) 102.42 441.33 P
2 10 Q
0.37 ( greater than 5;) 107.82 441.33 P
4 9 Q
0.8 (find_if\050v.begin\050\051, v.end\050\051, bind1st\050greater<int>\050\051, 5\051\051) 178.01 441.33 P
2 10 Q
0.37 ( finds the first) 477.42 441.33 P
(integer in) 72 429.33 T
4 9 Q
(v) 116.81 429.33 T
2 10 Q
( less than 5.) 122.21 429.33 T
9 F
(11.3.3 Adaptors for pointers to functions) 72 408.71 T
2 F
(To allow pointers to \050unary and binary\051 functions to work with function adaptors the library provides:) 72 391.85 T
4 9 Q
(template <class Arg, class Result>) 108 369.52 T
(class pointer_to_unary_function : public unary_function<Arg, Result> {) 108 358.52 T
(protected:) 108 347.52 T
(Result \050*ptr\051\050Arg\051;) 144 336.52 T
(public:) 108 325.52 T
(pointer_to_unary_function\050Result \050*x\051\050Arg\051\051) 144 314.52 T
(: ptr\050x\051 {}) 381.6 314.52 T
(Result operator\050\051\050Arg x\051 const { return ptr\050x\051; }) 144 303.52 T
(};) 108 292.52 T
(template <class Arg, class Result>) 108 270.52 T
(pointer_to_unary_function<Arg, Result> ptr_fun\050Result \050*x\051\050Arg\051\051 {) 108 259.52 T
(return pointer_to_unary_function<Arg, Result>\050x\051;) 144 248.52 T
(}) 108 237.52 T
(template <class Arg1, class Arg2, class Result>) 108 215.52 T
(class pointer_to_binary_function : public binary_function<Arg1, Arg2, Result> {) 108 204.52 T
(protected:) 108 193.52 T
(Result \050*ptr\051\050Arg1, Arg2\051;) 144 182.52 T
(public:) 108 171.52 T
(pointer_to_binary_function\050Result \050*x\051\050Arg1, Arg2\051\051) 144 160.52 T
(: ptr\050x\051 {}) 424.8 160.52 T
(Result operator\050\051\050Arg1 x, Arg2 y\051 const {) 144 149.52 T
(return ptr\050x, y\051; }) 370.8 149.52 T
(};) 108 138.52 T
(template <class Arg1, class Arg2, class Result>) 108 116.52 T
(pointer_to_binary_function<Arg1, Arg2, Result>) 108 105.52 T
(ptr_fun\050Result \050*x\051\050Arg1, Arg2\051\051 {) 108 94.52 T
(return pointer_to_binary_function<Arg1, Arg2, Result>\050x\051;) 144 83.52 T
52 438 54 460 R
V
52 300.52 54 309.52 R
V
52 146.52 54 155.52 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 64
%%Page: "63" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(63) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(}) 108 714 T
2 10 Q
0.79 (For example,) 72 695.33 P
4 9 Q
1.71 (replace_if\050v.begin\050\051, v.end\050\051, not1\050bind2nd\050ptr_fun\050strcmp\051, \323C\323\051\051, \323C++\323\051) 133.55 695.33 P
2 10 Q
(replaces all the) 72 683.33 T
4 9 Q
(\323C\323) 140.32 683.33 T
2 10 Q
( with) 156.52 683.33 T
4 9 Q
(\323C++\323) 181.85 683.33 T
2 10 Q
( in sequence) 208.85 683.33 T
4 9 Q
(v) 265.58 683.33 T
2 10 Q
(.) 270.98 683.33 T
1.42 (Compilation systems that have multiple pointer to function types have to provide additional) 72 664.33 P
4 9 Q
3.06 (ptr_fun) 502.2 664.33 P
2 10 Q
(template functions.) 72 652.33 T
0 12 Q
(12  Memory Handling) 72 622.25 T
0 11 Q
(12.1 Primitives) 72 599.6 T
2 10 Q
1.56 (To obtain a typed pointer to an uninitialized memory buffer of a given size the following function is) 72 582.53 P
(defined:) 72 570.53 T
4 9 Q
(template <class T>) 108 548.2 T
(inline T* allocate\050ptrdiff_t n, T*\051; // n >= 0) 108 537.2 T
2 10 Q
(The size \050in bytes\051 of the allocated buffer is no less than) 72 518.53 T
4 9 Q
(n*sizeof\050T\051) 318.46 518.53 T
2 10 Q
(.) 377.86 518.53 T
1.69 (For every memory model there is a corresponding) 72 499.53 P
4 9 Q
3.64 (allocate) 310.01 499.53 P
2 10 Q
1.69 ( template function defined with the first) 353.21 499.53 P
(argument type being the distance type of the pointers in the memory model.) 72 487.53 T
-0.44 (For example, if a compilation system supports) 72 468.53 P
4 9 Q
-0.96 (__huge) 275.71 468.53 P
2 10 Q
-0.44 ( pointers with the distance type being) 308.11 468.53 P
4 9 Q
-0.96 (long long) 473.94 468.53 P
2 10 Q
-0.44 (, the) 521.58 468.53 P
(following template function is provided:) 72 456.53 T
4 9 Q
(template <class T>) 108 434.2 T
(inline T __huge* allocate\050long long n, T __huge *\051;) 108 423.2 T
2 10 Q
(Also, the following functions are provided:) 72 404.53 T
4 9 Q
(template <class T>) 108 382.2 T
(inline void deallocate\050T* buffer\051;) 108 371.2 T
(template <class T1, class T2>) 108 349.2 T
(inline void construct\050T1* p, const T2& value\051 {) 108 338.2 T
(new \050p\051 T1\050value\051;) 144 327.2 T
(}) 108 316.2 T
(template <class T>) 108 294.2 T
(inline void destroy\050T* pointer\051 {) 108 283.2 T
(pointer->~T\050\051;) 144 272.2 T
(}) 108 261.2 T
2.79 (deallocate) 72 242.53 P
2 10 Q
1.29 ( frees the buffer allocated by) 126 242.53 P
4 9 Q
2.79 (allocate) 261.65 242.53 P
2 10 Q
1.29 (. For every memory model there are corresponding) 304.85 242.53 P
4 9 Q
1.4 (deallocate) 72 230.53 P
2 10 Q
0.65 (,) 126 230.53 P
4 9 Q
1.4 (construct) 131.65 230.53 P
2 10 Q
0.65 ( and) 180.25 230.53 P
4 9 Q
1.4 (destroy) 203.47 230.53 P
2 10 Q
0.65 ( template functions defined with the first argument type being the) 241.27 230.53 P
(pointer type of the memory model.) 72 218.53 T
4 9 Q
(template <class T>) 108 196.2 T
(pair<T*, ptrdiff_t> get_temporary_buffer\050ptrdiff_t n, T*\051;) 108 185.2 T
(template <class T>) 108 163.2 T
(void return_temporary_buffer\050T* p\051;) 108 152.2 T
6.76 (get_temporary_buffer) 72 133.53 P
2 10 Q
3.13 ( finds the largest buffer not greater than) 180 133.53 P
4 9 Q
6.76 (n*sizeof\050T\051) 383.74 133.53 P
2 10 Q
3.13 (, and returns a pair) 443.14 133.53 P
7.34 (consisting of the address and the capacity \050in the units of) 72 121.53 P
4 9 Q
15.86 (sizeof\050T\051) 406.42 121.53 P
2 10 Q
7.34 (\051 of the buffer.) 455.02 121.53 P
4 9 Q
(return_temporary_buffer) 72 109.53 T
2 10 Q
( returns the buffer allocated by) 196.2 109.53 T
4 9 Q
(get_temporary_buffer) 335.04 109.53 T
2 10 Q
(.) 443.04 109.53 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 65
%%Page: "64" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(64) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(12.2 Specialized algorithms) 72 711.98 T
2 10 Q
0.64 (All the iterators that are used as formal template parameters in the following algorithms are required to) 72 694.9 P
(have) 72 682.9 T
4 9 Q
(construct\050ForwardIterator, const T&\051) 95.76 682.9 T
2 10 Q
( defined.) 290.16 682.9 T
4 9 Q
(template <class ForwardIterator>) 108 660.57 T
(void destroy\050ForwardIterator first, ForwardIterator last\051 {) 108 649.57 T
(while \050first != last\051 destroy\050first++\051;) 144 638.57 T
(}) 108 627.57 T
(template <class InputIterator, class ForwardIterator>) 108 605.57 T
(ForwardIterator uninitialized_copy\050InputIterator first, InputIterator last,) 108 594.57 T
(   ForwardIterator result\051 {) 252 583.57 T
(while \050first != last\051 construct\050result++, *first++\051;) 144 572.57 T
(return result;) 144 561.57 T
(}) 108 550.57 T
(template <class ForwardIterator, class T>) 108 528.57 T
(void uninitialized_fill\050ForwardIterator first, ForwardIterator last,) 108 517.57 T
(const T& x\051 {) 216 506.57 T
(while \050first != last\051 construct\050first++, x\051;) 144 495.57 T
(}) 108 484.57 T
(template <class ForwardIterator, class Size, class T>) 108 462.57 T
(void uninitialized_fill_n\050ForwardIterator first, Size n, const T& x\051 {) 108 451.57 T
(while \050n--\051 construct\050first++, x\051;) 144 440.57 T
(}) 108 429.57 T
0 12 Q
(13  Acknowledgments) 72 399.82 T
2 10 Q
(The following people contributed to the design of STL:) 72 381.53 T
0.91 (Pete Becker, David Jacobson, Mehdi Jazayeri, Tom Keffer, Andy Koenig, Milon Mackey, Doug Morgan,) 72 362.53 P
0.41 (Dave Musser, Nathan Myers, Larry Podmolik, Bob Shaw, Carl Staelin, Bjarne Stroustrup, Mark Terribile,) 72 350.53 P
(Parthasarathy Tirumalai, Mike Vilot, John Wilkes.) 72 338.53 T
1.43 (The present library is a descendant of several earlier libraries \050in Scheme, Ada, and C++\051 which were) 72 319.53 P
-0.17 (designed jointly with Dave Musser. He contributed to all the aspects of the STL work: design of the overall) 72 307.53 P
(structure, semantic requirements, algorithm design, complexity analysis and performance measurements.) 72 295.53 T
-0.02 (Andy Koenig is responsible for explaining to us that C++ has an underlying abstract machine and that the) 72 276.53 P
-0.07 (generic library should fit this machine. He also convinced us that we should attempt to turn our work into) 72 264.53 P
(a C++ standard proposal.) 72 252.53 T
-0.23 (During the writing of the proposal Bjarne Stroustrup has been a constant supporter and has been giving us) 72 233.53 P
(a lot of technical advice especially on the language dependent parts of the library.) 72 221.53 T
1.2 (Andy and Bjarne have answered literally hundreds of \322urgent\323 messages and phone calls of the form:) 72 202.53 P
(\322Could we do this?\323) 72 190.53 T
-0.08 (Dan Fishman and Mary Loomis created the environment where we were able to concentrate on the design) 72 171.53 P
(without any distractions.) 72 159.53 T
1.67 (Bill Worley is responsible for starting this project and supporting it throughout his tenure as our lab) 72 140.53 P
(director.) 72 128.53 T
(Rick Amerson and Dmitry Lenkov have given us advice and support.) 72 109.53 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 66
%%Page: "65" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(65) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 12 Q
0 X
(14  Bibliography) 72 711.25 T
2 10 Q
(M. Ellis and B. Stroustrup,) 72 692.96 T
5 F
(The Annotated C++ Reference Manual) 191.02 692.96 T
2 F
(, Addison-Wesley, New York, 1990.) 348.33 692.96 T
-0.41 (D. Kapur, D. R. Musser, and A. A. Stepanov, \322Tecton, A Language for Manipulating Generic Objects,\323) 72 673.96 P
5 F
-0.41 (Proc.) 518.99 673.96 P
1.43 (of Workshop on Program Specification) 72 661.96 P
2 F
1.43 (, Aarhus, Denmark, August 1981,) 232.5 661.96 P
5 F
1.43 (Lecture Notes in Computer Science) 389.55 661.96 P
2 F
1.43 (,) 537.5 661.96 P
(Springer-Verlag, vol. 134, 1982.) 72 649.96 T
0.25 (D. Kapur, D. R. Musser, and A. A. Stepanov, \322Operators and Algebraic Structures,\323) 72 630.96 P
5 F
0.25 (Proc. of the Conference) 446.65 630.96 P
1.6 (on Functional Programming Languages and Computer Architecture) 72 618.96 P
2 F
1.6 (, Portsmouth, New Hampshire, October) 357.16 618.96 P
(1981.) 72 606.96 T
0.12 (A. Kershenbaum, D. R. Musser, and A. A. Stepanov, \322Higher Order Imperative Programming,\323 Technical) 72 587.96 P
(Report 88-10, Rensselaer Polytechnic Institute, April 1988.) 72 575.96 T
(A. Koenig, \322Associative arrays in C++,\323) 72 556.96 T
5 F
(Proc. USENIX Conference) 250.4 556.96 T
2 F
(, San Francisco, CA, June 1988.) 358.83 556.96 T
(A. Koenig, \322Applicators, Manipulators, and Function Objects,\323) 72 537.96 T
5 F
(C++ Journal) 352.29 537.96 T
2 F
(, vol. 1, #1, Summer 1990.) 403.58 537.96 T
0.59 (D. R. Musser and A. A. Stepanov, \322A Library of Generic Algorithms in Ada,\323) 72 518.96 P
5 F
0.59 (Proc. of 1987 ACM SIGAda) 423.32 518.96 P
(International Conference) 72 506.96 T
2 F
(, Boston, December, 1987.) 172.47 506.96 T
1.12 (D. R. Musser and A. A. Stepanov, \322Generic Programming,\323 invited paper, in P. Gianni, Ed.,) 72 487.96 P
5 F
1.12 (ISSAC \32488) 495.26 487.96 P
0.05 (Symbolic and Algebraic Computation Proceedings, Lecture Notes in Computer Science) 72 475.96 P
2 F
0.05 (, Springer-Verlag, vol. 358,) 422.32 475.96 P
(1989.) 72 463.96 T
(D. R. Musser and A. A. Stepanov,) 72 444.96 T
5 F
(Ada Generic Library) 222.86 444.96 T
2 F
(, Springer-Verlag, 1989.) 306.01 444.96 T
-0.24 (D. R. Musser and A. A. Stepanov, \322Algorithm-Oriented Generic Libraries,\323) 72 425.96 P
5 F
-0.24 (Software Practice and Experience) 403.5 425.96 P
2 F
-0.24 (,) 537.5 425.96 P
(vol. 24\0507\051, July 1994.) 72 413.96 T
(M. Stahl and U. Steinm\237ller, \322Generic Dynamic Arrays,\323) 72 394.96 T
5 F
(The C++ Report) 324.97 394.96 T
2 F
(, October 1993.) 390.98 394.96 T
(J. E. Shopiro, \322Strings and Lists for C++,\323) 72 375.96 T
5 F
(AT&T Bell Labs Internal Technical Memorandum) 256.93 375.96 T
2 F
(, July 1985.) 459.99 375.96 T
1.62 (A. A. Stepanov and M. Lee, \322The Standard Template Library,\323 Technical Report HPL-94-34, Hewlett-) 72 356.96 P
(Packard Laboratories, April 1994.) 72 344.96 T
(B. Stroustrup,) 72 325.96 T
5 F
(The Design and Evolution of C++) 135.55 325.96 T
2 F
(, Addison-Wesley, New York, 1994.) 272.96 325.96 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 67
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 67
%%DocumentFonts: Helvetica-Bold
%%+ Times-Italic
%%+ Palatino-Roman
%%+ Times-Roman
%%+ Courier
%%+ Palatino-Italic
%%+ Times-Bold
%%+ Palatino-Bold
%%+ Courier-Oblique
%%+ Helvetica-Oblique
%%EOF
